<?xml version="1.0" encoding="UTF-8"?>
<d:DocumentationCore xmlns:d="http://math.spbu.ru/drl" xmlns="http://docbook.org/ns/docbook"><d:InfElement id="root" name="test">

<appendix id="app-install">
<?dbhtml filename="appa.html"?>
<appendixinfo>
<pubdate>$Date: 2001-08-02 14:27:50 +0400 (Чт, 02 авг 2001) $</pubdate>
<releaseinfo>$Revision: 546 $</releaseinfo>
</appendixinfo>
<title>Installation</title>
<sect1 id="s-installdtd">
<title>Installing the DocBook DTD</title>
<para>
<indexterm id="docbookinstallappa" class="startofrange"><primary>DocBook DTD</primary>
  <secondary>installation</secondary></indexterm>

This appendix describes how to install the DocBook DTD on your system
so that popular command-line tools like <application>SP</application> can
use it. If you are installing DocBook for use with a commercial application,
consult the documentation for your application as well.</para>
<para>
This appendix describes the installation of DocBook V3.1. If you are using
another distribution, the process should be about the same, but there
may be minor differences.  DocBook V3.1 is backward compatible with DocBook
V3.0, and is the recommended distribution at the time of this writing.
</para>
<sect2>
<title>Unpacking the DocBook V3.1 Distribution</title>
<para>
<indexterm><primary>DocBook DTD</primary>
  <secondary>online copies</secondary></indexterm>
DocBook is distributed on the <ulink
url="http://www.oasis-open.org/docbook/">DocBook web
site</ulink>. You will also find a copy of the distribution on
the <link linkend="app-cdrom">CD-ROM</link>.</para>

<para>
<indexterm><primary>files</primary>
  <secondary>DocBook DTD distribution</secondary></indexterm>

The distribution consists of 14 files:</para>
<informaltable frame="none">
<tgroup cols="2">
<colspec colname="COLSPEC0" colwidth="1in"/>
<colspec colname="COLSPEC1" colwidth="3.8in"/>
<tbody>
<row>
<entry colname="COLSPEC0" colsep="0" rowsep="0"><filename>31chg.txt</filename></entry>
<entry colname="COLSPEC1" colsep="0" rowsep="0">Describes the changes in DocBook
V3.1 from the preceding version (3.0)</entry>
</row>
<row>
<entry colname="COLSPEC0" colsep="0" rowsep="0"><filename>40issues.txt</filename></entry>
<entry colname="COLSPEC1" colsep="0" rowsep="0">Summarizes backwards-incompatible
changes planned for DocBook V4.0</entry>
</row>
<row>
<entry colname="COLSPEC0" colsep="0" rowsep="0"><filename>50issues.txt</filename></entry>
<entry colname="COLSPEC1" colsep="0" rowsep="0">Summarizes backwards-incompatible
changes planned for DocBook V5.0</entry>
</row>
<row>
<entry colname="COLSPEC0" colsep="0" rowsep="0"><filename>cals-tbl.dtd</filename></entry>
<entry colname="COLSPEC1" colsep="0" rowsep="0">The CALS Table Model DTD</entry>
</row>
<row>
<entry colname="COLSPEC0" colsep="0" rowsep="0"><filename>ChangeLog</filename></entry>
<entry colname="COLSPEC1" colsep="0" rowsep="0">A GNU-style ChangeLog
summarizing the individual edits made on each file in the distribution
since V3.0.
</entry>
</row>
<row>
<entry colname="COLSPEC0" colsep="0" rowsep="0"><filename>dbcent.mod</filename></entry>
<entry colname="COLSPEC1" colsep="0" rowsep="0">The character entity module
</entry>
</row>
<row>
<entry colname="COLSPEC0" colsep="0" rowsep="0"><filename>dbgenent.mod</filename></entry>
<entry colname="COLSPEC1" colsep="0" rowsep="0">The general entity module
</entry>
</row>
<row>
<entry colname="COLSPEC0" colsep="0" rowsep="0"><filename>dbhier.mod</filename></entry>
<entry colname="COLSPEC1" colsep="0" rowsep="0">The document hierarchy module</entry>
</row>
<row>
<entry colname="COLSPEC0" colsep="0" rowsep="0"><filename>dbnotn.mod</filename></entry>
<entry colname="COLSPEC1" colsep="0" rowsep="0">The notations module</entry>
</row>
<row>
<entry colname="COLSPEC0" colsep="0" rowsep="0"><filename>dbpool.mod</filename></entry>
<entry colname="COLSPEC1" colsep="0" rowsep="0">The information pool module
</entry>
</row>
<row>
<entry colname="COLSPEC0" colsep="0" rowsep="0"><filename>docbook.cat</filename></entry>
<entry colname="COLSPEC1" colsep="0" rowsep="0">A sample OASIS catalog
for DocBook</entry>
</row>
<row>
<entry colname="COLSPEC0" colsep="0" rowsep="0"><filename>docbook.dcl</filename></entry>
<entry colname="COLSPEC1" colsep="0" rowsep="0">An SGML Declaration suitable
for DocBook</entry>
</row>
<row>
<entry colname="COLSPEC0" colsep="0" rowsep="0"><filename>docbook.dtd</filename></entry>
<entry colname="COLSPEC1" colsep="0" rowsep="0">The DocBook DTD</entry>
</row>
<row>
<entry colname="COLSPEC0" colsep="0" rowsep="0"><filename>readme.txt</filename></entry>
<entry colname="COLSPEC1" colsep="0" rowsep="0">The DocBook V3.1 <quote>readme</quote> file</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<para>Unpack the distribution into a directory on your system. The exact location
is irrelevant. On UNIX systems it's common to put it somewhere under <filename>
/usr/local</filename> or <filename>/share</filename> (for example, <filename>/usr/local/sgml/docbook</filename> or <filename>/share/sgml/docbook</filename>).
On a PC, perhaps <filename>c:\sgml\docbook</filename>.</para>
</sect2>
<sect2>
<title>Getting the ISO Entity Sets</title>
<para>
<indexterm><primary>entity sets</primary>
  <secondary>ISO standard, obtaining</secondary></indexterm>
<indexterm><primary>entities</primary>
  <secondary>entity sets</secondary><see>entity sets</see></indexterm>
<indexterm><primary>ISO standards</primary>
  <secondary>entity sets</secondary>
    <tertiary>obtaining</tertiary></indexterm>
<indexterm><primary>OASIS</primary>
  <secondary>entity sets (ISO standard), obtaining</secondary></indexterm>

DocBook refers to a number of standard entity sets that
are not distributed with DocBook. (They aren't distributed with
DocBook because they aren't maintained by the DocBook
TC. They're maintained by ISO.) If you've installed other SGML
DTDs or tools, they may already be on your system.</para>
<para>If you are missing some of them, they are available from
Robin Cover's pages at OASIS: <ulink
url="http://www.oasis-open.org/cover/ISOEnts.zip">
http://www.oasis-open.org/cover/ISOEnts.zip</ulink>.<footnote>
<para>The names of the entity files in this distribution do not
exactly match the names of the files used in the catalog file
distributed with DocBook (<filename>docbook.cat</filename>). Make sure your
catalog file points to the right files.</para></footnote> See <ulink
url="http://www.oasis-open.org/cover/topics.html#entities">http://www.oasis-open.org/cover/topics.html#entities</ulink>
for more information.
</para>

</sect2>
<sect2 id="dbcatalog">
<title>The DocBook Catalog</title>
<para>
<indexterm><primary>public identifiers</primary>
  <secondary>DocBook DTD</secondary>
    <tertiary>V3.1</tertiary></indexterm>
<indexterm><primary>DocBook DTD</primary>
  <secondary>public identifiers</secondary></indexterm>

DocBook uses public identifiers to refer to its
constituent parts. In some sense, DocBook <emphasis>is</emphasis>
DocBook because it has the formal public
identifier <quote><literal>-//OASIS//DTD DocBook V3.1//EN</literal></quote>.
In order for tools on your system to
find your locally installed copy of DocBook, you must map these
public identifiers into system identifiers, i.e., filenames, on
your system. For a complete discussion of catalog files, 
see <xref linkend="s-pid-sid-catalogs"/>.</para>

<para>
<indexterm><primary>catalog files</primary>
  <secondary>DocBook distribution, installing</secondary></indexterm>

The DocBook distribution includes a sample catalog, <filename>docbook.cat
</filename>, which provides a mapping for all of the public identifiers referenced
by DocBook. This mapping won't work <quote>out of the box</quote> for two
reasons: first, your tools won't be able to find it, and second, the mappings
for the ISO entity sets probably don't point to the right place on your system.
</para>
<sect3>
<title>Finding the Catalog</title>
<para>If you've already got some other SGML DTDs installed, you probably already
have a catalog file. In this case, the easiest thing to do is append
the DocBook catalog entries to the end of your existing catalog and then change
them to point to the files on your system.</para>

<para>If DocBook is the first DTD that you're installing, make a
copy of <filename>docbook.cat</filename> and call it
<filename>catalog</filename>. Put this file in a higher-level
directory and edit the relative pathnames that it contains to point to
the actual locations of the files on your system. For example, if you installed DocBook
in <filename>/share/sgml/docbk30/</filename>, put the
<filename>catalog</filename> in <filename>/share/sgml/</filename>.</para>

<para>
<indexterm><primary>environment</primary>
  <secondary>variables, setting (catalog files)</secondary></indexterm>
<indexterm><primary>SGML_CATALOG_FILES environment variable, setting</primary></indexterm>

In order for applications to find your catalog file(s), you may have
to change the application preferences or set an environment variable. For <application>
SP</application> and <application>Jade</application>, set the environment
variable <envar>SGML_CATALOG_FILES</envar> to the delimited list of catalog
filenames. On my system, this looks like:</para>
<screen>SGML_CATALOG_FILES=./catalog;n:/share/sgml/catalog;n:/adept80/doctypes/catalog.jade;j:/jade/catalog
</screen>
<para>
(On a UNIX machine, use colons instead of semicolons to delimit the
filenames.)</para>
<para>If you don't wish to set the environment variable, you can explicitly
pass the name of each catalog to the <application>SP</application> application
with the <option>-c</option> option, like this:</para>
<screen>nsgmls -c ./catalog -c n:/share/sgml/catalog <replaceable>-c othercatalogs
</replaceable> ...</screen>
</sect3>
<sect3>
<title>Fixing the Catalog</title>
<para>
<indexterm><primary>catalog files</primary>
  <secondary>mapping to system</secondary></indexterm>

The basic format of each entry in the DocBook catalog is:</para>
<screen>PUBLIC "some public id" "some filename"</screen>
<para>What you have to do is change each of the <quote>some filenames</quote>
to point to the actual name of the file on your system.</para>
<note>
<para>
<indexterm><primary>filenames</primary>
  <secondary>catalog file</secondary></indexterm>

Filenames should be supplied using absolute filenames,
or paths relative to the location of
the <emphasis>catalog</emphasis> file.</para>
</note>
<para>To continue with the example above, let's say that you've got:</para>
<itemizedlist>
<listitem><para>DocBook in <filename>/share/sgml/docbk30/</filename>,</para>
</listitem>
<listitem><para>The ISO entities in <filename>/share/sgml/entities/8879/</filename>,
and</para>
</listitem>
<listitem><para>Your catalog in <filename>/share/sgml/catalog</filename></para>
</listitem>
</itemizedlist>
<para>Then you would change the catalog entry for the DTD to be:</para>
<screen>PUBLIC "-//OASIS//DTD DocBook V3.1//EN" "docbk30/docbook.dtd"
</screen>
<para>You would change the catalog entry for the general technical character entities to:
</para>
<screen>PUBLIC "ISO 8879:1986//ENTITIES General Technical//EN" "entities/8879/iso-tech.gml"
</screen>
<para>And similarly for the other public identifiers used by DocBook. In each
case, the filename specified for the public identifier should be the name
of the file on your system, specified as an absolute filename, or 
relative to the location of the <filename>catalog</filename>
in which it occurs.</para>
</sect3>

<sect3><title>Mapping System Identifiers for XML</title>
<para>
<indexterm><primary>XML</primary>
  <secondary>system identifiers</secondary>
    <tertiary>mapping</tertiary></indexterm>
<indexterm><primary>system identifiers</primary>
  <secondary>XML</secondary>
    <tertiary>mapping for</tertiary></indexterm>
Since XML documents are required to have system identifiers, but are not
required to have public identifiers, it's likely that some of the documents
you want to process will only have system identifiers.
</para>
<para>
It turns out that you can still take advantage of the catalog in this case.
The <literal>SYSTEM</literal> directive allows you to map the system
identifier used in the document to the actual location on your system.
</para>
<para>
Suppose that you work with a colleague who uses the system identifier
<quote>file:///c:/sgml/db3xml/db3xml.dtd</quote> to identify the XML version
of DocBook on her system.  On your system, you want to map that to
<quote>/share/sgml/db3xml/db3xml.dtd</quote>.  The following entry in
your catalog will do the trick:
</para>
<screen>
SYSTEM "http://docbook.org/docbook/xml/1.4/db3xml.dtd" "/share/sgml/db3xml/db3xml.dtd"
</screen>
<para>
Unfortunately, this technique only works with applications that read and
understand catalog files.
</para>
</sect3>
</sect2>
<sect2>
<title>Testing Your Installation</title>
<para>
<indexterm><primary>DocBook DTD</primary>
  <secondary>installation</secondary>
    <tertiary>testing</tertiary></indexterm>
<indexterm><primary>nsgmls parser</primary>
  <secondary>DocBook installation, testing</secondary></indexterm>
<indexterm><primary>testing</primary>
  <secondary>DocBook installation</secondary></indexterm>

The best way to test your installation is with a simple command-line
parser like <command>nsgmls</command> from <application>SP</application>.
Create a small test document, like this:</para>
<screen>&lt;!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
&lt;chapter>&lt;title>Test Chapter&lt;/title>
&lt;para>
This is a test document.
&lt;/para>
&lt;/chapter></screen>
<para>and run the following command:</para>
<screen>nsgmls -sv test.sgm</screen>
<para>
<indexterm><primary>declarations</primary>
  <secondary>passing explicitly</secondary></indexterm>
<indexterm><primary>DTDDECL</primary>
  <secondary>warnings (unsupported)</secondary></indexterm>

If the <command>nsgmls</command> command produces errors, review your
catalog and resolve the errors. You can ignore warnings about <literal>DTDDECL
</literal> being unsupported. It is unsupported, and there's no way to disable
the warning message. Note, however, that this may also affect which SGML declaration
gets used. When in doubt, pass the correct declaration explicitly and see
if that corrects any problems. (To parse <filename>test.sgm</filename> with
the declaration <filename>docbook.dcl</filename> explicitly, run <command>
nsgmls -sv docbook.dcl test.sgm</command>.)</para>
<para>For some suggestions about how to work around these problems in <application>
SP</application> and <application>Jade</application>, see the next section,
<xref linkend="s-installjade"/>.
</para>
</sect2>
</sect1>
<sect1 id="s-installjade">
<title>Installing Jade</title>
<para>
<indexterm><primary>Jade</primary>
  <secondary>installing</secondary></indexterm>

For simplicity, the instructions assume that you are working with
Jade on a Microsoft Windows machine. These instructions should be just as
useful if you are working on another platform, except for the normal cross-platform
idiosyncracies (path and filename separator characters, use of drive letters,
etc.).</para>
<para>Download and unpack the <ulink url="http://www.jclark.com/jade/">Jade
</ulink> distribution. Binary distributions are available for some platforms,
which makes installation a simple matter of unpacking the distribution. Or
you can build Jade from the source (consult the documentation that comes with
Jade for more detail about building it from source).</para>
<para>You may wish to add the directory where you installed Jade to your <envar>
PATH</envar>. If not, make sure that you use the fully qualified name of the
executable when you run the commands below.</para>
<sect2>
<title>Setting Up the Catalog</title>
<para>
<indexterm><primary>catalog files</primary>
  <secondary>Jade, setting up for</secondary></indexterm>

First, the catalog needs to be set up as described in
<xref linkend="dbcatalog"/>
in order for Jade to be able to parse your DocBook documents. In addition,
Jade comes with its own <filename>catalog</filename> file that you must add
to the <envar>SGML_CATALOG_FILES</envar> environment variable or otherwise
make available to Jade.</para>
</sect2>
<sect2>
<title>Testing Jade</title>
<para>
<indexterm><primary>testing</primary>
  <secondary>Jade</secondary></indexterm>

Download <ulink url="http://nwalsh.com/docbook/dsssl/doc/testdata/jtest.sgm">
<filename>jtest.sgm</filename></ulink> and <ulink url="http://nwalsh.com/docbook/dsssl/doc/testdata/jtest.dsl">
<filename>jtest.dsl</filename></ulink>. (Or get them off the CD-ROM in
FIXME.) These are self-contained
test documents. Test Jade by running:</para>
<screen>jade -t rtf -d jtest.dsl jtest.sgm</screen>
<para>This command should silently produce <ulink url="http://nwalsh.com/docbook/dsssl/doc/testdata/jtest.rtf">
jtest.rtf</ulink>. If you encounter warnings or errors here, Jade is not installed
correctly. One possible culprit is your catalog setup. See <xref linkend="jademultdecl"/>.</para>
<sect3>
<title>DTDDECL Warnings</title>
<para>
<indexterm><primary>DTDDECL</primary>
  <secondary>Jade, not supporting</secondary></indexterm>

One annoying shortcoming in Jade is that it does not support the <literal>
DTDDECL</literal> catalog directive and it complains loudly if it encounters
one. In Jade, it's almost always possible to work around the problems that <literal>
DTDDECL</literal> would solve, so you can generally ignore the warnings.</para>
<para>If you also use applications that do understand <literal>DTDDECL</literal>,
and find the warnings too distracting to bear, setup alternate catalogs
for <application>SP</application> applications, <filename>catalog.jade</filename>,
that are identical to your normal catalogs but do not contain any <literal>
DTDDECL</literal> entries. You can then avoid the warnings by putting <filename>catalog.jade
</filename> in your <envar>SGML_CATALOG_FILES</envar> path, instead of <filename>
catalog</filename>.</para>
</sect3>
</sect2>
</sect1>
<sect1 id="xinstmds">
<title>Installing the Modular<?lb?>DocBook Stylesheets</title>
<para>
<indexterm><primary>stylesheets</primary>
  <secondary>installing modular (DocBook)</secondary></indexterm>
<indexterm><primary>DocBook DTD</primary>
  <secondary>stylesheets</secondary>
    <tertiary>installing</tertiary></indexterm>
<indexterm><primary>DSSSL</primary>
  <secondary>stylesheets</secondary>
    <tertiary>downloading</tertiary></indexterm>
<ulink url="http://nwalsh.com/~ndw/">Norman Walsh</ulink> (one of your
intrepid authors ;-) maintains two DSSSL stylesheets for DocBook, one for
print and one for online (HTML) output. You can obtain both of these stylesheets
from <ulink url="http://nwalsh.com/docbook/dsssl/">http://nwalsh.com/docbook/dsssl/
</ulink>. (A recent version is also on
the CD-ROM.)</para>
<procedure>
<step><para>If you have not already done so, download and install the DocBook
DTD as described in <xref linkend="s-installdtd"/>.</para>
</step>
<step><para>Likewise, if Jade is not installed on your system, download
and install it as described in <xref linkend="s-installjade"/>.
</para></step>
<step><para>Download and unpack the <ulink url="http://nwalsh.com/docbook/dsssl/">
stylesheet distribution</ulink>.</para>
</step>
<step><para>
<indexterm><primary>testing</primary>
  <secondary>DSSSL stylesheets installation</secondary></indexterm>
<indexterm><primary>HTML</primary>
  <secondary>stylesheets</secondary>
    <tertiary>testing (DocBook)</tertiary></indexterm>

Test the installation by processing <filename>test.sgm</filename>
(from the previous section) with Jade:</para>
<screen>jade -t rtf -d d:\where-you-unpacked-the-stylesheets\docbook\print\docbook.dsl test.sgm
</screen>
<para>This command should silently produce <ulink url="http://nwalsh.com/docbook/dsssl/doc/testdata/test.rtf"><filename>
test.rtf</filename></ulink>. If not, and the preceding test succeeded, something
has gone wrong&mdash;<ulink url="http://nwalsh.com/~ndw/contact.html">contact
the maintainer</ulink>.</para>
<para>To test the HTML stylesheet, run:</para>
<screen>jade -t sgml -d d:\where-you-unpacked-the-stylesheets\docbook\html\docbook.dsl test.sgm
</screen>
<para>This command should silently produce <ulink url="http://nwalsh.com/docbook/dsssl/doc/testdata/c01.htm"><filename>
c01.htm</filename></ulink>. If not, and the preceding test succeeded, something
has gone wrong&mdash;<ulink url="http://nwalsh.com/~ndw/contact.html">contact
the maintainer</ulink>.<indexterm startref="docbookinstallappa" class="endofrange"/></para>
</step>
</procedure>

</sect1>
</appendix>

<!--
Local Variables:
mode:sgml
sgml-parent-document: ("book.sgm" "appendix")
End:
-->
<appendix id="app-xml">
<?dbhtml filename="appb.html"?>
<appendixinfo>
<pubdate>$Date: 2001-08-02 14:27:50 +0400 (Чт, 02 авг 2001) $</pubdate>
<releaseinfo>$Revision: 546 $</releaseinfo>
</appendixinfo>
<title>DocBook and &XML;</title>
<para>
<indexterm id="xmldocbookappb" class='startofrange'><primary>DocBook DTD</primary>
  <secondary>XML</secondary></indexterm>
<indexterm id="docbookxmlappa" class="startofrange"><primary>XML</primary>
  <secondary>DocBook and</secondary></indexterm>
<indexterm><primary>SGML</primary>
  <secondary>XML and</secondary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>SGML, processing</secondary></indexterm>

&XML;, the <ulink url="http://www.w3.org/TR/REC-xml">Extensible
Markup Language</ulink>, is a simple dialect of &SGML;. In the words of the
&XML; specification, &ldquo;the goal [of &XML;] is to enable generic &SGML; to be
served, received, and processed on the Web in the way that is now possible
with &HTML;.&rdquo;</para>
<para>&XML; raises two issues with respect to DocBook:<itemizedlist>
<listitem><para>Are DocBook &SGML; instances valid &XML; instances?</para>
</listitem>
<listitem><para>Can the DocBook &DTD; be made into a valid &XML; &DTD;?</para>
</listitem>
</itemizedlist></para>
<para>If you have an existing &SGML; system, and your primary goal is
to serve DocBook documents over the Web as &XML;, only the first of
these issues is relevant.  As the popularity of &XML; grows, we will
see more and more &XML;-aware tools that don't implement full
<acronym>ISO</acronym> 8879 &SGML;. If your goal is to author DocBook
documents with one of this new generation of tools, you will only be
able to achieve validity with an &XML; DocBook &DTD;.</para>
<para>
<indexterm><primary>OASIS</primary>
  <secondary>XML DocBook version</secondary></indexterm>

Although not yet officially adopted by the <acronym>OASIS</acronym> DocBook Technical 
Committee, an &XML; version of DocBook is available now and
provided on the <acronym>CD-ROM</acronym>.
</para>
<sect1>
<title>DocBook Instances as &XML;</title>
<para>
<indexterm><primary>DocBook DTD</primary>
  <secondary>instances, converting to XML</secondary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>DocBook instances, converting to</secondary></indexterm>

Most DocBook documents can be made into well-formed &XML; documents very
easily. With few exceptions, valid DocBook &SGML; instances are also well-formed
&XML; instances. The following areas may need to be addressed.</para>

<sect2><title>System Identifiers</title>
<para>
<indexterm><primary>system identifiers</primary>
  <secondary>SGML</secondary></indexterm>
<indexterm><primary>public identifiers</primary>
  <secondary>SGML</secondary></indexterm>
<indexterm><primary>parameter entities</primary>
  <secondary>SGML declarations</secondary></indexterm>
<indexterm><primary>declarations</primary>
  <secondary>document type and parameter entity (SGML)</secondary></indexterm>

It is common for &SGML; instances to use only a public identifier in document
type and parameter entity declarations:</para>
<programlisting>&lt;!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
&lt;chapter>&lt;title>Chapter Title&lt;/title>
&lt;para>
This &lt;emphasis>paragraph&lt;/paragraph> is important.
&lt;/para>
&lt;/chapter></programlisting>
<para>&XML; requires a system identifier:
<programlisting>
&lt;!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
&lt;chapter>&lt;title>Chapter Title&lt;/title>
&lt;para>
This &lt;emphasis>paragraph&lt;/paragraph> is important.
&lt;/para>
&lt;/chapter></programlisting></para>
<para>
<indexterm><primary>catalog files</primary>
  <secondary>system identifiers, resolving</secondary></indexterm>
<indexterm><primary>URN</primary>
  <secondary>XML system identifiers, future</secondary></indexterm>
<indexterm><primary>public identifiers</primary>
  <secondary>system identifiers, overriding</secondary></indexterm>

If you're used to using catalog files to resolve system identifiers,
you may be dismayed to learn that system identifiers are required. Because most
tools favor system identifiers over public identifiers, all of the portability
that was gained by the use of catalog files seems to have been lost. In the
long run, it'll be regained by the fact that &XML; system identifiers can be
<acronym>URN</acronym>s, which will have a resolution scheme like catalogs, but what about the
short run?</para>
<para>Luckily, there are a couple of options.  First, you can tell your tools to use the public identifiers even
though system identifiers are present. Simply add:</para>
<screen>OVERRIDE YES</screen>
<para>
<indexterm><primary>system identifiers</primary>
  <secondary>remapping with SYSTEM catalog directive</secondary></indexterm>

to your catalog files. Alternatively, you can remap system identifers
with the <literal>SYSTEM</literal> catalog directive.  If you are faced with 
documents that don't use public identifiers at all, this is probably your
only option.
</para>
</sect2>

<sect2><title>Minimization</title>
<para>
<indexterm><primary>markup</primary>
  <secondary>minimization</secondary>
    <tertiary>SGML/XML conversion problems</tertiary></indexterm>
<indexterm><primary>minimization</primary>
  <secondary>markup</secondary>
    <tertiary>SGML/XML conversion problems</tertiary></indexterm>

If you have used &SGML; minimization features in your instances:</para>

<programlisting>&lt;!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
&lt;chapter id=<co id="xml-attrquote"/>chap1>&lt;title>Chapter Title&lt;/title>
&lt;para>
This &lt;emphasis>paragraph<co id="xml-endtag"/>&lt;/&gt; is important.
&lt;/para>
&lt;/chapter></programlisting>

<para>they will not be well-formed &XML; instances. In particular, &XML;<calloutlist>
<callout arearefs="xml-attrquote"><para>

<indexterm><primary>quotes</primary>
  <secondary>attribute values</secondary></indexterm>
<indexterm><primary>attributes</primary>
  <secondary>values</secondary>
    <tertiary>quoting</tertiary></indexterm>

Requires that all attribute values
be quoted.</para>
</callout>
<callout arearefs="xml-endtag"><para>Does not allow short tag minization.
</para>
</callout></calloutlist>
&XML; also forbids tag omission, and there are
probably a half dozen or so more exotic
examples of minimization that you have used. They're all illegal. The
easiest way to remove these minimizations is probably with a tool like <command>
sgmlnorm</command> (included in the <acronym>SP</acronym> and Jade distributions, on
the <link linkend="app-cdrom"><acronym>CD-ROM</acronym></link>).</para>
<para>The result will be something like this:</para>
<programlisting>&lt;?xml version='1.0'?>
&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
&lt;chapter id="chap1">&lt;title>Chapter Title&lt;/title>
&lt;para>
This &lt;emphasis>paragraph&lt;/emphasis> is important.
&lt;/para>
&lt;/chapter></programlisting>
</sect2>

<sect2><title>Attribute Default Values</title>
<para>
<indexterm><primary>attributes</primary>
  <secondary>default values</secondary></indexterm>

Correct processing of this document may require access to the default
attributes:</para>
<programlisting>&lt;!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
&lt;chapter>&lt;title>Chapter Title&lt;/title>
&lt;para>
Write to us at:
&lt;address<co id="xml-defattr"/>>
90 Sherman Street
Cambridge, MA 02140
&lt;/address>
&lt;/para>
&lt;/chapter></programlisting>
<calloutlist>
<callout arearefs="xml-defattr"><para><sgmltag>Address</sgmltag> expresses
that its content is line-specific with an attribute.</para>
</callout></calloutlist>
<para>Some &XML; processing environments are going to ignore the doctype declaration
in your document, even if it's present. This is relevant when your instance
uses elements that have attributes with default values. The default values
are expressed in the &DTD;, but may not be expressed in your instance. In the
case of DocBook, there are relatively few of these, and your stylesheet can
probably be constructed to do the right thing in either case. (It essentially
treats the attributes as if they had implied values.)</para>
<para>The result will be something like this:</para>
<programlisting>&lt;?xml version='1.0'?>
&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
&lt;chapter>&lt;title>Chapter Title&lt;/title>
&lt;para>
Write to us at:
&lt;address format="linespecific">
90 Sherman Street
Cambridge, MA 02140
&lt;/address>
&lt;/para>
&lt;/chapter></programlisting>
</sect2>

<sect2><title>Character and <literal>SDATA</literal> Entities</title>
<programlisting>&lt;!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
&lt;chapter>&lt;title>Chapter Title&lt;/title>
&lt;para>
This book was published by O'Reilly<co id="xml-sdata"/>&amp;trade;.
&lt;/para>
&lt;/chapter></programlisting>
<calloutlist>
<callout arearefs="xml-sdata"><para>
<indexterm><primary>characters</primary>
  <secondary>entities</secondary></indexterm>
<indexterm><primary>SDATA entities</primary></indexterm>
<indexterm><primary>entities</primary>
  <secondary>characters</secondary></indexterm>
<indexterm><primary>entities</primary>
  <secondary>SDATA</secondary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>SDATA entities, not allowing</secondary></indexterm>
<indexterm><primary>ISO standards</primary>
  <secondary>entity sets</secondary>
    <tertiary>SDATA entities, problems with (XML)</tertiary></indexterm>
<indexterm><primary>Unicode character set</primary>
  <secondary>ISO standard entity sets and</secondary></indexterm>

The DocBook &DTD; defines all of the standard <acronym>ISO</acronym>
entities automatically, but the <acronym>ISO</acronym> definitions use
<literal>SDATA</literal>, which is not allowed in &XML;. Eventually,
<acronym>ISO</acronym> (or someone else) will release official
<acronym>ISO</acronym> standard entity sets that make reference to the
appropriate Unicode character for each entity. Until then, the &XML;
version of DocBook is
distributed with an unofficial set.</para>
<para>
<indexterm><primary>internal subset</primary>
  <secondary>entity declarations</secondary></indexterm>
<indexterm><primary>external subset</primary>
  <secondary>entity declarations (SGML/XML conversion)</secondary></indexterm>

If you use entities in your document, it may be wise to put declarations
for them in the internal subset of each instance, because some
&XML; browsers are going to parse the internal subset but not the external subset.
If the entity declarations are in your &DTD;, and the browser does not parse
the external subset, the browser won't know how to display the entities in
your document.</para>
</callout></calloutlist>
<para>The result will be something like this:</para>
<programlisting>&lt;?xml version='1.0'?>
&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
&lt;!ENTITY trade "&amp;#x2122;">
&lt;chapter>&lt;title>Chapter Title&lt;/title>
&lt;para>
This book was published by O'Reilly&amp;trade;.
&lt;/para>
&lt;/chapter></programlisting>
</sect2>

<sect2><title>Case-Sensitivity</title>
<programlisting><co id="xml-nmcasekey"/>&lt;!DocType Book PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
<co id="xml-namecase1"/>&lt;book>&lt;title>Book Title&lt;/title>
&lt;chapter>&lt;title>Chapter Title<co id="xml-namecase2"/>&lt;/Title>
&lt;para>
Paragraph test.
&lt;/para>
<co id="xml-wf1"/>&lt;PARA>
A second paragraph.
&lt;/PARA>
&lt;/chapter>
&lt;/book></programlisting>
<para>
<indexterm><primary>case sensitivity</primary>
  <secondary>DocBook SGML declaration</secondary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>case sensitivity (DocBook)</secondary></indexterm>
<indexterm><primary>attributes</primary>
  <secondary>case sensitivity (DocBook)</secondary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>case sensitivity</secondary></indexterm>

With the standard DocBook &SGML; declaration, DocBook instances are not
case-sensitive with respect to element and attribute names. &XML; is always
case-sensitive. As long as you have used the same case consistently, your
&XML; instances will be well-formed, but it may still be advantageous to do some
case-folding because it will simplify the construction of stylesheets.</para>
<calloutlist>
<callout arearefs="xml-nmcasekey"><para>Keywords in &XML; are case-sensitive,
and must be in uppercase.
<indexterm><primary>keywords</primary>
  <secondary>case sensitivity, XML</secondary></indexterm>
</para>
</callout>
<callout arearefs="xml-namecase1"><para>The name declared in the document
type declaration, like all other names, is case-sensitive.
<indexterm><primary>names</primary>
  <secondary>case sensitivity</secondary></indexterm>

</para>
</callout>
<callout arearefs="xml-namecase2"><para>Start and end tags must use the same
case.
<indexterm><primary>start tags</primary>
  <secondary>case sensitivity</secondary></indexterm>
<indexterm><primary>end tags</primary>
  <secondary>case sensitivity</secondary></indexterm>
</para>
</callout>
<callout arearefs="xml-wf1"><para>In &XML;, <sgmltag>Para</sgmltag> is not the
same as <sgmltag>PARA</sgmltag>. Note that this is a validity error (against
the &XML; version of DocBook), but it is not an &XML; well-formedness error. The use of <sgmltag>
para</sgmltag> and <sgmltag>PARA</sgmltag> as distinct names is as legitimate
as using <sgmltag>foo</sgmltag> and <sgmltag>bar</sgmltag>, as long as they
are properly nested.
<indexterm><primary>Para element</primary>
  <secondary>PARA vs. (XML)</secondary></indexterm>
</para>
</callout></calloutlist>
<para>The result will be something like this:</para>
<programlisting>&lt;?xml version='1.0'?>
&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
&lt;book>&lt;title>Book Title&lt;/title>
&lt;chapter>&lt;title>Chapter Title&lt;/title>
&lt;para>
Paragraph test.
&lt;/para>
&lt;para>
A second paragraph.
&lt;/para>
&lt;/chapter>
&lt;/book></programlisting>
</sect2>

<sect2><title>No #CONREF Attributes</title>
<programlisting>&lt;!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
&lt;chapter>&lt;title>Chapter Title&lt;/title>
&lt;indexterm id="idx-bor">&lt;primary>Something&lt;/primary>&lt;/indexterm><co
id="xml-conrefstart"/>
&lt;para>
Paragraph test.
&lt;/para>
&lt;indexterm startref="idx-bor"><co id="xml-conref"/>
&lt;/chapter></programlisting>
<para>
<indexterm><primary>#CONREF attributes</primary></indexterm>
<indexterm><primary>Startref attribute</primary></indexterm>
<indexterm><primary>IndexTerm element</primary></indexterm>
<indexterm><primary>OtherTerm attribute</primary></indexterm>
<indexterm><primary>GlossSee element</primary></indexterm>
<indexterm><primary>GlossSeeAlso element</primary></indexterm>
<indexterm><primary>empty tags</primary>
  <secondary>#CONREF attributes</secondary></indexterm>

The <sgmltag class="attribute">StartRef</sgmltag> attribute on <sgmltag>
indexterm</sgmltag> and the <sgmltag class="attribute">OtherTerm</sgmltag>
attribute on <sgmltag>GlossSee</sgmltag> and <sgmltag>GlossSeeAlso</sgmltag>
are <literal>#CONREF</literal> attributes.</para>
<para>In &SGML; terms, this means that when these attributes are used, the content
of the tag is taken to be the same as the content of the tag pointed to by
the attribute. <calloutlist>
<callout arearefs="xml-conrefstart xml-conref"><para>If you
have used these attributes, your instance will contain both empty and non-empty
versions of these tags.</para>
</callout></calloutlist></para>
<para>Your best bet is to transform the <literal>#CONREF</literal>
version into an empty tag and let your stylesheet deal with it appropriately.
</para>
<para>The result will be something like this:</para>
<programlisting>&lt;?xml version='1.0'?>
&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
&lt;chapter>&lt;title>Chapter Title&lt;/title>
&lt;indexterm id="idx-bor">&lt;primary>Something&lt;/primary>&lt;/indexterm>
&lt;para>
Paragraph test.
&lt;/para>
&lt;indexterm startref="idx-bor"/>
&lt;/chapter></programlisting>
</sect2>

<sect2><title>Only Explicit CDATA-Marked Sections Are Allowed</title>
<programlisting>&lt;!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook V3.1//EN" [
&lt;!ENTITY % draft "IGNORE">
&lt;!ENTITY % sourcecode "CDATA">
]>
&lt;chapter>&lt;title>Chapter Title&lt;/title>
<co id="xml-ignore"/>&lt;![ %draft; [
&lt;para>
Draft paragraph.
&lt;/para>
]]&#62;
&lt;para>
The following code is totally out of context:
&lt;programlisting>
&lt;![ <co id="xml-cdata"/>%sourcecode; [
if (x &lt; 3) {
  y = 3;
}
]]&#62;
&lt;/programlisting>
&lt;/chapter></programlisting>
<calloutlist>
<callout arearefs="xml-ignore xml-cdata"><para>
<indexterm><primary>parameter entities</primary>
  <secondary>XML document body</secondary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>parameter entities</secondary></indexterm>
<indexterm><primary>internal subset</primary>
  <secondary>parameter entities (XML)</secondary></indexterm>

Parameter entities are not
allowed in the body of &XML; documents (they are allowed in the internal subset).
</para>
</callout>
<callout arearefs="xml-ignore"><para>&XML; instances cannot contain <literal>
IGNORE</literal>, <literal>INCLUDE</literal>, <literal>TEMP</literal>, or <literal>
RCDATA</literal> marked sections.
<indexterm><primary>marked sections</primary>
  <secondary>XML, restrictions</secondary></indexterm>
<indexterm><primary>IGNORE keyword (marked section)</primary></indexterm>
<indexterm><primary>INCLUDE keyword (marked section)</primary>
  <secondary>XML, not allowing</secondary></indexterm>
<indexterm><primary>TEMP marked section (XML)</primary></indexterm>
<indexterm><primary>RCDATA</primary></indexterm>
</para>
</callout>
<callout arearefs="xml-cdata"><para><literal>CDATA</literal> marked sections
must use the &ldquo;<literal>CDATA</literal>&rdquo; keyword literally because
parameter entities are not allowed.
<indexterm><primary>CDATA</primary>
  <secondary>marked sections</secondary></indexterm>
</para>
</callout></calloutlist>
<para>The result will be something like this:</para>
<programlisting>&lt;?xml version='1.0'?>
&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
&lt;chapter>&lt;title>Chapter Title&lt;/title>
&lt;para>
The following code is totally out of context:
&lt;programlisting>
&lt;![CDATA[
if (x &lt; 3) {
  y = 3;
}
]]&#62;
&lt;/programlisting>
&lt;/chapter></programlisting>
</sect2>

<sect2><title>No SUBDOC or CDATA External Entities</title>
<programlisting>&lt;!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook V3.1//EN" [
&lt;!ENTITY % sourcecode SYSTEM "program.c" CDATA>
]>
&lt;chapter>&lt;title>Chapter Title&lt;/title>
&lt;para>
The following code is totally out of context:
&lt;programlisting>
&amp;sourcecode;
&lt;/programlisting>
&lt;/chapter></programlisting>
<para>
<indexterm><primary>external general entities</primary>
  <secondary>XML restrictions</secondary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>external entities, restrictions</secondary></indexterm>
<indexterm><primary>CDATA</primary>
  <secondary>XML instances, restrictions</secondary></indexterm>
&XML; instances cannot use <literal>CDATA</literal> or <literal>SUBDOC
</literal> external entities. One option for integrating external <literal>
CDATA</literal> content into a document is to employ a pre-processing pass
that inserts the content inline, wrapped in a <literal>CDATA</literal> marked
section.</para>
<para>
<indexterm><primary>SUBDOC entities</primary></indexterm>
<indexterm><primary>namespaces</primary></indexterm>

<literal>SUBDOC</literal> entities may be more problematic. If you do
not require validation, it may be sufficient to simply put them inline. &XML;
namespaces may offer another possible solution.</para>
<para>The result will be something like this:</para>
<programlisting>&lt;?xml version='1.0'?>
&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
&lt;chapter>&lt;title>Chapter Title&lt;/title>
&lt;para>
The following code is totally out of context:
&lt;programlisting>
&lt;![CDATA[
int main () {
..
}
]]&#62;
&lt;/programlisting>
&lt;/chapter></programlisting>
</sect2>

<sect2><title>No Data Attributes on Notations</title>
<para>They're not allowed in &XML;, so don't add any.
<indexterm><primary>data attributes, notations (XML prohibiting)</primary></indexterm>

</para>
</sect2>

<sect2><title>No Attribute Value Specifications on<?lb?>Entity Declarations</title>
<para>
<indexterm><primary>attributes</primary>
  <secondary>values</secondary>
    <tertiary>specifying (entity declarations)</tertiary></indexterm>
<indexterm><primary>declarations</primary>
  <secondary>entities</secondary>
    <tertiary>attribute values, prohibiting (XML)</tertiary></indexterm>
<indexterm><primary>entities</primary>
  <secondary>declarations, attribute values (XML)</secondary></indexterm>

They're not allowed in &XML;, so don't add any.</para>
</sect2>
</sect1>
<sect1 id="s-docbookxml">
<title>The DocBook &DTD; as &XML;</title>
<indexterm><primary>DocBook DTD</primary>
  <secondary>XML</secondary>
    <tertiary>converting to</tertiary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>DocBook DTD, converting to</secondary></indexterm>

<para>Converting the DocBook &DTD; to &XML; is much more challenging
than converting the instances. It is probably not possible to
construct an &XML; &DTD; that is identical to the validation power
of DocBook. The list below identifies most of the issues that
must be addressed, and describes how the DocBook &XML; &DTD;; deals with
them:</para>

<variablelist>
<varlistentry><term>Comments are not allowed inside markup declarations</term>
<listitem>
<para>
<indexterm><primary>comments</primary>
  <secondary>markup declarations (DocBook XML)</secondary></indexterm>
<indexterm><primary>declarations</primary>
  <secondary>comment declarations</secondary></indexterm>

Most of them have been moved to comment declarations preceding the markup
declaration that used to contain them. A few small, inline comments that seemed
like they would be out of context if moved before the declaration were simply
deleted.</para>
</listitem>
</varlistentry>
<varlistentry><term>Name groups are not allowed in element or attribute list
declarations</term>
<listitem>
<para>
<indexterm><primary>name groups (DocBook XML)</primary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>declarations</secondary>
    <tertiary>name groups, prohibiting</tertiary></indexterm>
<indexterm><primary>attributes</primary>
  <secondary>declarations</secondary>
    <tertiary>name groups, prohibiting</tertiary></indexterm>

The small number of places in which DocBook uses name groups have
been expanded.</para>
<para>There's one downside: DocBook uses <literal>%admon.class;</literal> in a name
group to define the content model, and attribute lists for elements in the
admonitions class. In DocBook XML, this convenience cannot be expressed. If additional
admonitions are added, the element and attribute list declarations will have
to be copied for them.</para>
</listitem>
</varlistentry>
<varlistentry><term>No <literal>CDATA</literal> or <literal>RCDATA</literal>
declared content</term>
<listitem>
<para>
<indexterm><primary>CDATA</primary>
  <secondary>declared content, prohibiting</secondary></indexterm>
<indexterm><primary>RCDATA</primary></indexterm>

<sgmltag>Graphic</sgmltag> and <sgmltag>InlineGraphic</sgmltag> have
been made <literal>EMPTY</literal>. The content model for <sgmltag>SynopFragmentRef
</sgmltag>, the only <literal>RCDATA</literal> element in DocBook, has been
changed to <literal>(arg | group)+</literal>.</para>
</listitem>
</varlistentry>
<varlistentry><term>No exclusions or inclusions on element declarations</term>
<listitem>
<para>
<indexterm><primary>inclusions</primary>
  <secondary>element declarations, prohibiting (DocBook XML)</secondary></indexterm>
<indexterm><primary>exclusions</primary>
  <secondary>element declarations, prohibiting (DocBook XML)</secondary></indexterm>

They had to be removed.</para>
<para>
<indexterm><primary>exclusions</primary>
  <secondary>DocBook, uses</secondary></indexterm>

In DocBook, exclusions are used to exclude the following:<itemizedlist>
<listitem><para>Ubiquitous elements (<sgmltag>indexterm</sgmltag>
and <sgmltag>BeginPage</sgmltag>) from a number of contexts in which they
should not occur (such as metadata, for example).</para>
</listitem>
<listitem><para>
<indexterm><primary>formal objects, exclusions (DocBook)</primary></indexterm>

Formal objects from <sgmltag>Highlights</sgmltag>, <sgmltag>
Example</sgmltag>s, <sgmltag>Figure</sgmltag>s and <sgmltag>LegalNotice</sgmltag>s.
</para>
</listitem>
<listitem><para>
<indexterm><primary>tables</primary>
  <secondary>exclusions (DocBook)</secondary></indexterm>
<indexterm><primary>InformalTable element</primary>
  <secondary>excluding from tables</secondary></indexterm>

Formal objects and <sgmltag>InformalTable</sgmltag>s
from tables.</para>
</listitem>
<listitem><para>
<indexterm><primary>footnotes, exclusions (DocBook)</primary></indexterm>
<indexterm><primary>block elements</primary>
  <secondary>excluding from footnotes</secondary></indexterm>

Block elements and <sgmltag>Footnote</sgmltag>s
from <sgmltag>Footnote</sgmltag>s</para>
</listitem>
<listitem><para>Admonitions, <sgmltag>EntryTbl</sgmltag>s, and <sgmltag>
Acronym</sgmltag>s from themselves.
<indexterm><primary>admonitions</primary>
  <secondary>exclusions (DocBook)</secondary></indexterm>
<indexterm><primary>acronyms (DocBook XML)</primary></indexterm>
</para>
</listitem>
</itemizedlist></para>
<para>Removing these exclusions from DocBook &XML; means that it is now valid, in
the &XML; sense, to do some things that don't make a lot of sense (like put
a <sgmltag>Footnote</sgmltag> in a <sgmltag>Footnote</sgmltag>). Be careful.
</para>
<para>
<indexterm><primary>inclusions</primary>
  <secondary>DocBook, uses</secondary></indexterm>
<indexterm><primary>IndexTerm element</primary>
  <secondary>inclusions, DocBook</secondary></indexterm>
<indexterm><primary>BeginPage element (DocBook inclusions)</primary></indexterm>
<indexterm><primary>parameter entities</primary>
  <secondary>DbXML, ubiquitous element inclusions</secondary></indexterm>
<indexterm><primary>#PCDATA keyword</primary>
  <secondary>DbXML, ubiquitous elements</secondary></indexterm>

Inclusions in DocBook are used to add the ubiquitious elements (<sgmltag>
indexterm</sgmltag> and <sgmltag>BeginPage</sgmltag>) unconditionally to a
large number of contexts. In order to make these elements available in
DocBook &XML;,
they have been added to most of the parameter entities that include <literal>
#PCDATA</literal>. If new locations are discovered where these terms are desired, DocBook &XML;
will be updated.</para>
</listitem>
</varlistentry>
<varlistentry><term>Elements with mixed content must have <literal>#PCDATA
</literal> first.</term>
<listitem>
<para>
<indexterm><primary>elements</primary>
  <secondary>mixed content (DocBook XML)</secondary></indexterm>
<indexterm><primary>content models</primary>
  <secondary>elements, updating (DocBook XML)</secondary></indexterm>

The content models of many elements have been updated to make them a
repeatable OR group beginning with <literal>#PCDATA</literal>.</para>
</listitem>
</varlistentry>
<varlistentry><term>Many declared attribute types (<literal>NAME</literal>, <literal>
NUMBER</literal>, <literal>NUTOKEN</literal>, and so on) are not allowed</term>
<listitem>
<para>
<indexterm><primary>attributes</primary>
  <secondary>declared types, prohibiting (DocBook XML)</secondary></indexterm>
<indexterm><primary>NMTOKEN(S) attribute</primary>
  <secondary>DbXML</secondary></indexterm>
<indexterm><primary>CDATA</primary>
  <secondary>DbXML</secondary></indexterm>

They have all been replaced by <literal>NMTOKEN</literal> or <literal>
CDATA</literal>.</para>
</listitem>
</varlistentry>
<varlistentry><term>No <literal>#CONREF</literal> attributes allowed.</term>
<listitem>
<para>
<indexterm><primary>#CONREF attributes</primary>
  <secondary>DbXML, prohibiting</secondary></indexterm>
<indexterm><primary>#IMPLIED attribute (DocBook XML)</primary></indexterm>
<indexterm><primary>GlossSee element</primary>
  <secondary>DbXML</secondary></indexterm>
<indexterm><primary>GlossSeeAlso element</primary>
  <secondary>DbXML</secondary></indexterm>
<indexterm><primary>IndexTerm element</primary>
  <secondary>empty (DocBook XML)</secondary></indexterm>

The <literal>#CONREF</literal> attributes on <sgmltag>indexterm</sgmltag>, <sgmltag>
GlossSee</sgmltag>, and <sgmltag>GlossSeeAlso</sgmltag> were changed to <literal>
#IMPLIED</literal>. The content model of <sgmltag>indexterm</sgmltag> was
modified so that it can be empty.</para>
</listitem>
</varlistentry>
<varlistentry><term>Attribute default values must be quoted.</term>
<listitem>
<para>
<indexterm><primary>quotes</primary>
  <secondary>attribute values</secondary>
    <tertiary>DbXML</tertiary></indexterm>
<indexterm><primary>attributes</primary>
  <secondary>values</secondary>
    <tertiary>quoting</tertiary></indexterm>

Quotes were added wherever necessary.
<indexterm startref="docbookxmlappa" class="endofrange"/>
<indexterm startref="xmldocbookappb" class="endofrange"/>
</para>
</listitem>
</varlistentry>
</variablelist>

</sect1>
</appendix>

<!--
Local Variables:
mode:sgml
sgml-parent-document: ("book.sgm" "appendix")
End:
-->
<appendix id="app-versions">
<?dbhtml filename="appc.html"?>
<appendixinfo>
<pubdate>$Date: 2009-01-05 12:25:13 +0300 (Пн, 05 янв 2009) $</pubdate>
<releaseinfo>$Revision: 8201 $</releaseinfo>
</appendixinfo>
<title>DocBook Versions</title>
<para>
<indexterm><primary>DocBook DTD</primary>
  <secondary>versions</secondary></indexterm>
<indexterm><primary>versions</primary>
  <secondary>DocBook DTD</secondary></indexterm>
<indexterm><primary>OASIS</primary>
  <secondary>DocBook Technical Committee</secondary></indexterm>
<indexterm><primary>DocBook Technical Committee (OASIS)</primary></indexterm>
<indexterm><primary>TC</primary><see>DocBook Technical Committee (OASIS)</see></indexterm>

The <acronym>OASIS</acronym> DocBook Technical Committee (<acronym>TC</acronym>) is committed to the continued
evolution of DocBook.  As new needs are expressed by the DocBook-user
community, the committee will adapt DocBook so it
continues to meet the needs of its users.
</para>

<para>
<indexterm><primary>compatibility, DocBook versions</primary></indexterm>
The <acronym>TC</acronym> observes a very cautious policy regarding changes to the &DTD;.
Backward-incompatible changes can only be introduced:
<itemizedlist>
<listitem>
<para>
<indexterm><primary>major releases, DocBook DTD</primary></indexterm>

In major releases (4.0, 5.0, 6.0, and so on)
</para>
</listitem>
<listitem>
<para>
<indexterm><primary>comments</primary>
  <secondary>DocBook DTD, changes to</secondary></indexterm>

Only if the change was described in comments in the &DTD; in the
previous major release
</para>
</listitem>
</itemizedlist>
<indexterm><primary>point-releases (DocBook DTD), compatibility</primary></indexterm>

Changes made at point-releases are always backward-compatible to the
previous major release. This policy assures that DocBook users always
have time to prepare for any coming changes.
</para>

<para>This appendix describes the changes planned for
DocBook.</para>

<sect1 id="v31"><title>DocBook V3.1</title>
<para>DocBook <acronym>V3.1</acronym>, released in February 1999,
introduced a number of new elements:
<indexterm><primary>elements</primary>
  <secondary>new (DocBook V3.1)</secondary></indexterm>
<indexterm><primary>MediaObject elements</primary></indexterm>
<indexterm><primary>VideoObject element</primary></indexterm>
<indexterm><primary>AudioObject element</primary></indexterm>
<indexterm><primary>ImageObject element</primary></indexterm>
<indexterm><primary>TextObject element</primary></indexterm>

</para>
<variablelist>
<varlistentry><term><sgmltag>MediaObject</sgmltag></term>
<listitem><para>
<sgmltag>MediaObject</sgmltag> is a wrapper around
<sgmltag>VideoObject</sgmltag>, <sgmltag>AudioObject</sgmltag>,
<sgmltag>ImageObject</sgmltag>, and <sgmltag>TextObject</sgmltag>.  The
purpose of <sgmltag>MediaObject</sgmltag> is twofold: first, it introduces
new element types to include video and audio content; second, it
provides the option of alternative representations, including text, for
objects in a document.  <sgmltag>MediaObject</sgmltag>s also allow
<sgmltag>Caption</sgmltag>s that may be longer than a simple title.
</para>
<para>
<indexterm><primary>InlineMediaObject element</primary></indexterm>
<indexterm><primary>MediaObjectCO element</primary></indexterm>
<indexterm><primary>Callout (MediaObject)</primary></indexterm>

Parallel to <sgmltag>MediaObject</sgmltag> are <sgmltag>InlineMediaObject</sgmltag>,
an inline version, and <sgmltag>MediaObjectCO</sgmltag>, a media object
with <sgmltag>Callout</sgmltag>s.
</para>
<para>
<indexterm><primary>Graphic element</primary>
  <secondary>removal (v5.0)</secondary></indexterm>
<indexterm><primary>InlineGraphic element</primary>
  <secondary>removal (v5.0)</secondary></indexterm>
For now, media objects and graphics exist together
in version 5.0. <sgmltag>Graphic</sgmltag> and <sgmltag>InlineGraphic</sgmltag> will
be removed from DocBook.
</para>
</listitem>
</varlistentry>

<varlistentry><term><sgmltag>InformalFigure</sgmltag></term>
<listitem><para>
<indexterm><primary>InformalFigure element</primary></indexterm>

A figure wrapper without a title. This element was added
largely for symmetry.
</para></listitem>
</varlistentry>

<varlistentry><term><sgmltag>Colophon</sgmltag></term>
<listitem><para>
<indexterm><primary>colophon element</primary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>Colophon</secondary></indexterm>

An end-of-the-book <sgmltag>Colophon</sgmltag>.
</para></listitem>
</varlistentry>

<varlistentry><term><sgmltag>Section</sgmltag></term>
<listitem>
<para>
<indexterm><primary>Section element</primary></indexterm>
<sgmltag>Section</sgmltag> is a recursive section.  It exists
parallel to, and must be used as an alternative to,
<sgmltag>Sect1</sgmltag>.
</para>
</listitem>
</varlistentry>

<varlistentry><term><sgmltag>QandASet</sgmltag></term>
<listitem><para>
<indexterm><primary>QandASet element</primary></indexterm>

A set of questions and answers.
</para></listitem>
</varlistentry>

<varlistentry><term><sgmltag>Constant</sgmltag></term>
<listitem><para>
<indexterm><primary>Constant element</primary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>Constant</secondary></indexterm>
<indexterm><primary>Class attribute</primary>
  <secondary>constant element</secondary></indexterm>

The <sgmltag>Constant</sgmltag> inline is for identifying
constants.  It has a <sgmltag class='attribute'>Class</sgmltag> attribute for
identifying &ldquo;limits&rdquo; as a specific kind of constant.
</para></listitem>
</varlistentry>

<varlistentry><term><sgmltag>VarName</sgmltag></term>
<listitem><para>
<indexterm><primary>VarName element</primary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>VarName</secondary></indexterm>
<indexterm><primary>names</primary>
  <secondary>variable (VarName element)</secondary></indexterm>

Many authors have requested a tag for identifying
variable names.  Most often <sgmltag>Literal</sgmltag> (with or without a role)
has been chosen as a compromise, but you can't question the utility of identifying variable
names, so <sgmltag>VarName</sgmltag> was added.
</para>
<para>A tag for identifying variable values does not seem as necessary.
For immutable values, a specific tag other than <sgmltag>Literal</sgmltag>
seems unnecessary, and <sgmltag>Replaceable</sgmltag> exists for values that
are supposed to be filled in by the user.
</para></listitem>
</varlistentry>
</variablelist>
</sect1>

<sect1 id="v41"><title>DocBook V4.1 and DocBook &XML; V4.1.2</title>
<para>
<indexterm><primary>DocBook DTD</primary>
  <secondary>versions</secondary>
    <tertiary>V4.1</tertiary></indexterm>
<indexterm><primary>versions</primary>
  <secondary>DocBook DTD</secondary>
    <tertiary>V4.1</tertiary></indexterm>
<indexterm><primary>DocBook XML DTD</primary>
  <secondary>versions</secondary>
    <tertiary>V4.1.2</tertiary></indexterm>
<indexterm><primary>versions</primary>
  <secondary>DocBook XML DTD</secondary>
    <tertiary>V4.1.2</tertiary></indexterm>
DocBook <acronym>V4.1</acronym> and DocBook &XML; <acronym>V4.1.2</acronym>
became an OASIS Standard in
February 2001.</para>

<para>DocBook <acronym>V4</acronym> introduced
a number of backward-incompatible
changes.</para>
<para>The policy of the DocBook <acronym>TC</acronym> is that backward-incompatible changes
can only be introduced in a full version release.  They must also be described
in comments in the &DTD; at least one full version earlier.  In other words,
all the planned version 4.0 incompatibilities were announced with version 3.0.
</para>
<para>
Backward-incompatible changes to DocBook that are planned for version 4.0:
</para>
<itemizedlist>
<listitem>
<para>
<indexterm><primary>DocInfo element</primary>
  <secondary>changes V4.0</secondary></indexterm>
<indexterm><primary>ChapterInfo element (V4.0)</primary></indexterm>
<indexterm><primary>AppendixInfo element (V4.0)</primary></indexterm>
<indexterm><primary>ArtHeader element</primary>
  <secondary>V4.0</secondary></indexterm>
<indexterm><primary>ArticleInfo element (V4.0)</primary></indexterm>
<indexterm><primary>SeriesInfo element, changes V4.0</primary></indexterm>
<indexterm><primary>BiblioSet element</primary></indexterm>
<indexterm><primary>BookBiblio element, changes V4.0</primary></indexterm>
<indexterm><primary>BookInfo element</primary>
  <secondary>changes, v4.0</secondary></indexterm>

The <sgmltag>DocInfo</sgmltag> element will be split out into <sgmltag>ChapterInfo</sgmltag>, <sgmltag>AppendixInfo</sgmltag>,
  and so on. <sgmltag>ArtHeader</sgmltag> will be renamed to <sgmltag>ArticleInfo</sgmltag>.  <sgmltag>SeriesInfo</sgmltag> may be
  discarded because it has become a special case of <sgmltag>BiblioSet</sgmltag>.
  <sgmltag>BookBiblio</sgmltag> will be discarded in favor of a new, more inclusive,
  structure for <sgmltag>BookInfo</sgmltag> (and for <sgmltag>ArticleInfo</sgmltag>, whose earlier <sgmltag>ArtHeader</sgmltag>
  form contained <sgmltag>BookBiblio</sgmltag>).
</para></listitem>

<listitem><para>
<indexterm><primary>article.class entity, removing (V4.0)</primary></indexterm>
<indexterm><primary>Book element</primary>
  <secondary>article.class entity, removing (V4.0)</secondary></indexterm>

The <sgmltag class='paramentity'>article.class</sgmltag> entity may be removed from the <sgmltag>Book</sgmltag> content model,
  and made part of a new top-level document hierarchy.
</para></listitem>

<listitem><para>
<indexterm><primary>nav.class entity, changes V4.0</primary></indexterm>
<indexterm><primary>ToC</primary>
  <secondary>changes, V4.0</secondary></indexterm>

The <sgmltag class='paramentity'>nav.class</sgmltag> entity, which appears in several divisions, will allow
  <sgmltag>ToCchap</sgmltag> instead of <sgmltag>ToC</sgmltag>.
</para></listitem>

<listitem><para>
<indexterm><primary>MsgText element</primary>
  <secondary>changes, V4.0</secondary></indexterm>
<indexterm><primary>tech.char.class parameter entity</primary>
  <secondary>redefining</secondary></indexterm>
<sgmltag>MsgText</sgmltag> will be moved from <sgmltag class='paramentity'>tech.char.class</sgmltag> to a more appropriate
  parameter entity.
</para></listitem>

<listitem><para>
<indexterm><primary>smallcptr.char.mix parameter entity, changes V4.0</primary></indexterm>
<indexterm><primary>Action element</primary>
  <secondary>changes, V4.0</secondary></indexterm>
<indexterm><primary>Command element</primary>
  <secondary>changes, V4.0</secondary></indexterm>
<indexterm><primary>Database element</primary>
  <secondary>changes, V4.0</secondary></indexterm>
<indexterm><primary>Filename element</primary>
  <secondary>changes, V4.0</secondary></indexterm>
<indexterm><primary>Hardware element</primary>
  <secondary>changes, V4.0</secondary></indexterm>
<indexterm><primary>Interface element</primary>
  <secondary>changes, V4.0</secondary></indexterm>
<indexterm><primary>KeyCap element</primary>
  <secondary>changes, V4.0</secondary></indexterm>
<indexterm><primary>Literal element</primary>
  <secondary>changes, V4.0</secondary></indexterm>
<indexterm><primary>Option element</primary>
  <secondary>changes, V4.0</secondary></indexterm>
<indexterm><primary>Parameter element</primary>
  <secondary>changes, V4.0</secondary></indexterm>
<indexterm><primary>Property element</primary>
  <secondary>changes, V4.0</secondary></indexterm>
<indexterm><primary>SystemItem element</primary>
  <secondary>changes, V4.0</secondary></indexterm>

The following elements will have their content constrained to the
  <sgmltag class='paramentity'>smallcptr.char.mix</sgmltag> mixture: <sgmltag>Action</sgmltag>, <sgmltag>Command</sgmltag>, <sgmltag>Database</sgmltag>, <sgmltag>Filename</sgmltag>,
  <sgmltag>Hardware</sgmltag>, <sgmltag>Interface</sgmltag>, <sgmltag>KeyCap</sgmltag>, <sgmltag>Literal</sgmltag>, <sgmltag>Option</sgmltag>, <sgmltag>Parameter</sgmltag>, <sgmltag>Property</sgmltag>, and
  <sgmltag>SystemItem</sgmltag>.
</para></listitem>

<listitem><para>
<indexterm><primary>AuthorBlurb element, changes V4.0</primary></indexterm>
<indexterm><primary>person.ident.mix parameter entity, changes V4.0</primary></indexterm>
<indexterm><primary>Author element</primary>
  <secondary>changes, V4.0</secondary></indexterm>
<indexterm><primary>Affiliation element, changes V4.0</primary></indexterm>

<sgmltag>AuthorBlurb</sgmltag> and <sgmltag>Affiliation</sgmltag> will be removed from <sgmltag class='paramentity'>person.ident.mix</sgmltag>
  and a new wrapper element will be created to allow association of those two
  elements with <sgmltag>Author</sgmltag> name information.
</para></listitem>

<listitem><para>
<indexterm><primary>Epigraph element</primary>
  <secondary>changes, V4.0</secondary></indexterm>
<indexterm><primary>BlockQuote element</primary>
  <secondary>changes, V4.0</secondary></indexterm>

<sgmltag>Epigraph</sgmltag> will not be appearing in <sgmltag>BlockQuote</sgmltag>.
</para></listitem>

<listitem><para>
<indexterm><primary>Comment element, changes V4.0</primary></indexterm>
<indexterm><primary>Remark element, changes V4.0</primary></indexterm>

<sgmltag>Comment</sgmltag> will be renamed to <sgmltag>Remark</sgmltag> and will be excluded from itself.
</para></listitem>

<listitem><para>
<indexterm><primary>GlossTerm element</primary>
  <secondary>changes, V4.0</secondary></indexterm>
<indexterm><primary>Glossary element</primary>
  <secondary>changes, V4.0</secondary></indexterm>

<sgmltag>GlossTerm</sgmltag> will be excluded from itself, and may be split into an
  element that appears in a <sgmltag>Glossary</sgmltag> and an element that can appear in
  the main text.
</para></listitem>

<listitem><para>
<indexterm><primary>Subject attribute, changes V4.0</primary></indexterm>
<indexterm><primary>GlossDef element, changes V4.0</primary></indexterm>
<indexterm><primary>Keyword attribute (V4.0)</primary></indexterm>

The <sgmltag class='attribute'>Subject</sgmltag> attribute on <sgmltag>GlossDef</sgmltag> will be renamed <sgmltag class='attribute'>Keyword</sgmltag>.
</para></listitem>

<listitem><para>
<indexterm><primary>SetTitle elements (V4.0)</primary></indexterm>
<indexterm><primary>SegmentedList element</primary>
  <secondary>changes, V4.0</secondary></indexterm>

Two <sgmltag>SegTitle</sgmltag> elements will be required in <sgmltag>SegmentedList</sgmltag>.
</para></listitem>

<listitem><para>
<indexterm><primary>Graphic element</primary></indexterm>
<indexterm><primary>InlineGraphic element</primary></indexterm>
<indexterm><primary>empty elements</primary>
  <secondary>Graphic and InlineGraphic, V4.0</secondary></indexterm>
<indexterm><primary>EntityRef attribute (graphics), V4.0</primary></indexterm>
<indexterm><primary>graphics</primary>
  <secondary>embedded, storing outside SGML source</secondary></indexterm>

<sgmltag>Graphic</sgmltag> and <sgmltag>InlineGraphic</sgmltag> will be declared EMPTY.  This change will
  require that end tags be removed and that any embedded graphic content
  be stored outside the &SGML; source and pointed to from an <sgmltag class='attribute'>Entityref</sgmltag> or
  <sgmltag class='attribute'>Fileref</sgmltag> attribute.
</para></listitem>

<listitem><para>
<indexterm><primary>OptMult attribute value (Choice), V4.0</primary></indexterm>
<indexterm><primary>ReqMult attribute value (Choice), V4.0</primary></indexterm>
<indexterm><primary>Choice attribute, changes V4.0</primary></indexterm>
<indexterm><primary>Group element, changes V4.0</primary></indexterm>
<indexterm><primary>Rep attribute, changes V4.0</primary></indexterm>

The <literal>OptMult</literal> and <literal>ReqMult</literal> values for the <sgmltag class='attribute'>Choice</sgmltag> attribute on <sgmltag>Group</sgmltag>
  will be removed.  Use the <sgmltag class='attribute'>Rep</sgmltag> attribute instead to indicate that the
  choice is repeatable.
</para></listitem>

<listitem><para>
<indexterm><primary>FuncSynopsis element</primary>
  <secondary>changes, V4.0</secondary></indexterm>
<indexterm><primary>FuncDef element, changes V4.0</primary></indexterm>
<indexterm><primary>FuncPrototype element, changes V4.0</primary></indexterm>
<indexterm><primary>FuncSynopsisInfo element (V4.0)</primary></indexterm>

The content model group inside <sgmltag>FuncSynopsis</sgmltag> starting with <sgmltag>FuncDef</sgmltag>
  will not be available; you will have to use <sgmltag>FuncPrototype</sgmltag>.  Also, you
  will be able to have a mixture of <sgmltag>FuncPrototypes</sgmltag> and <sgmltag>FuncSynopsisInfos</sgmltag>
  (this is not backward-incompatible all by itself).
</para></listitem>

<listitem><para>
<indexterm><primary>EnvironVar element (V4.0)</primary></indexterm>
<indexterm><primary>Prompt element</primary>
  <secondary>changes, V4.0</secondary></indexterm>
<indexterm><primary>Class attribute</primary>
  <secondary>changes, V4.0</secondary></indexterm>
<indexterm><primary>SysItem element (V4.0)</primary></indexterm>
<indexterm><primary>EnVar element</primary>
  <secondary>V4.0</secondary></indexterm>

The <literal>EnvironVar</literal> and <literal>Prompt</literal> values for the <sgmltag class='attribute'>Class</sgmltag> attribute on <sgmltag>SystemItem</sgmltag>
  will be eliminated; use the <sgmltag>EnVar</sgmltag> and <sgmltag>Prompt</sgmltag> elements instead.
</para></listitem>
</itemizedlist>
</sect1>

<sect1 id="v42"><title>DocBook V4.2</title>
<para>DocBook V4.2 fixed a couple of small bugs and introduced a number of
new features. Changes in DocBook V4.2 are explained in the
<ulink url="http://www.oasis-open.org/docbook/docbook-4.2.html">DocBook
Document Type Version 4.2</ulink>.</para>
</sect1>

<sect1 id="ebnf.module"><title>EBNF Module</title>
<para>FIXME: write this section</para>
</sect1>

<sect1 id="htmlforms.module"><title>HTML Forms Module</title>
<para>FIXME: write this section</para>
</sect1>

<sect1 id="mathml.module"><title>MathML Module</title>
<para>FIXME: write this section</para>
</sect1>

<sect1 id="svg.module"><title>SVG Module</title>
<para>FIXME: write this section</para>
</sect1>

</appendix>

<!--
Local Variables:
mode:sgml
sgml-parent-document: ("book.sgm" "appendix")
End:
-->
<appendix id="app-resources">
<?dbhtml filename="appd.html"?>
<appendixinfo>
<pubdate>$Date: 2009-01-05 12:25:13 +0300 (Пн, 05 янв 2009) $</pubdate>
<releaseinfo>$Revision: 8201 $</releaseinfo>
</appendixinfo>
<title>Resources</title>
<indexterm><primary>XML</primary>
  <secondary>resources, reference</secondary></indexterm>
<indexterm><primary>SGML</primary>
  <secondary>resources, reference</secondary></indexterm>

<para>The quantity of information about &SGML; and &XML; is growing
on a daily basis.  This appendix strives to provide both a
complete bibliography of the references mentioned explicitly in
this book, and a sampling of resources for additional
information about DocBook and about &SGML; and &XML; in general.
Although not all of these resources are focused specifically on
DocBook, they still provide helpful information for DocBook
users.</para>

<sect1 id="latestver">
<title>Latest Versions of DocBook</title>
<para>As of July 1998, responsibility for the advancement and maintenance
of the DocBook &DTD; has been transferred from the Davenport Group, which originated
it, to the DocBook Technical Committee of <acronym>OASIS</acronym> (Organization for the Advancement
of Structured Information Standards) at <ulink url="http://www.oasis-open.org/">
http://www.oasis-open.org/</ulink>.</para>

<para>
The latest releases of DocBook can be obtained from the official DocBook
home page at <ulink url="http://www.oasis-open.org/docbook/">
http://www.oasis-open.org/docbook/</ulink>.
</para>
</sect1>
<sect1 id="res-resources">
<title>Resources for Resources</title>
<para>Here's where to find pointers to the subjects you want to find.</para>
<variablelist>
<varlistentry><term>The Most Recent Version of This Book</term>
<listitem><para>
The most recent online version of this book can be found at
<ulink url="http://docbook.org/">http://docbook.org/</ulink>.
</para></listitem>
</varlistentry>
<varlistentry><term>The Most Recent Version of DocBook</term>
<listitem><para>
The most recent version of DocBook, and the most recent information
about the &DTD;, can be found at the DocBook home page:
<ulink url="http://www.oasis-open.org/docbook/">http://www.oasis-open.org/docbook/</ulink>.
</para></listitem>
</varlistentry>
<varlistentry><term>Robin Cover's &SGML;/&XML; Web page</term>
<listitem>
<para>Easily the largest and most up-to-date list of &SGML;/&XML; resources; can be found at <ulink url="http://www.oasis-open.org/cover/">http://www.oasis-open.org/cover/</ulink>.</para>
</listitem>
</varlistentry>
<varlistentry><term><systemitem role="newsgroup">comp.text.sgml</systemitem>
and <systemitem role="newsgroup">comp.text.xml</systemitem></term>
<listitem>
<para><acronym>USENET</acronym> newsgroups devoted to &SGML; and &XML; issues.</para>
</listitem>
</varlistentry>
<varlistentry><term><acronym>FAQ</acronym>s</term>
<listitem>
<para>For pointers to several &SGML; <acronym>FAQ</acronym>s, see 
<ulink url="http://www.oasis-open.org/cover/general.html#faq">http://www.oasis-open.org/cover/general.html#faq</ulink>. 
The &XML; <acronym>FAQ</acronym> is
available at <ulink url="http://www.ucc.ie/xml">http://www.ucc.ie/xml</ulink>.
</para>
</listitem>
</varlistentry>
<varlistentry><term><ulink url="http://www.xml.com/">&XML;.com</ulink></term>
<listitem>
<para><ulink url="http://www.xml.com/">&XML;.com</ulink>, run jointly
by Songline Studios and Seybold, is a site devoted to making &XML;
accessible.</para>
</listitem>
</varlistentry>
</variablelist>
</sect1>
<sect1 id="res-intro">
<title>Introductory Material on the Web</title>
<para>These documents provide a good background for a better understanding of
&SGML; and &XML;.</para>
<variablelist>
<varlistentry><term>A Gentle Introduction to &SGML;</term>
<listitem>
<para>A useful and simple document available in its original form at <ulink
url="http://www-tei.uic.edu/orgs/tei/sgml/teip3sg/index.html">http://www-tei.uic.edu/orgs/tei/sgml/teip3sg/index.html
</ulink>.</para>
</listitem>
</varlistentry>
<varlistentry><term>A Technical Introduction to &XML;</term>
<listitem>
<para>A close look at the ins-and-outs of &XML; is available at <ulink url="http://nwalsh.com/docs/articles/xml/">
http://nwalsh.com/docs/articles/xml/</ulink>.</para>
</listitem>
</varlistentry>
</variablelist>
</sect1>

<sect1 id="res-web">
<title>References and Technical Notes <?lb?>on the Web</title>
<variablelist>
<varlistentry><term>Entity Management</term>
<listitem>
<para><ulink url="http://www.oasis-open.org/html/a401.htm"><acronym>OASIS</acronym> Technical
Resolution 9401:1997 (Amendment 2 to <acronym>TR</acronym> 9401)</ulink>.</para>
<para>
This document describes <acronym>OASIS</acronym> catalog files.
</para>
</listitem>
</varlistentry>
<varlistentry><term>The &SGML; Declaration</term>
<listitem>
<para><ulink url="http://www.oasis-open.org/cover/wlw11.html">The &SGML; Declaration,</ulink> by Wayne Wholer.
</para>
</listitem>
</varlistentry>
<varlistentry><term>Table Interoperability: Issues for the &CALS; Table Model
</term>
<listitem>
<para><ulink url="http://www.oasis-open.org/html/a501.htm"><acronym>OASIS</acronym>
Technical Research Paper 9501:1995</ulink>.</para>
</listitem>
</varlistentry>
<varlistentry><term>Exchange Table Model Document Type Definition</term>
<listitem>
<para><ulink url="http://www.oasis-open.org/html/a503.htm"><acronym>OASIS</acronym>
Technical Resolution <acronym>TR</acronym> 9503:1995</ulink>.</para>
</listitem>
</varlistentry>
<varlistentry id="calsdtd"><term>&CALS; Table Model Document Type Definition</term>
<listitem>
<para><ulink url="http://www.oasis-open.org/html/a502.htm"><acronym>OASIS</acronym>
Technical Memorandum <acronym>TM</acronym> 9502:1995</ulink></para>
</listitem>
</varlistentry>
<varlistentry id="calsxmldtd"><term>XML Exchange Table Model Document Type Definition</term>
<listitem>
<para><ulink url="http://www.oasis-open-org/html/a901.htm">OASIS
Technical Memorandum TM 9901:1999</ulink>.</para>
</listitem>
</varlistentry>
</variablelist>
</sect1>

<sect1 id="res-rfc">
<title>Internet <acronym>RFC</acronym>s</title>
<para>
<acronym>RFC</acronym>s (<quote>Request for Comments</quote>) are standards documents
produced by the Internet Engineering Task Force (<acronym>IETF</acronym>).
</para>

<variablelist>
<varlistentry><term><ulink url="http://www.cis.ohio-state.edu/htbin/rfc/rfc1630.html"><acronym>RFC</acronym> 1630</ulink></term>
<listitem>
<para>Universal Resource Identifiers in <acronym>WWW</acronym>.</para>
</listitem>
</varlistentry>

<varlistentry><term><ulink url="http://www.cis.ohio-state.edu/htbin/rfc/rfc1736.html"><acronym>RFC</acronym> 1736</ulink></term>
<listitem>
<para>Functional recommendations for Internet Resource Locators.</para>
</listitem>
</varlistentry>

<varlistentry><term><ulink url="http://www.cis.ohio-state.edu/htbin/rfc/rfc1737.html"><acronym>RFC</acronym> 1737</ulink></term>
<listitem>
<para>Functional requirements for Uniform Resource Names.</para>
</listitem>
</varlistentry>

<varlistentry><term><ulink url="http://www.cis.ohio-state.edu/htbin/rfc/rfc1738.html"><acronym>RFC</acronym> 1738</ulink></term>
<listitem>
<para>Uniform Resource Locators (<acronym>URL</acronym>).</para>
</listitem>
</varlistentry>

<varlistentry><term><ulink url="http://www.cis.ohio-state.edu/htbin/rfc/rfc3066.html"><acronym>RFC</acronym> 3066</ulink></term>
<listitem>
<para>Tags for the identification of languages</para>
</listitem>
</varlistentry>
</variablelist>
</sect1>

<sect1 id="res-spec">
<title>Specifications</title>
<para>Here are pointers to the specifications.</para>
<variablelist>
<varlistentry><term><ulink url="http://www.w3.org/TR/REC-xml">The &XML; Specification
</ulink></term>
<listitem>
<para>The <acronym>W3C</acronym> technical recommendation that defines &XML; 1.0.</para>
</listitem>
</varlistentry>
<varlistentry><term><ulink url="http://www.w3.org/TR/REC-xml-names/">Namespaces
in &XML;</ulink></term>
<listitem>
<para>The <acronym>W3C</acronym> technical recommendation that defines &XML; namespaces.</para>
</listitem>
</varlistentry>
<varlistentry><term><ulink url="http://www.w3.org/TR/REC-MathML/">Mathematical
Markup Language (MathML) 1.0 Specification</ulink></term>
<listitem>
<para>The <acronym>W3C</acronym> technical recommendation that defines MathML, an &XML;
representation of mathematical equations.</para>
</listitem>
</varlistentry>
<varlistentry><term><ulink url="http://www.unicode.org/unicode/uni2book/u2.html">
The Unicode Standard, Version 2.0</ulink></term>
<listitem>
<para>The Unicode standard.</para>
</listitem>
</varlistentry>
<varlistentry><term><ulink url="http://www.unicode.org/unicode/reports/tr8.html">
Unicode Technical Report #8</ulink></term>
<listitem>
<para>Version 2.1 of the Unicode standard.</para>
</listitem>
</varlistentry>

<varlistentry><term><ulink url="http://dublincore.org/documents/dces/">
Dublin Core Metadata Element Set, Version 1.1: Reference Description</ulink></term>
<listitem>
<para>Version 1.1 of the Dublin Core Metadata Initiative's Metadata Element
Set.</para>
</listitem>
</varlistentry>

<varlistentry><term><ulink url="http://www.getty.edu/research/tools/vocabulary/tgn/">
Getty Thesaurus of Geographic Names</ulink></term>
<listitem>
<para>A controlled vocabulary of geographic place names.</para>
</listitem>
</varlistentry>

</variablelist>
</sect1>
<sect1 id="res-books">
<title>Books and Printed Resources</title>
<para>There are also a number of books worth checking out:</para>
<bibliography>
<biblioentry id="maler96">
	<title>Developing &SGML; &DTD;s</title>
	<subtitle>From Text to Model to Markup</subtitle>
	<authorgroup>
	  <author>
	    <firstname>Eve</firstname>
	    <surname>Maler</surname>
	  </author>
	  <author>
	    <firstname>Jeanne</firstname>
	    <surname>El Andaloussi</surname>
	  </author>
	</authorgroup>
	<isbn>0-13-309881-8</isbn>
	<publisher>
	  <publishername>Prentice-Hall PTR</publishername>
	  <address>
	    <city>Upper Saddle River</city>
	    <state>New Jersey</state>
	  </address>
	</publisher>
	<pubdate>1996</pubdate>
</biblioentry>
<biblioentry>
	<title>Practical &SGML;</title>
	<authorgroup>
	  <author>
	    <firstname>Erik</firstname>
	    <surname>van Herwijnen</surname>
	  </author>
	</authorgroup>
	<edition>2</edition>
	<isbn>0-7923-9434-8</isbn>
	<publisher>
	  <publishername>Kluwer Academic Press</publishername>
	</publisher>
	<pubdate>1994</pubdate>
	<bibliomisc>An introductory book, but not a simple one.</bibliomisc>
</biblioentry>
<biblioentry>
	<title>The &SGML; Handbook</title>
	<authorgroup>
	  <author>
	    <firstname>Charles</firstname>
	    <surname>Goldfarb</surname>
	  </author>
	  <author>
	    <firstname>Yuri</firstname>
	    <surname>Rubinksy</surname>
	  </author>
	</authorgroup>
	<isbn>0-7923-9434-8</isbn>
	<pubdate>1991</pubdate>
	<publisher>
	  <publishername>Oxford University Press</publishername>
	</publisher>
	<bibliomisc>A reference book by the author of the &SGML; <acronym>ISO</acronym> Standard.</bibliomisc>
</biblioentry>
<biblioentry>
   <title>SGML: an author's guide to the Standard Generalized Markup Language</title>
   <authorgroup>
     <author>
      <firstname>Martin</firstname>
      <surname>Bryan</surname>
     </author>
   </authorgroup>
   <isbn>0-201-17535-5</isbn>
   <pubdate>1988</pubdate>
   <publisher>
      <publishername>Addison-Wesley Publishing Company</publishername>
   </publisher>
 </biblioentry>
<biblioentry>
	<title>$GML: The Billion Dollar Secret</title>
	<authorgroup>
	  <author>
	    <firstname>Chet</firstname>
	    <surname>Ensign</surname>
	  </author>
	</authorgroup>
	<isbn>0-13-226705-5</isbn>
	<pubdate>1998</pubdate>
	<publisher>
	  <publishername>Prentice Hall</publishername>
	</publisher>
	<bibliomisc>Effective &SGML; evangelism.</bibliomisc>
</biblioentry>
<biblioentry>
	<title>Creating Documents with &XML;</title>
	<authorgroup>
	  <author>
	    <firstname>Chris</firstname>
	    <surname>Maden</surname>
	  </author>
	</authorgroup>
	<isbn>1-56592-518-1</isbn>
	<pubdate>1999</pubdate>
	<publisher>
	  <publishername>O'Reilly &amp; Associates</publishername>
	</publisher>
	<bibliomisc>An introductory book about &XML;.</bibliomisc>
</biblioentry>
<biblioentry>
	<title>&XML;: A Primer</title>
	<authorgroup>
	  <author>
	    <firstname>Simon</firstname>
	    <surname>St. Laurent</surname>
	  </author>
	</authorgroup>
	<isbn>1-5582-8592-X</isbn>
	<pubdate>1998</pubdate>
	<publisher>
	  <publishername>MIS:Press/IDG Books Worldwide</publishername>
	</publisher>
	<bibliomisc>Another introductory book about &XML;.</bibliomisc>
</biblioentry>
<biblioentry>
    <title>Understanding SGML and XML Tools</title>
    <authorgroup>
       <author>
         <firstname>Peter</firstname>
         <surname>Flynn</surname>
       </author>
     </authorgroup>
     <isbn>0-7923-8169-6</isbn>
     <pubdate>1998</pubdate>
     <publisher>
       <publishername>Kluwer Academic Publishers</publishername>
     </publisher>
<bibliomisc>The standard work on SGML/XML software.</bibliomisc>
</biblioentry>
 <biblioentry>
   <title>The LaTeX Web Companion</title>
   <subtitle>Integrating TeX, HTML, and XML</subtitle>
   <authorgroup>
      <author><firstname>Michel</firstname><surname>Goosens</surname></author>
      <author><firstname>Sebastian</firstname><surname>Rahtz</surname></author>
   </authorgroup>
   <isbn>0-201-43311-7</isbn>
   <pubdate>1999</pubdate>
   <publisher>
     <publishername>Addison-Wesley Publishing Company</publishername>
   </publisher>
 </biblioentry>
</bibliography>
</sect1>
<sect1 id="res-tools">
<title>&SGML;/&XML; Tools</title>
<para>An attempt to provide a detailed description of all of the &SGML;/&XML;
tools available is outside the scope of this book.
</para>
<para>
For a list of recent
of &SGML; tools, check out Robin Cover's &SGML;/&XML; page at <acronym>OASIS</acronym>: <ulink url="http://www.oasis-open.org/cover">
http://www.oasis-open.org/cover</ulink>.
</para>
<para>For a list of &XML; tools,
check out &XML;.com: <ulink url="http://www.xml.com/">http://www.xml.com/</ulink>.
</para>
</sect1>
</appendix>

<!--
Local Variables:
mode:sgml
sgml-parent-document: ("book.sgm" "appendix")
End:
-->
<appendix id="app-cdrom">
<?dbhtml filename="appe.html"?>
<appendixinfo>
<pubdate>$Date: 2003-06-04 16:22:51 +0400 (Ср, 04 июн 2003) $</pubdate>
<releaseinfo>$Revision: 2902 $</releaseinfo>
</appendixinfo>
<title>What's on the<?lb?><acronym>CD-ROM</acronym>?</title>
<para>
<indexterm><primary>DocBook DTD</primary>
  <secondary>CD-ROM, resources</secondary><see>Appendix D in this book</see></indexterm>
The <acronym>CD-ROM</acronym> that accompanies the print version of this book contains
a number of useful resources.
</para>
<para>
Please read the <filename>readme.txt</filename> file in the root directory
of the <acronym>CD-ROM</acronym>. It describes any last-minute changes or additions
that were made to the <acronym>CD-ROM</acronym> after this appendix was written.
</para>

<sect1 id="cdrom-tdg"><title>DocBook: The Definitive Guide</title>
<para>
<filename>/sgml/</filename> contains the sources for this book in &SGML;.
</para>
<para>
<filename>/html/</filename> contains an online version of this book in &HTML;.
</para>
<para>
<filename>/help/</filename> contains a compiled &HTML; Help version of this book.
</para>
<para>
<filename>/examples/</filename> contains the complete examples from
this book.
</para>
</sect1>

<sect1 id="app-cdrom-docbook">
<title>The DocBook &DTD;</title>
<para>
<filename>/dtds/docbook/db30</filename> contains DocBook <acronym>V3.0</acronym>.
</para>
<para>
<filename>/dtds/docbook/db31</filename> contains DocBook <acronym>V3.1</acronym>.
</para>
<para>
<filename>/dtds/docbk/db315</filename> contains DocBk &XML; <acronym>V3.1.5</acronym>.
</para>
<para>
<filename>/dtds/docbk/sdb3151</filename> contains a simplified DocBk &XML;
<acronym>V3.1.5.1</acronym>.
</para>
<para>
<filename>/dtds/isoents</filename> contains <acronym>ISO</acronym> entity sets
needed for the &DTD;s.
</para>
<para>
<filename>/dtds/usadod</filename> contains the <acronym>CALS</acronym> table
model &DTD; needed for the &SGML; DocBook &DTD;s.
</para>
</sect1>

<sect1 id="cdrom-stylesheets"><title>Stylesheets</title>
<para>
<filename>/style/</filename> contains various stylesheets.
</para>
<para>
<filename>/style/dsssl/docbook/</filename> contains the Modular DocBook
<acronym>DSSSL</acronym> stylesheets. These are the Jade stylesheets
described in <xref linkend="ch-publish"/>.
</para>
<para>
<filename>/dtds/dsssl/anotess/</filename> contains the Annotated
<acronym>DSSSL</acronym> stylesheet &DTD; and related files.
</para>
<para>
<filename>/style/xsl/</filename> contains various <acronym>XSL</acronym> stylesheets.
</para>
<para>
<filename>/style/xsl/docbook/</filename> contains the <acronym>XSL</acronym> DocBook
Stylesheets <acronym>V0.12</acronym>.
</para>
</sect1>

<sect1 id="cdrom-other"><title>Other Programs</title>
<para>
The <filename>/apps</filename> directory contains source and binary releases
of other, related software, including the Jade and XT
distributions. The <filename>/bin</filename> directory contains the format
script briefly discussed in <xref linkend="app-customizing"/>.
</para>
</sect1>
</appendix>

<!--
Local Variables:
mode:sgml
sgml-parent-document: ("book.sgm" "appendix")
End:
-->
<appendix id="app-interchange">
<?dbhtml filename="appf.html"?>
<appendixinfo>
<pubdate>$Date: 2001-08-14 01:42:26 +0400 (Вт, 14 авг 2001) $</pubdate>
<releaseinfo>$Revision: 625 $</releaseinfo>
</appendixinfo>
<title>Interchanging DocBook Documents</title>
<indexterm id="DocBookinterchangeappf" class='startofrange'><primary>DocBook DTD</primary>
  <secondary>documents</secondary>
    <tertiary>interchanging</tertiary></indexterm>
<indexterm id="questionappf" class="startofrange"><primary>questionnaire, DocBook document interchange issues</primary></indexterm>

<para>
One of the early factors that motivated the development of the DocBook
&DTD; was the desire for companies to interchange documents.  In particular,
&UNIX; vendors wanted to be able to interchange common &UNIX; documentation.
</para>

<para>
A great deal of effort went into making sure that DocBook could handle
most (probably all) of the documents that were likely to be exchanged.
This avoids the guaranteed interchange problem of &DTD; extension.
</para>

<para>However, simply using DocBook or a subset of it is not
enough to ensure successful interchange. If you send someone
your DocBook files, you must also tell the recipient about the
markup your documents use and any of your additional markup
conventions and processing expectations that impose constraints
on processing.
</para>

<para>
This appendix provides a sample interchange questionnaire to
help draw your attention to those areas that might be problematic.
</para>

<para>For maximum portability, delivered DocBook documents
should be accompanied by a filled-out interchange
questionnaire. Because each situation is unique, you may need to
supply additional information (such as layout specifications) in
order to deliver a complete package.</para>

<bridgehead>DocBook and &SGML; Usage</bridgehead>

<orderedlist>
<listitem><para>What version of the &DTD; are you using?</para>
</listitem><listitem><para>Did you use any markup features of the &DTD; that
have been flagged as obsolete (to be removed at the next major version
of DocBook)? If so, which ones?</para>
</listitem><listitem><para>Did you extend DocBook in any way, inside or outside
the provided customization mechanisms? How? All extensions must be negotiated
with the recipient.</para>
</listitem><listitem><para>Did you remove markup from DocBook to create a
subset? If you used a subset of DocBook, supply the subset you used. (Note
that even the removal of references to <acronym>ISO</acronym> entity sets creates a subset.)
</para>
</listitem><listitem><para>Did you use the supplied &SGML; declaration or another
one? If you used another one, provide it.</para>
</listitem><listitem><para>Did you use the supplied catalog or another one,
or none at all? If you used a catalog other than the one supplied, provide
it.</para>
</listitem><listitem><para>If your documents bear no document type declaration,
and you parsed them with a document declaration (with or without an internal
subset), supply it.</para>
</listitem><listitem><para>Did you add <literal>NOTATION</literal> declarations?
If so, what are they? List all data content notations used in your documents.
</para>
</listitem><listitem><para>Did you use the <literal>SUBDOC</literal> feature?
If so, how did you manage the name spaces of their <acronym>ID</acronym>s, if you managed
them at all?</para>
</listitem><listitem><para>Did you use character sets other than <acronym>ISO</acronym> 8859-1
(Latin 1)? If so, which ones? How did you use them?</para>
</listitem><listitem><para>Did you declare and use character entities and
other general entities besides the <acronym>ISO</acronym> entity sets? If so, supply the entity
declarations and the desired appearance of the additional character entities.
</para>
</listitem><listitem><para>Are your document files normalized to include all
markup explicitly?</para>
</listitem><listitem><para>Are you supplying a document fragment? If so, have
you provided any necessary auxiliary information (such as meta-information)
for the fragment? Are there any attribute values that haven't been specified
that you expect to inherit from a parent that isn't present?</para>
</listitem></orderedlist>

<bridgehead>Processing Requirements and Markup Interpretation</bridgehead>

<orderedlist continuation="continues"><listitem><para>What formatting that you applied do you
require your interchange partner to apply? For example,
where and how must text be generated in order for the documents to make sense?
</para>
</listitem><listitem><para>Did you supply your stylesheet and
information regarding its format and version?</para>
</listitem><listitem><para>How did you create tables of contents,
lists of titles, and indexes? Are they stored in DocBook form? If so,
did you generate them (and according to what rules) or create them by
hand?</para> </listitem><listitem><para>If you used the <sgmltag
class="attribute">Lang</sgmltag> common attribute, why, and to what
effect?</para> </listitem><listitem><para>If you used the <sgmltag
class="attribute">Remap</sgmltag> common attribute, why, and to what
effect?</para> </listitem><listitem><para>If you used the <sgmltag
class="attribute">Role</sgmltag> common attribute, why, and to what
effect?</para> </listitem><listitem><para>If you used the effectivity
attributes, which did you use, why, and to what effect?</para>
</listitem><listitem><para>What values did you give to the <sgmltag
class="attribute">Label</sgmltag> attribute and how are they to be
interpreted for rendering?</para> </listitem><listitem><para>What
values did you give to the <sgmltag class="attribute">Mark</sgmltag>
and <sgmltag class="attribute">Override</sgmltag> attributes for lists
and how are they to be interpreted for rendering?</para>
</listitem><listitem><para>Did you use the <sgmltag
class="attribute">Renderas</sgmltag> attribute on sections and/or
<sgmltag>BridgeHead</sgmltag>s?</para>
</listitem><listitem><para>Did you supply all keyword values you used for
attributes whose declared values are not enumerated tokens, along with
the expected processing for the occurrence of each keyword?</para>
</listitem><listitem><para>Did you use markup to control width, size,
and/or positioning settings (such as <quote>fold-out</quote> or
<quote>centered</quote>) for graphics, line specific regions, and
tables? If so, how?</para> </listitem><listitem><para>For rendering of
<sgmltag>Sidebar</sgmltag>s, must these appear in the flow of the text
where they appear in your files, or may they float?</para>
</listitem>
<listitem><para>Did you use <sgmltag>Callout</sgmltag>s? If so, what are the
processing expectations for callout marks?
</para>
</listitem>
<listitem><para>Did you use <sgmltag>ItemizedList</sgmltag>s? If so, what are the
processing expectations for the marks on list items and nested lists?
</para>
</listitem>
<listitem><para>For <sgmltag>Graphic</sgmltag> and <sgmltag>InlineGraphic</sgmltag>, what method(s) did
you use for providing graphic data: element content, <sgmltag class="attribute">Fileref</sgmltag> attribute, or
<sgmltag class="attribute">Entityref</sgmltag> attribute?</para>
</listitem>
<listitem><para>For <sgmltag>MediaObject</sgmltag> and <sgmltag>InlineMediaObject</sgmltag>,
what method(s) did
you use for selecting between alternative presentations?</para>
</listitem><listitem><para>How did you specify column widths in tables? Did
you use vertical spans? Did you use horizontal spans?</para>
</listitem><listitem><para>Did you use <sgmltag>EntryTbl</sgmltag>s?
</para>
</listitem><listitem><para>If you used the <sgmltag class="attribute">Type</sgmltag> attribute on the link elements,
why, and to what effect?</para>
</listitem><listitem><para>If you used <sgmltag>XRef</sgmltag>, do your interchange
partners need additional information about the semantic of the link?
Have you provided it, perhaps with <sgmltag class="attribute">Role</sgmltag>?</para>
</listitem><listitem><para>Did you use the <sgmltag class="attribute">Subject</sgmltag> attribute on <sgmltag>GlossDef</sgmltag>?
If so, did you use a thesaurus of terms? If so, what is it?</para>
</listitem><listitem><para>If you used the <sgmltag class="attribute">Class</sgmltag> attribute on <sgmltag>RefMiscInfo</sgmltag>,
why and to what effect?</para>
</listitem><listitem><para>If you used <sgmltag>ULink</sgmltag> and provided <acronym>URL</acronym>s that are queries,
what back-end processing is required to resolve those queries?</para>
</listitem>
<listitem><para><sgmltag class="attribute">FileRef</sgmltag> or 
<sgmltag class="attribute">EntityRef</sgmltag> is supplied on every
<sgmltag>Graphic</sgmltag>,
<sgmltag>InlineGraphic</sgmltag>,
<sgmltag>AudioData</sgmltag>, 
<sgmltag>ImageData</sgmltag>, and
<sgmltag>VideoData</sgmltag> element.  If one is not present, what is the expectation?
</para>
</listitem>
<listitem><para>If your <sgmltag>Bibliography</sgmltag>s or
<sgmltag>Glossary</sgmltag>s have special processing expectations,
such as the ability to display only those entries that are cited,
have you described them?
</para>
</listitem>

<listitem><para>If your <sgmltag>Bibliography</sgmltag>s contain
<sgmltag>BiblioEntry</sgmltag>s, what are the processing expectations?
Which fields are selected for display?
What punctuation is added, and where?
</para>
</listitem>

<listitem><para>Do <sgmltag>GlossTerm</sgmltag>s or other elements have
implicit linking relationships that must be obeyed or handled in
presentation?
</para>
</listitem>
<listitem><para>Did you use any processing instructions? Why and what for?
Are they in entities?
</para>
</listitem>
<listitem><para>What copyfitting have you already done, and for what outputs?
</para>
</listitem>
<listitem><para>Are the <sgmltag>Revision</sgmltag>s in your
<sgmltag>RevHistory</sgmltag>s sorted in any particular way?
</para>
</listitem>
</orderedlist>
<bridgehead>Miscellaneous</bridgehead>
<orderedlist continuation="continues"><listitem><para>Have you checked your
files for viruses?</para>
</listitem><listitem><para>If you used <sgmltag>BridgeHead</sgmltag>, have you joined a recovery
support group?</para>
</listitem></orderedlist>
<indexterm startref="questionappf" class='endofrange'/>
<indexterm startref="DocBookinterchangeappf" class='endofrange'/>

</appendix>

<!--
Local Variables:
mode:sgml
sgml-parent-document: ("book.sgm" "appendix")
End:
-->
<appendix id='quickref'>
<?dbhtml filename="quickref.html"?>
<title>DocBook Quick Reference</title>

<section><title>DocBook <acronym>V3.1</acronym></title>

<informaltable>
<tgroup cols="2">
<colspec colnum="1" colwidth="1.25in"/>
<colspec colnum="2" colwidth="3.75in"/>
<thead>
<row><entry>Element</entry><entry>Brief Description</entry></row>
</thead>
<tbody>
<row><entry><sgmltag>Abbrev</sgmltag></entry><entry>&abbrev.purpose;</entry></row>
<row><entry><sgmltag>Abstract</sgmltag></entry><entry>&abstract.purpose;</entry></row>
<row><entry><sgmltag>Accel</sgmltag></entry><entry>&accel.purpose;</entry></row>
<row><entry><sgmltag>Ackno</sgmltag></entry><entry>&ackno.purpose;</entry></row>
<row><entry><sgmltag>Acronym</sgmltag></entry><entry>&acronym.purpose;</entry></row>
<row><entry><sgmltag>Action</sgmltag></entry><entry>&action.purpose;</entry></row>
<row><entry><sgmltag>Address</sgmltag></entry><entry>&address.purpose;</entry></row>
<row><entry><sgmltag>Affiliation</sgmltag></entry><entry>&affiliation.purpose;</entry></row>
<row><entry><sgmltag>Alt</sgmltag></entry><entry>&alt.purpose;</entry></row>
<row><entry><sgmltag>Anchor</sgmltag></entry><entry>&anchor.purpose;</entry></row>
<row><entry><sgmltag>Answer</sgmltag></entry><entry>&answer.purpose;</entry></row>
<row><entry><sgmltag>Appendix</sgmltag></entry><entry>&appendix.purpose;</entry></row>
<row><entry><sgmltag>Application</sgmltag></entry><entry>&application.purpose;</entry></row>
<row><entry><sgmltag>Area</sgmltag></entry><entry>&area.purpose;</entry></row>
<row><entry><sgmltag>AreaSet</sgmltag></entry><entry>&areaset.purpose;</entry></row>
<row><entry><sgmltag>AreaSpec</sgmltag></entry><entry>&areaspec.purpose;</entry></row>
<row><entry><sgmltag>Arg</sgmltag></entry><entry>&arg.purpose;</entry></row>
<row><entry><sgmltag>ArtHeader</sgmltag></entry><entry>&artheader.purpose;</entry></row>
<row><entry><sgmltag>ArtPageNums</sgmltag></entry><entry>&artpagenums.purpose;</entry></row>
<row><entry><sgmltag>Article</sgmltag></entry><entry>&article.purpose;</entry></row>
<row><entry><sgmltag>Attribution</sgmltag></entry><entry>&attribution.purpose;</entry></row>
<row><entry><sgmltag>AudioData</sgmltag></entry><entry>&audiodata.purpose;</entry></row>
<row><entry><sgmltag>AudioObject</sgmltag></entry><entry>&audioobject.purpose;</entry></row>
<row><entry><sgmltag>Author</sgmltag></entry><entry>&author.purpose;</entry></row>
<row><entry><sgmltag>AuthorBlurb</sgmltag></entry><entry>&authorblurb.purpose;</entry></row>
<row><entry><sgmltag>AuthorGroup</sgmltag></entry><entry>&authorgroup.purpose;</entry></row>
<row><entry><sgmltag>AuthorInitials</sgmltag></entry><entry>&authorinitials.purpose;</entry></row>
<row><entry><sgmltag>BeginPage</sgmltag></entry><entry>&beginpage.purpose;</entry></row>
<row><entry><sgmltag>BiblioDiv</sgmltag></entry><entry>&bibliodiv.purpose;</entry></row>
<row><entry><sgmltag>BiblioEntry</sgmltag></entry><entry>&biblioentry.purpose;</entry></row>
<row><entry><sgmltag>BiblioMSet</sgmltag></entry><entry>&bibliomset.purpose;</entry></row>
<row><entry><sgmltag>BiblioMisc</sgmltag></entry><entry>&bibliomisc.purpose;</entry></row>
<row><entry><sgmltag>BiblioMixed</sgmltag></entry><entry>&bibliomixed.purpose;</entry></row>
<row><entry><sgmltag>BiblioSet</sgmltag></entry><entry>&biblioset.purpose;</entry></row>
<row><entry><sgmltag>Bibliography</sgmltag></entry><entry>&bibliography.purpose;</entry></row>
<row><entry><sgmltag>BlockQuote</sgmltag></entry><entry>&blockquote.purpose;</entry></row>
<row><entry><sgmltag>Book</sgmltag></entry><entry>&book.purpose;</entry></row>
<row><entry><sgmltag>BookBiblio</sgmltag></entry><entry>&bookbiblio.purpose;</entry></row>
<row><entry><sgmltag>BookInfo</sgmltag></entry><entry>&bookinfo.purpose;</entry></row>
<row><entry><sgmltag>BridgeHead</sgmltag></entry><entry>&bridgehead.purpose;</entry></row>
<row><entry><sgmltag>CO</sgmltag></entry><entry>&co.purpose;</entry></row>
<row><entry><sgmltag>Callout</sgmltag></entry><entry>&callout.purpose;</entry></row>
<row><entry><sgmltag>CalloutList</sgmltag></entry><entry>&calloutlist.purpose;</entry></row>
<row><entry><sgmltag>Caption</sgmltag></entry><entry>&caption.purpose;</entry></row>
<row><entry><sgmltag>Caution</sgmltag></entry><entry>&caution.purpose;</entry></row>
<row><entry><sgmltag>Chapter</sgmltag></entry><entry>&chapter.purpose;</entry></row>
<row><entry><sgmltag>Citation</sgmltag></entry><entry>&citation.purpose;</entry></row>
<row><entry><sgmltag>CiteRefEntry</sgmltag></entry><entry>&citerefentry.purpose;</entry></row>
<row><entry><sgmltag>CiteTitle</sgmltag></entry><entry>&citetitle.purpose;</entry></row>
<row><entry><sgmltag>City</sgmltag></entry><entry>&city.purpose;</entry></row>
<row><entry><sgmltag>ClassName</sgmltag></entry><entry>&classname.purpose;</entry></row>
<row><entry><sgmltag>CmdSynopsis</sgmltag></entry><entry>&cmdsynopsis.purpose;</entry></row>
<row><entry><sgmltag>ColSpec</sgmltag></entry><entry>&colspec.purpose;</entry></row>
<row><entry><sgmltag>Collab</sgmltag></entry><entry>&collab.purpose;</entry></row>
<row><entry><sgmltag>CollabName</sgmltag></entry><entry>&collabname.purpose;</entry></row>
<row><entry><sgmltag>Colophon</sgmltag></entry><entry>&colophon.purpose;</entry></row>
<row><entry><sgmltag>Command</sgmltag></entry><entry>&command.purpose;</entry></row>
<row><entry><sgmltag>Comment</sgmltag></entry><entry>&comment.purpose;</entry></row>
<row><entry><sgmltag>ComputerOutput</sgmltag></entry><entry>&computeroutput.purpose;</entry></row>
<row><entry><sgmltag>ConfDates</sgmltag></entry><entry>&confdates.purpose;</entry></row>
<row><entry><sgmltag>ConfGroup</sgmltag></entry><entry>&confgroup.purpose;</entry></row>
<row><entry><sgmltag>ConfNum</sgmltag></entry><entry>&confnum.purpose;</entry></row>
<row><entry><sgmltag>ConfSponsor</sgmltag></entry><entry>&confsponsor.purpose;</entry></row>
<row><entry><sgmltag>ConfTitle</sgmltag></entry><entry>&conftitle.purpose;</entry></row>
<row><entry><sgmltag>Constant</sgmltag></entry><entry>&constant.purpose;</entry></row>
<row><entry><sgmltag>ContractNum</sgmltag></entry><entry>&contractnum.purpose;</entry></row>
<row><entry><sgmltag>ContractSponsor</sgmltag></entry><entry>&contractsponsor.purpose;</entry></row>
<row><entry><sgmltag>Contrib</sgmltag></entry><entry>&contrib.purpose;</entry></row>
<row><entry><sgmltag>Copyright</sgmltag></entry><entry>&copyright.purpose;</entry></row>
<row><entry><sgmltag>CorpAuthor</sgmltag></entry><entry>&corpauthor.purpose;</entry></row>
<row><entry><sgmltag>CorpName</sgmltag></entry><entry>&corpname.purpose;</entry></row>
<row><entry><sgmltag>Country</sgmltag></entry><entry>&country.purpose;</entry></row>
<row><entry><sgmltag>Database</sgmltag></entry><entry>&database.purpose;</entry></row>
<row><entry><sgmltag>Date</sgmltag></entry><entry>&date.purpose;</entry></row>
<row><entry><sgmltag>Dedication</sgmltag></entry><entry>&dedication.purpose;</entry></row>
<row><entry><sgmltag>DocInfo</sgmltag></entry><entry>&docinfo.purpose;</entry></row>
<row><entry><sgmltag>Edition</sgmltag></entry><entry>&edition.purpose;</entry></row>
<row><entry><sgmltag>Editor</sgmltag></entry><entry>&editor.purpose;</entry></row>
<row><entry><sgmltag>Email</sgmltag></entry><entry>&email.purpose;</entry></row>
<row><entry><sgmltag>Emphasis</sgmltag></entry><entry>&emphasis.purpose;</entry></row>
<row><entry><sgmltag>EnVar</sgmltag></entry><entry>&envar.purpose;</entry></row>
<row><entry><sgmltag>Entry</sgmltag></entry><entry>&entry.purpose;</entry></row>
<row><entry><sgmltag>EntryTbl</sgmltag></entry><entry>&entrytbl.purpose;</entry></row>
<row><entry><sgmltag>Epigraph</sgmltag></entry><entry>&epigraph.purpose;</entry></row>
<row><entry><sgmltag>Equation</sgmltag></entry><entry>&equation.purpose;</entry></row>
<row><entry><sgmltag>ErrorCode</sgmltag></entry><entry>&errorcode.purpose;</entry></row>
<row><entry><sgmltag>ErrorName</sgmltag></entry><entry>&errorname.purpose;</entry></row>
<row><entry><sgmltag>ErrorType</sgmltag></entry><entry>&errortype.purpose;</entry></row>
<row><entry><sgmltag>Example</sgmltag></entry><entry>&example.purpose;</entry></row>
<row><entry><sgmltag>Fax</sgmltag></entry><entry>&fax.purpose;</entry></row>
<row><entry><sgmltag>Figure</sgmltag></entry><entry>&figure.purpose;</entry></row>
<row><entry><sgmltag>Filename</sgmltag></entry><entry>&filename.purpose;</entry></row>
<row><entry><sgmltag>FirstName</sgmltag></entry><entry>&firstname.purpose;</entry></row>
<row><entry><sgmltag>FirstTerm</sgmltag></entry><entry>&firstterm.purpose;</entry></row>
<row><entry><sgmltag>Footnote</sgmltag></entry><entry>&footnote.purpose;</entry></row>
<row><entry><sgmltag>FootnoteRef</sgmltag></entry><entry>&footnoteref.purpose;</entry></row>
<row><entry><sgmltag>ForeignPhrase</sgmltag></entry><entry>&foreignphrase.purpose;</entry></row>
<row><entry><sgmltag>FormalPara</sgmltag></entry><entry>&formalpara.purpose;</entry></row>
<row><entry><sgmltag>FuncDef</sgmltag></entry><entry>&funcdef.purpose;</entry></row>
<row><entry><sgmltag>FuncParams</sgmltag></entry><entry>&funcparams.purpose;</entry></row>
<row><entry><sgmltag>FuncPrototype</sgmltag></entry><entry>&funcprototype.purpose;</entry></row>
<row><entry><sgmltag>FuncSynopsis</sgmltag></entry><entry>&funcsynopsis.purpose;</entry></row>
<row><entry><sgmltag>FuncSynopsisInfo</sgmltag></entry><entry>&funcsynopsisinfo.purpose;</entry></row>
<row><entry><sgmltag>Function</sgmltag></entry><entry>&function.purpose;</entry></row>
<row><entry><sgmltag>GUIButton</sgmltag></entry><entry>&guibutton.purpose;</entry></row>
<row><entry><sgmltag>GUIIcon</sgmltag></entry><entry>&guiicon.purpose;</entry></row>
<row><entry><sgmltag>GUILabel</sgmltag></entry><entry>&guilabel.purpose;</entry></row>
<row><entry><sgmltag>GUIMenu</sgmltag></entry><entry>&guimenu.purpose;</entry></row>
<row><entry><sgmltag>GUIMenuItem</sgmltag></entry><entry>&guimenuitem.purpose;</entry></row>
<row><entry><sgmltag>GUISubmenu</sgmltag></entry><entry>&guisubmenu.purpose;</entry></row>
<row><entry><sgmltag>GlossDef</sgmltag></entry><entry>&glossdef.purpose;</entry></row>
<row><entry><sgmltag>GlossDiv</sgmltag></entry><entry>&glossdiv.purpose;</entry></row>
<row><entry><sgmltag>GlossEntry</sgmltag></entry><entry>&glossentry.purpose;</entry></row>
<row><entry><sgmltag>GlossList</sgmltag></entry><entry>&glosslist.purpose;</entry></row>
<row><entry><sgmltag>GlossSee</sgmltag></entry><entry>&glosssee.purpose;</entry></row>
<row><entry><sgmltag>GlossSeeAlso</sgmltag></entry><entry>&glossseealso.purpose;</entry></row>
<row><entry><sgmltag>GlossTerm</sgmltag></entry><entry>&glossterm.purpose;</entry></row>
<row><entry><sgmltag>Glossary</sgmltag></entry><entry>&glossary.purpose;</entry></row>
<row><entry><sgmltag>Graphic</sgmltag></entry><entry>&graphic.purpose;</entry></row>
<row><entry><sgmltag>GraphicCO</sgmltag></entry><entry>&graphicco.purpose;</entry></row>
<row><entry><sgmltag>Group</sgmltag></entry><entry>&group.purpose;</entry></row>
<row><entry><sgmltag>Hardware</sgmltag></entry><entry>&hardware.purpose;</entry></row>
<row><entry><sgmltag>Highlights</sgmltag></entry><entry>&highlights.purpose;</entry></row>
<row><entry><sgmltag>Holder</sgmltag></entry><entry>&holder.purpose;</entry></row>
<row><entry><sgmltag>Honorific</sgmltag></entry><entry>&honorific.purpose;</entry></row>
<row><entry><sgmltag>ISBN</sgmltag></entry><entry>&isbn.purpose;</entry></row>
<row><entry><sgmltag>ISSN</sgmltag></entry><entry>&issn.purpose;</entry></row>
<row><entry><sgmltag>ITermSet</sgmltag></entry><entry>&itermset.purpose;</entry></row>
<row><entry><sgmltag>ImageData</sgmltag></entry><entry>&imagedata.purpose;</entry></row>
<row><entry><sgmltag>ImageObject</sgmltag></entry><entry>&imageobject.purpose;</entry></row>
<row><entry><sgmltag>ImageObjectCO</sgmltag></entry><entry>&imageobjectco.purpose;</entry></row>
<row><entry><sgmltag>Important</sgmltag></entry><entry>&important.purpose;</entry></row>
<row><entry><sgmltag>Index</sgmltag></entry><entry>&index.purpose;</entry></row>
<row><entry><sgmltag>IndexDiv</sgmltag></entry><entry>&indexdiv.purpose;</entry></row>
<row><entry><sgmltag>IndexEntry</sgmltag></entry><entry>&indexentry.purpose;</entry></row>
<row><entry><sgmltag>IndexTerm</sgmltag></entry><entry>&indexterm.purpose;</entry></row>
<row><entry><sgmltag>InformalEquation</sgmltag></entry><entry>&informalequation.purpose;</entry></row>
<row><entry><sgmltag>InformalExample</sgmltag></entry><entry>&informalexample.purpose;</entry></row>
<row><entry><sgmltag>InformalFigure</sgmltag></entry><entry>&informalfigure.purpose;</entry></row>
<row><entry><sgmltag>InformalTable</sgmltag></entry><entry>&informaltable.purpose;</entry></row>
<row><entry><sgmltag>InlineEquation</sgmltag></entry><entry>&inlineequation.purpose;</entry></row>
<row><entry><sgmltag>InlineGraphic</sgmltag></entry><entry>&inlinegraphic.purpose;</entry></row>
<row><entry><sgmltag>InlineMediaObject</sgmltag></entry><entry>&inlinemediaobject.purpose;</entry></row>
<row><entry><sgmltag>Interface</sgmltag></entry><entry>&interface.purpose;</entry></row>
<row><entry><sgmltag>InterfaceDefinition</sgmltag></entry><entry>&interfacedefinition.purpose;</entry></row>
<row><entry><sgmltag>InvPartNumber</sgmltag></entry><entry>&invpartnumber.purpose;</entry></row>
<row><entry><sgmltag>IssueNum</sgmltag></entry><entry>&issuenum.purpose;</entry></row>
<row><entry><sgmltag>ItemizedList</sgmltag></entry><entry>&itemizedlist.purpose;</entry></row>
<row><entry><sgmltag>JobTitle</sgmltag></entry><entry>&jobtitle.purpose;</entry></row>
<row><entry><sgmltag>KeyCap</sgmltag></entry><entry>&keycap.purpose;</entry></row>
<row><entry><sgmltag>KeyCode</sgmltag></entry><entry>&keycode.purpose;</entry></row>
<row><entry><sgmltag>KeyCombo</sgmltag></entry><entry>&keycombo.purpose;</entry></row>
<row><entry><sgmltag>KeySym</sgmltag></entry><entry>&keysym.purpose;</entry></row>
<row><entry><sgmltag>Keyword</sgmltag></entry><entry>&keyword.purpose;</entry></row>
<row><entry><sgmltag>KeywordSet</sgmltag></entry><entry>&keywordset.purpose;</entry></row>
<row><entry><sgmltag>LegalNotice</sgmltag></entry><entry>&legalnotice.purpose;</entry></row>
<row><entry><sgmltag>LineAnnotation</sgmltag></entry><entry>&lineannotation.purpose;</entry></row>
<row><entry><sgmltag>Lineage</sgmltag></entry><entry>&lineage.purpose;</entry></row>
<row><entry><sgmltag>Link</sgmltag></entry><entry>&link.purpose;</entry></row>
<row><entry><sgmltag>ListItem</sgmltag></entry><entry>&listitem.purpose;</entry></row>
<row><entry><sgmltag>Literal</sgmltag></entry><entry>&literal.purpose;</entry></row>
<row><entry><sgmltag>LiteralLayout</sgmltag></entry><entry>&literallayout.purpose;</entry></row>
<row><entry><sgmltag>LoT</sgmltag></entry><entry>&lot.purpose;</entry></row>
<row><entry><sgmltag>LoTentry</sgmltag></entry><entry>&lotentry.purpose;</entry></row>
<row><entry><sgmltag>ManVolNum</sgmltag></entry><entry>&manvolnum.purpose;</entry></row>
<row><entry><sgmltag>Markup</sgmltag></entry><entry>&markup.purpose;</entry></row>
<row><entry><sgmltag>MediaLabel</sgmltag></entry><entry>&medialabel.purpose;</entry></row>
<row><entry><sgmltag>MediaObject</sgmltag></entry><entry>&mediaobject.purpose;</entry></row>
<row><entry><sgmltag>MediaObjectCO</sgmltag></entry><entry>&mediaobjectco.purpose;</entry></row>
<row><entry><sgmltag>Member</sgmltag></entry><entry>&member.purpose;</entry></row>
<row><entry><sgmltag>MenuChoice</sgmltag></entry><entry>&menuchoice.purpose;</entry></row>
<row><entry><sgmltag>ModeSpec</sgmltag></entry><entry>&modespec.purpose;</entry></row>
<row><entry><sgmltag>MouseButton</sgmltag></entry><entry>&mousebutton.purpose;</entry></row>
<row><entry><sgmltag>Msg</sgmltag></entry><entry>&msg.purpose;</entry></row>
<row><entry><sgmltag>MsgAud</sgmltag></entry><entry>&msgaud.purpose;</entry></row>
<row><entry><sgmltag>MsgEntry</sgmltag></entry><entry>&msgentry.purpose;</entry></row>
<row><entry><sgmltag>MsgExplan</sgmltag></entry><entry>&msgexplan.purpose;</entry></row>
<row><entry><sgmltag>MsgInfo</sgmltag></entry><entry>&msginfo.purpose;</entry></row>
<row><entry><sgmltag>MsgLevel</sgmltag></entry><entry>&msglevel.purpose;</entry></row>
<row><entry><sgmltag>MsgMain</sgmltag></entry><entry>&msgmain.purpose;</entry></row>
<row><entry><sgmltag>MsgOrig</sgmltag></entry><entry>&msgorig.purpose;</entry></row>
<row><entry><sgmltag>MsgRel</sgmltag></entry><entry>&msgrel.purpose;</entry></row>
<row><entry><sgmltag>MsgSet</sgmltag></entry><entry>&msgset.purpose;</entry></row>
<row><entry><sgmltag>MsgSub</sgmltag></entry><entry>&msgsub.purpose;</entry></row>
<row><entry><sgmltag>MsgText</sgmltag></entry><entry>&msgtext.purpose;</entry></row>
<row><entry><sgmltag>Note</sgmltag></entry><entry>&note.purpose;</entry></row>
<row><entry><sgmltag>OLink</sgmltag></entry><entry>&olink.purpose;</entry></row>
<row><entry><sgmltag>ObjectInfo</sgmltag></entry><entry>&objectinfo.purpose;</entry></row>
<row><entry><sgmltag>Option</sgmltag></entry><entry>&option.purpose;</entry></row>
<row><entry><sgmltag>Optional</sgmltag></entry><entry>&optional.purpose;</entry></row>
<row><entry><sgmltag>OrderedList</sgmltag></entry><entry>&orderedlist.purpose;</entry></row>
<row><entry><sgmltag>OrgDiv</sgmltag></entry><entry>&orgdiv.purpose;</entry></row>
<row><entry><sgmltag>OrgName</sgmltag></entry><entry>&orgname.purpose;</entry></row>
<row><entry><sgmltag>OtherAddr</sgmltag></entry><entry>&otheraddr.purpose;</entry></row>
<row><entry><sgmltag>OtherCredit</sgmltag></entry><entry>&othercredit.purpose;</entry></row>
<row><entry><sgmltag>OtherName</sgmltag></entry><entry>&othername.purpose;</entry></row>
<row><entry><sgmltag>POB</sgmltag></entry><entry>&pob.purpose;</entry></row>
<row><entry><sgmltag>PageNums</sgmltag></entry><entry>&pagenums.purpose;</entry></row>
<row><entry><sgmltag>Para</sgmltag></entry><entry>&para.purpose;</entry></row>
<row><entry><sgmltag>ParamDef</sgmltag></entry><entry>&paramdef.purpose;</entry></row>
<row><entry><sgmltag>Parameter</sgmltag></entry><entry>&parameter.purpose;</entry></row>
<row><entry><sgmltag>Part</sgmltag></entry><entry>&part.purpose;</entry></row>
<row><entry><sgmltag>PartIntro</sgmltag></entry><entry>&partintro.purpose;</entry></row>
<row><entry><sgmltag>Phone</sgmltag></entry><entry>&phone.purpose;</entry></row>
<row><entry><sgmltag>Phrase</sgmltag></entry><entry>&phrase.purpose;</entry></row>
<row><entry><sgmltag>Postcode</sgmltag></entry><entry>&postcode.purpose;</entry></row>
<row><entry><sgmltag>Preface</sgmltag></entry><entry>&preface.purpose;</entry></row>
<row><entry><sgmltag>Primary</sgmltag></entry><entry>&primary.purpose;</entry></row>
<row><entry><sgmltag>PrimaryIE</sgmltag></entry><entry>&primaryie.purpose;</entry></row>
<row><entry><sgmltag>PrintHistory</sgmltag></entry><entry>&printhistory.purpose;</entry></row>
<row><entry><sgmltag>Procedure</sgmltag></entry><entry>&procedure.purpose;</entry></row>
<row><entry><sgmltag>ProductName</sgmltag></entry><entry>&productname.purpose;</entry></row>
<row><entry><sgmltag>ProductNumber</sgmltag></entry><entry>&productnumber.purpose;</entry></row>
<row><entry><sgmltag>ProgramListing</sgmltag></entry><entry>&programlisting.purpose;</entry></row>
<row><entry><sgmltag>ProgramListingCO</sgmltag></entry><entry>&programlistingco.purpose;</entry></row>
<row><entry><sgmltag>Prompt</sgmltag></entry><entry>&prompt.purpose;</entry></row>
<row><entry><sgmltag>Property</sgmltag></entry><entry>&property.purpose;</entry></row>
<row><entry><sgmltag>PubDate</sgmltag></entry><entry>&pubdate.purpose;</entry></row>
<row><entry><sgmltag>Publisher</sgmltag></entry><entry>&publisher.purpose;</entry></row>
<row><entry><sgmltag>PublisherName</sgmltag></entry><entry>&publishername.purpose;</entry></row>
<row><entry><sgmltag>PubsNumber</sgmltag></entry><entry>&pubsnumber.purpose;</entry></row>
<row><entry><sgmltag>QandADiv</sgmltag></entry><entry>&qandadiv.purpose;</entry></row>
<row><entry><sgmltag>QandAEntry</sgmltag></entry><entry>&qandaentry.purpose;</entry></row>
<row><entry><sgmltag>QandASet</sgmltag></entry><entry>&qandaset.purpose;</entry></row>
<row><entry><sgmltag>Question</sgmltag></entry><entry>&question.purpose;</entry></row>
<row><entry><sgmltag>Quote</sgmltag></entry><entry>&quote.purpose;</entry></row>
<row><entry><sgmltag>RefClass</sgmltag></entry><entry>&refclass.purpose;</entry></row>
<row><entry><sgmltag>RefDescriptor</sgmltag></entry><entry>&refdescriptor.purpose;</entry></row>
<row><entry><sgmltag>RefEntry</sgmltag></entry><entry>&refentry.purpose;</entry></row>
<row><entry><sgmltag>RefEntryTitle</sgmltag></entry><entry>&refentrytitle.purpose;</entry></row>
<row><entry><sgmltag>RefMeta</sgmltag></entry><entry>&refmeta.purpose;</entry></row>
<row><entry><sgmltag>RefMiscInfo</sgmltag></entry><entry>&refmiscinfo.purpose;</entry></row>
<row><entry><sgmltag>RefName</sgmltag></entry><entry>&refname.purpose;</entry></row>
<row><entry><sgmltag>RefNameDiv</sgmltag></entry><entry>&refnamediv.purpose;</entry></row>
<row><entry><sgmltag>RefPurpose</sgmltag></entry><entry>&refpurpose.purpose;</entry></row>
<row><entry><sgmltag>RefSect1</sgmltag></entry><entry>&refsect1.purpose;</entry></row>
<row><entry><sgmltag>RefSect1Info</sgmltag></entry><entry>&refsect1info.purpose;</entry></row>
<row><entry><sgmltag>RefSect2</sgmltag></entry><entry>&refsect2.purpose;</entry></row>
<row><entry><sgmltag>RefSect2Info</sgmltag></entry><entry>&refsect2info.purpose;</entry></row>
<row><entry><sgmltag>RefSect3</sgmltag></entry><entry>&refsect3.purpose;</entry></row>
<row><entry><sgmltag>RefSect3Info</sgmltag></entry><entry>&refsect3info.purpose;</entry></row>
<row><entry><sgmltag>RefSynopsisDiv</sgmltag></entry><entry>&refsynopsisdiv.purpose;</entry></row>
<row><entry><sgmltag>RefSynopsisDivInfo</sgmltag></entry><entry>&refsynopsisdivinfo.purpose;</entry></row>
<row><entry><sgmltag>Reference</sgmltag></entry><entry>&reference.purpose;</entry></row>
<row><entry><sgmltag>ReleaseInfo</sgmltag></entry><entry>&releaseinfo.purpose;</entry></row>
<row><entry><sgmltag>Replaceable</sgmltag></entry><entry>&replaceable.purpose;</entry></row>
<row><entry><sgmltag>ReturnValue</sgmltag></entry><entry>&returnvalue.purpose;</entry></row>
<row><entry><sgmltag>RevHistory</sgmltag></entry><entry>&revhistory.purpose;</entry></row>
<row><entry><sgmltag>RevNumber</sgmltag></entry><entry>&revnumber.purpose;</entry></row>
<row><entry><sgmltag>RevRemark</sgmltag></entry><entry>&revremark.purpose;</entry></row>
<row><entry><sgmltag>Revision</sgmltag></entry><entry>&revision.purpose;</entry></row>
<row><entry><sgmltag>Row</sgmltag></entry><entry>&row.purpose;</entry></row>
<row><entry><sgmltag>SBR</sgmltag></entry><entry>&sbr.purpose;</entry></row>
<row><entry><sgmltag>SGMLTag</sgmltag></entry><entry>&sgmltag.purpose;</entry></row>
<row><entry><sgmltag>Screen</sgmltag></entry><entry>&screen.purpose;</entry></row>
<row><entry><sgmltag>ScreenCO</sgmltag></entry><entry>&screenco.purpose;</entry></row>
<row><entry><sgmltag>ScreenInfo</sgmltag></entry><entry>&screeninfo.purpose;</entry></row>
<row><entry><sgmltag>ScreenShot</sgmltag></entry><entry>&screenshot.purpose;</entry></row>
<row><entry><sgmltag>Secondary</sgmltag></entry><entry>&secondary.purpose;</entry></row>
<row><entry><sgmltag>SecondaryIE</sgmltag></entry><entry>&secondaryie.purpose;</entry></row>
<row><entry><sgmltag>Sect1</sgmltag></entry><entry>&sect1.purpose;</entry></row>
<row><entry><sgmltag>Sect1Info</sgmltag></entry><entry>&sect1info.purpose;</entry></row>
<row><entry><sgmltag>Sect2</sgmltag></entry><entry>&sect2.purpose;</entry></row>
<row><entry><sgmltag>Sect2Info</sgmltag></entry><entry>&sect2info.purpose;</entry></row>
<row><entry><sgmltag>Sect3</sgmltag></entry><entry>&sect3.purpose;</entry></row>
<row><entry><sgmltag>Sect3Info</sgmltag></entry><entry>&sect3info.purpose;</entry></row>
<row><entry><sgmltag>Sect4</sgmltag></entry><entry>&sect4.purpose;</entry></row>
<row><entry><sgmltag>Sect4Info</sgmltag></entry><entry>&sect4info.purpose;</entry></row>
<row><entry><sgmltag>Sect5</sgmltag></entry><entry>&sect5.purpose;</entry></row>
<row><entry><sgmltag>Sect5Info</sgmltag></entry><entry>&sect5info.purpose;</entry></row>
<row><entry><sgmltag>Section</sgmltag></entry><entry>&section.purpose;</entry></row>
<row><entry><sgmltag>SectionInfo</sgmltag></entry><entry>&sectioninfo.purpose;</entry></row>
<row><entry><sgmltag>See</sgmltag></entry><entry>&see.purpose;</entry></row>
<row><entry><sgmltag>SeeAlso</sgmltag></entry><entry>&seealso.purpose;</entry></row>
<row><entry><sgmltag>SeeAlsoIE</sgmltag></entry><entry>&seealsoie.purpose;</entry></row>
<row><entry><sgmltag>SeeIE</sgmltag></entry><entry>&seeie.purpose;</entry></row>
<row><entry><sgmltag>Seg</sgmltag></entry><entry>&seg.purpose;</entry></row>
<row><entry><sgmltag>SegListItem</sgmltag></entry><entry>&seglistitem.purpose;</entry></row>
<row><entry><sgmltag>SegTitle</sgmltag></entry><entry>&segtitle.purpose;</entry></row>
<row><entry><sgmltag>SegmentedList</sgmltag></entry><entry>&segmentedlist.purpose;</entry></row>
<row><entry><sgmltag>SeriesInfo</sgmltag></entry><entry>&seriesinfo.purpose;</entry></row>
<row><entry><sgmltag>SeriesVolNums</sgmltag></entry><entry>&seriesvolnums.purpose;</entry></row>
<row><entry><sgmltag>Set</sgmltag></entry><entry>&set.purpose;</entry></row>
<row><entry><sgmltag>SetIndex</sgmltag></entry><entry>&setindex.purpose;</entry></row>
<row><entry><sgmltag>SetInfo</sgmltag></entry><entry>&setinfo.purpose;</entry></row>
<row><entry><sgmltag>ShortAffil</sgmltag></entry><entry>&shortaffil.purpose;</entry></row>
<row><entry><sgmltag>Shortcut</sgmltag></entry><entry>&shortcut.purpose;</entry></row>
<row><entry><sgmltag>Sidebar</sgmltag></entry><entry>&sidebar.purpose;</entry></row>
<row><entry><sgmltag>SimPara</sgmltag></entry><entry>&simpara.purpose;</entry></row>
<row><entry><sgmltag>SimpleList</sgmltag></entry><entry>&simplelist.purpose;</entry></row>
<row><entry><sgmltag>SimpleSect</sgmltag></entry><entry>&simplesect.purpose;</entry></row>
<row><entry><sgmltag>SpanSpec</sgmltag></entry><entry>&spanspec.purpose;</entry></row>
<row><entry><sgmltag>State</sgmltag></entry><entry>&state.purpose;</entry></row>
<row><entry><sgmltag>Step</sgmltag></entry><entry>&step.purpose;</entry></row>
<row><entry><sgmltag>Street</sgmltag></entry><entry>&street.purpose;</entry></row>
<row><entry><sgmltag>StructField</sgmltag></entry><entry>&structfield.purpose;</entry></row>
<row><entry><sgmltag>StructName</sgmltag></entry><entry>&structname.purpose;</entry></row>
<row><entry><sgmltag>SubSteps</sgmltag></entry><entry>&substeps.purpose;</entry></row>
<row><entry><sgmltag>Subject</sgmltag></entry><entry>&subject.purpose;</entry></row>
<row><entry><sgmltag>SubjectSet</sgmltag></entry><entry>&subjectset.purpose;</entry></row>
<row><entry><sgmltag>SubjectTerm</sgmltag></entry><entry>&subjectterm.purpose;</entry></row>
<row><entry><sgmltag>Subscript</sgmltag></entry><entry>&subscript.purpose;</entry></row>
<row><entry><sgmltag>Subtitle</sgmltag></entry><entry>&subtitle.purpose;</entry></row>
<row><entry><sgmltag>Superscript</sgmltag></entry><entry>&superscript.purpose;</entry></row>
<row><entry><sgmltag>Surname</sgmltag></entry><entry>&surname.purpose;</entry></row>
<row><entry><sgmltag>Symbol</sgmltag></entry><entry>&symbol.purpose;</entry></row>
<row><entry><sgmltag>SynopFragment</sgmltag></entry><entry>&synopfragment.purpose;</entry></row>
<row><entry><sgmltag>SynopFragmentRef</sgmltag></entry><entry>&synopfragmentref.purpose;</entry></row>
<row><entry><sgmltag>Synopsis</sgmltag></entry><entry>&synopsis.purpose;</entry></row>
<row><entry><sgmltag>SystemItem</sgmltag></entry><entry>&systemitem.purpose;</entry></row>
<row><entry><sgmltag>TBody</sgmltag></entry><entry>&tbody.purpose;</entry></row>
<row><entry><sgmltag>TFoot</sgmltag></entry><entry>&tfoot.purpose;</entry></row>
<row><entry><sgmltag>TGroup</sgmltag></entry><entry>&tgroup.purpose;</entry></row>
<row><entry><sgmltag>THead</sgmltag></entry><entry>&thead.purpose;</entry></row>
<row><entry><sgmltag>Table</sgmltag></entry><entry>&table.purpose;</entry></row>
<row><entry><sgmltag>Term</sgmltag></entry><entry>&term.purpose;</entry></row>
<row><entry><sgmltag>Tertiary</sgmltag></entry><entry>&tertiary.purpose;</entry></row>
<row><entry><sgmltag>TertiaryIE</sgmltag></entry><entry>&tertiaryie.purpose;</entry></row>
<row><entry><sgmltag>TextObject</sgmltag></entry><entry>&textobject.purpose;</entry></row>
<row><entry><sgmltag>Tip</sgmltag></entry><entry>&tip.purpose;</entry></row>
<row><entry><sgmltag>Title</sgmltag></entry><entry>&title.purpose;</entry></row>
<row><entry><sgmltag>TitleAbbrev</sgmltag></entry><entry>&titleabbrev.purpose;</entry></row>
<row><entry><sgmltag>ToC</sgmltag></entry><entry>&toc.purpose;</entry></row>
<row><entry><sgmltag>ToCback</sgmltag></entry><entry>&tocback.purpose;</entry></row>
<row><entry><sgmltag>ToCchap</sgmltag></entry><entry>&tocchap.purpose;</entry></row>
<row><entry><sgmltag>ToCentry</sgmltag></entry><entry>&tocentry.purpose;</entry></row>
<row><entry><sgmltag>ToCfront</sgmltag></entry><entry>&tocfront.purpose;</entry></row>
<row><entry><sgmltag>ToClevel1</sgmltag></entry><entry>&toclevel1.purpose;</entry></row>
<row><entry><sgmltag>ToClevel2</sgmltag></entry><entry>&toclevel2.purpose;</entry></row>
<row><entry><sgmltag>ToClevel3</sgmltag></entry><entry>&toclevel3.purpose;</entry></row>
<row><entry><sgmltag>ToClevel4</sgmltag></entry><entry>&toclevel4.purpose;</entry></row>
<row><entry><sgmltag>ToClevel5</sgmltag></entry><entry>&toclevel5.purpose;</entry></row>
<row><entry><sgmltag>ToCpart</sgmltag></entry><entry>&tocpart.purpose;</entry></row>
<row><entry><sgmltag>Token</sgmltag></entry><entry>&token.purpose;</entry></row>
<row><entry><sgmltag>Trademark</sgmltag></entry><entry>&trademark.purpose;</entry></row>
<row><entry><sgmltag>Type</sgmltag></entry><entry>&type.purpose;</entry></row>
<row><entry><sgmltag>ULink</sgmltag></entry><entry>&ulink.purpose;</entry></row>
<row><entry><sgmltag>UserInput</sgmltag></entry><entry>&userinput.purpose;</entry></row>
<row><entry><sgmltag>VarArgs</sgmltag></entry><entry>&varargs.purpose;</entry></row>
<row><entry><sgmltag>VarListEntry</sgmltag></entry><entry>&varlistentry.purpose;</entry></row>
<row><entry><sgmltag>VarName</sgmltag></entry><entry>&varname.purpose;</entry></row>
<row><entry><sgmltag>VariableList</sgmltag></entry><entry>&variablelist.purpose;</entry></row>
<row><entry><sgmltag>VideoData</sgmltag></entry><entry>&videodata.purpose;</entry></row>
<row><entry><sgmltag>VideoObject</sgmltag></entry><entry>&videoobject.purpose;</entry></row>
<row><entry><sgmltag>Void</sgmltag></entry><entry>&void.purpose;</entry></row>
<row><entry><sgmltag>VolumeNum</sgmltag></entry><entry>&volumenum.purpose;</entry></row>
<row><entry><sgmltag>Warning</sgmltag></entry><entry>&warning.purpose;</entry></row>
<row><entry><sgmltag>WordAsWord</sgmltag></entry><entry>&wordasword.purpose;</entry></row>
<row><entry><sgmltag>XRef</sgmltag></entry><entry>&xref.purpose;</entry></row>
<row><entry><sgmltag>Year</sgmltag></entry><entry>&year.purpose;</entry></row>
</tbody>
</tgroup>
</informaltable>

</section>

<section><title>DocBook <acronym>V4.1.2</acronym></title>

<para>All of the elements in DocBook V3.1 <emphasis>except</emphasis>
<simplelist type="inline">
<member><sgmltag>ArtHeader</sgmltag></member>
<member><sgmltag>BookBiblio</sgmltag></member>
<member><sgmltag>Comment</sgmltag></member>
<member><sgmltag>DocInfo</sgmltag></member>
<member><sgmltag>InterfaceDefinition</sgmltag></member>
<member><sgmltag>SeriesInfo</sgmltag></member>
</simplelist> plus the following additional elements:</para>

<informaltable>
<tgroup cols="2">
<colspec colnum="1" colwidth="1.25in"/>
<colspec colnum="2" colwidth="3.75in"/>
<thead>
<row><entry>Element</entry><entry>Brief Description</entry></row>
</thead>
<tbody>
<row>
  <entry><sgmltag>appendixinfo</sgmltag></entry>
  <entry>&appendixinfo.purpose;</entry>
</row>
<row>
  <entry><sgmltag>articleinfo</sgmltag></entry>
  <entry>&articleinfo.purpose;</entry>
</row>
<row>
  <entry><sgmltag>bibliographyinfo</sgmltag></entry>
  <entry>&bibliographyinfo.purpose;</entry>
</row>
<row>
  <entry><sgmltag>chapterinfo</sgmltag></entry>
  <entry>&chapterinfo.purpose;</entry>
</row>
<row>
  <entry><sgmltag>classsynopsis</sgmltag></entry>
  <entry>&classsynopsis.purpose;</entry>
</row>
<row>
  <entry><sgmltag>classsynopsisinfo</sgmltag></entry>
  <entry>&classsynopsisinfo.purpose;</entry>
</row>
<row>
  <entry><sgmltag>constructorsynopsis</sgmltag></entry>
  <entry>&constructorsynopsis.purpose;</entry>
</row>
<row>
  <entry><sgmltag>destructorsynopsis</sgmltag></entry>
  <entry>&destructorsynopsis.purpose;</entry>
</row>
<row>
  <entry><sgmltag>exceptionname</sgmltag></entry>
  <entry>&exceptionname.purpose;</entry>
</row>
<row>
  <entry><sgmltag>fieldsynopsis</sgmltag></entry>
  <entry>&fieldsynopsis.purpose;</entry>
</row>
<row>
  <entry><sgmltag>glossaryinfo</sgmltag></entry>
  <entry>&glossaryinfo.purpose;</entry>
</row>
<row>
  <entry><sgmltag>indexinfo</sgmltag></entry>
  <entry>&indexinfo.purpose;</entry>
</row>
<row>
  <entry><sgmltag>initializer</sgmltag></entry>
  <entry>&initializer.purpose;</entry>
</row>
<row>
  <entry><sgmltag>interfacename</sgmltag></entry>
  <entry>&interfacename.purpose;</entry>
</row>
<row>
  <entry><sgmltag>methodname</sgmltag></entry>
  <entry>&methodname.purpose;</entry>
</row>
<row>
  <entry><sgmltag>methodparam</sgmltag></entry>
  <entry>&methodparam.purpose;</entry>
</row>
<row>
  <entry><sgmltag>methodsynopsis</sgmltag></entry>
  <entry>&methodsynopsis.purpose;</entry>
</row>
<row>
  <entry><sgmltag>modifier</sgmltag></entry>
  <entry>&modifier.purpose;</entry>
</row>
<row>
  <entry><sgmltag>ooclass</sgmltag></entry>
  <entry>&ooclass.purpose;</entry>
</row>
<row>
  <entry><sgmltag>ooexception</sgmltag></entry>
  <entry>&ooexception.purpose;</entry>
</row>
<row>
  <entry><sgmltag>oointerface</sgmltag></entry>
  <entry>&oointerface.purpose;</entry>
</row>
<row>
  <entry><sgmltag>partinfo</sgmltag></entry>
  <entry>&partinfo.purpose;</entry>
</row>
<row>
  <entry><sgmltag>prefaceinfo</sgmltag></entry>
  <entry>&prefaceinfo.purpose;</entry>
</row>
<row>
  <entry><sgmltag>refentryinfo</sgmltag></entry>
  <entry>&refentryinfo.purpose;</entry>
</row>
<row>
  <entry><sgmltag>referenceinfo</sgmltag></entry>
  <entry>&referenceinfo.purpose;</entry>
</row>
<row>
  <entry><sgmltag>remark</sgmltag></entry>
  <entry>&remark.purpose;</entry>
</row>
<row>
  <entry><sgmltag>revdescription</sgmltag></entry>
  <entry>&revdescription.purpose;</entry>
</row>
<row>
  <entry><sgmltag>setindexinfo</sgmltag></entry>
  <entry>&setindexinfo.purpose;</entry>
</row>
<row>
  <entry><sgmltag>sidebarinfo</sgmltag></entry>
  <entry>&sidebarinfo.purpose;</entry>
</row>
<row>
  <entry><sgmltag>simplemsgentry</sgmltag></entry>
  <entry>&simplemsgentry.purpose;</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>
<section><title>DocBook <acronym>EBNF</acronym> Module V1.0</title>

<para>The following elements in addition to the elements in the version
of DocBook to which this module is added:</para>

<informaltable>
<tgroup cols="2">
<colspec colnum="1" colwidth="1.25in"/>
<colspec colnum="2" colwidth="3.75in"/>
<thead>
<row><entry>Element</entry><entry>Brief Description</entry></row>
</thead>
<tbody>
<row>
  <entry><sgmltag>constraint</sgmltag></entry>
  <entry>&constraint.purpose;</entry>
</row>
<row>
  <entry><sgmltag>constraintdef</sgmltag></entry>
  <entry>&constraintdef.purpose;</entry>
</row>
<row>
  <entry><sgmltag>lhs</sgmltag></entry>
  <entry>&lhs.purpose;</entry>
</row>
<row>
  <entry><sgmltag>nonterminal</sgmltag></entry>
  <entry>&nonterminal.purpose;</entry>
</row>
<row>
  <entry><sgmltag>production</sgmltag></entry>
  <entry>&production.purpose;</entry>
</row>
<row>
  <entry><sgmltag>productionrecap</sgmltag></entry>
  <entry>&productionrecap.purpose;</entry>
</row>
<row>
  <entry><sgmltag>productionset</sgmltag></entry>
  <entry>&productionset.purpose;</entry>
</row>
<row>
  <entry><sgmltag>rhs</sgmltag></entry>
  <entry>&rhs.purpose;</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>
<section><title>DocBook HTML Forms Module V1.0</title>

<para>The <link linkend="htmlforms.module">HTML Forms Module</link> adds
the HTML <sgmltag>Form</sgmltag> element and related elements.
</para>

</section>

<section><title>DocBook MathML Module V1.0</title>

<para>The <link linkend="mathml.module">MathML Module</link> adds
the elements from the MathML namespace.
</para>

</section>

<section><title>DocBook SVG Module V1.0</title>

<para>The <link linkend="svg.module">SVG Module</link> adds
the elements from the SVG namespace.
</para>

</section>

</appendix>

<!--
Local Variables:
mode:sgml
sgml-parent-document: ("book.xml" "appendix")
End:
-->
<appendix id="gfdl">
<title>GNU Free Documentation License</title>

    <para>Version 1.1, March 2000</para>

    <blockquote>
      <para>Copyright (C) 2000  Free Software Foundation, Inc.
59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.</para>
    </blockquote>

  <sect1 label="0">
    <title>PREAMBLE</title>

    <para>The purpose of this License is to make a manual, textbook,
    or other written document "free" in the sense of freedom: to
    assure everyone the effective freedom to copy and redistribute it,
    with or without modifying it, either commercially or
    noncommercially.  Secondarily, this License preserves for the
    author and publisher a way to get credit for their work, while not
    being considered responsible for modifications made by
    others.</para>

    <para>This License is a kind of "copyleft", which means that
    derivative works of the document must themselves be free in the
    same sense.  It complements the GNU General Public License, which
    is a copyleft license designed for free software.</para>

    <para>We have designed this License in order to use it for manuals
    for free software, because free software needs free documentation:
    a free program should come with manuals providing the same
    freedoms that the software does.  But this License is not limited
    to software manuals; it can be used for any textual work,
    regardless of subject matter or whether it is published as a
    printed book.  We recommend this License principally for works
    whose purpose is instruction or reference.</para>
  </sect1>

  <sect1 label="1">
    <title>APPLICABILITY AND DEFINITIONS</title>

    <para>This License applies to any manual or other work that
    contains a notice placed by the copyright holder saying it can be
    distributed under the terms of this License.  The "Document",
    below, refers to any such manual or work.  Any member of the
    public is a licensee, and is addressed as "you".</para>

    <para>A "Modified Version" of the Document means any work
    containing the Document or a portion of it, either copied
    verbatim, or with modifications and/or translated into another
    language.</para>

    <para>A "Secondary Section" is a named appendix or a front-matter
    section of the Document that deals exclusively with the
    relationship of the publishers or authors of the Document to the
    Document's overall subject (or to related matters) and contains
    nothing that could fall directly within that overall subject.
    (For example, if the Document is in part a textbook of
    mathematics, a Secondary Section may not explain any mathematics.)
    The relationship could be a matter of historical connection with
    the subject or with related matters, or of legal, commercial,
    philosophical, ethical or political position regarding
    them.</para>

    <para>The "Invariant Sections" are certain Secondary Sections
    whose titles are designated, as being those of Invariant Sections,
    in the notice that says that the Document is released under this
    License.</para>

    <para>The "Cover Texts" are certain short passages of text that
    are listed, as Front-Cover Texts or Back-Cover Texts, in the
    notice that says that the Document is released under this
    License.</para>

    <para>A "Transparent" copy of the Document means a
    machine-readable copy, represented in a format whose specification
    is available to the general public, whose contents can be viewed
    and edited directly and straightforwardly with generic text
    editors or (for images composed of pixels) generic paint programs
    or (for drawings) some widely available drawing editor, and that
    is suitable for input to text formatters or for automatic
    translation to a variety of formats suitable for input to text
    formatters.  A copy made in an otherwise Transparent file format
    whose markup has been designed to thwart or discourage subsequent
    modification by readers is not Transparent.  A copy that is not
    "Transparent" is called "Opaque".</para>

    <para>Examples of suitable formats for Transparent copies include
    plain ASCII without markup, Texinfo input format, LaTeX input
    format, SGML or XML using a publicly available DTD, and
    standard-conforming simple HTML designed for human modification.
    Opaque formats include PostScript, PDF, proprietary formats that
    can be read and edited only by proprietary word processors, SGML
    or XML for which the DTD and/or processing tools are not generally
    available, and the machine-generated HTML produced by some word
    processors for output purposes only.</para>

    <para>The "Title Page" means, for a printed book, the title page
    itself, plus such following pages as are needed to hold, legibly,
    the material this License requires to appear in the title page.
    For works in formats which do not have any title page as such,
    "Title Page" means the text near the most prominent appearance of
    the work's title, preceding the beginning of the body of the
    text.</para>
  </sect1>

  <sect1 label="2">
    <title>VERBATIM COPYING</title>

    <para>You may copy and distribute the Document in any medium,
    either commercially or noncommercially, provided that this
    License, the copyright notices, and the license notice saying this
    License applies to the Document are reproduced in all copies, and
    that you add no other conditions whatsoever to those of this
    License.  You may not use technical measures to obstruct or
    control the reading or further copying of the copies you make or
    distribute.  However, you may accept compensation in exchange for
    copies.  If you distribute a large enough number of copies you
    must also follow the conditions in section 3.</para>

    <para>You may also lend copies, under the same conditions stated
    above, and you may publicly display copies.</para>
  </sect1>

  <sect1 label="3">
    <title>COPYING IN QUANTITY</title>

    <para>If you publish printed copies of the Document numbering more
    than 100, and the Document's license notice requires Cover Texts,
    you must enclose the copies in covers that carry, clearly and
    legibly, all these Cover Texts: Front-Cover Texts on the front
    cover, and Back-Cover Texts on the back cover.  Both covers must
    also clearly and legibly identify you as the publisher of these
    copies.  The front cover must present the full title with all
    words of the title equally prominent and visible.  You may add
    other material on the covers in addition.  Copying with changes
    limited to the covers, as long as they preserve the title of the
    Document and satisfy these conditions, can be treated as verbatim
    copying in other respects.</para>

    <para>If the required texts for either cover are too voluminous to
    fit legibly, you should put the first ones listed (as many as fit
    reasonably) on the actual cover, and continue the rest onto
    adjacent pages.</para>

    <para>If you publish or distribute Opaque copies of the Document
    numbering more than 100, you must either include a
    machine-readable Transparent copy along with each Opaque copy, or
    state in or with each Opaque copy a publicly-accessible
    computer-network location containing a complete Transparent copy
    of the Document, free of added material, which the general
    network-using public has access to download anonymously at no
    charge using public-standard network protocols.  If you use the
    latter option, you must take reasonably prudent steps, when you
    begin distribution of Opaque copies in quantity, to ensure that
    this Transparent copy will remain thus accessible at the stated
    location until at least one year after the last time you
    distribute an Opaque copy (directly or through your agents or
    retailers) of that edition to the public.</para>

    <para>It is requested, but not required, that you contact the
    authors of the Document well before redistributing any large
    number of copies, to give them a chance to provide you with an
    updated version of the Document.</para>
  </sect1>

  <sect1 label="4">
    <title>MODIFICATIONS</title>

    <para>You may copy and distribute a Modified Version of the
    Document under the conditions of sections 2 and 3 above, provided
    that you release the Modified Version under precisely this
    License, with the Modified Version filling the role of the
    Document, thus licensing distribution and modification of the
    Modified Version to whoever possesses a copy of it.  In addition,
    you must do these things in the Modified Version:</para>

    <orderedlist numeration="upperalpha">
      <listitem><para>Use in the Title Page
      (and on the covers, if any) a title distinct from that of the
      Document, and from those of previous versions (which should, if
      there were any, be listed in the History section of the
      Document).  You may use the same title as a previous version if
      the original publisher of that version gives permission.</para>
      </listitem>

      <listitem><para>List on the Title Page,
      as authors, one or more persons or entities responsible for
      authorship of the modifications in the Modified Version,
      together with at least five of the principal authors of the
      Document (all of its principal authors, if it has less than
      five).</para>
      </listitem>

      <listitem><para>State on the Title page
      the name of the publisher of the Modified Version, as the
      publisher.</para>
      </listitem>

      <listitem><para>Preserve all the
      copyright notices of the Document.</para>
      </listitem>

      <listitem><para>Add an appropriate
      copyright notice for your modifications adjacent to the other
      copyright notices.</para>
      </listitem>

      <listitem><para>Include, immediately
      after the copyright notices, a license notice giving the public
      permission to use the Modified Version under the terms of this
      License, in the form shown in the Addendum below.</para>
      </listitem>

      <listitem><para>Preserve in that license
      notice the full lists of Invariant Sections and required Cover
      Texts given in the Document's license notice.</para>
      </listitem>

      <listitem><para>Include an unaltered
      copy of this License.</para>
      </listitem>

      <listitem><para>Preserve the section
      entitled "History", and its title, and add to it an item stating
      at least the title, year, new authors, and publisher of the
      Modified Version as given on the Title Page.  If there is no
      section entitled "History" in the Document, create one stating
      the title, year, authors, and publisher of the Document as given
      on its Title Page, then add an item describing the Modified
      Version as stated in the previous sentence.</para>
      </listitem>

      <listitem><para>Preserve the network
      location, if any, given in the Document for public access to a
      Transparent copy of the Document, and likewise the network
      locations given in the Document for previous versions it was
      based on.  These may be placed in the "History" section.  You
      may omit a network location for a work that was published at
      least four years before the Document itself, or if the original
      publisher of the version it refers to gives permission.</para>
      </listitem>

      <listitem><para>In any section entitled
      "Acknowledgements" or "Dedications", preserve the section's
      title, and preserve in the section all the substance and tone of
      each of the contributor acknowledgements and/or dedications
      given therein.</para>
      </listitem>

      <listitem><para>Preserve all the
      Invariant Sections of the Document, unaltered in their text and
      in their titles.  Section numbers or the equivalent are not
      considered part of the section titles.</para>
      </listitem>

      <listitem><para>Delete any section
      entitled "Endorsements".  Such a section may not be included in
      the Modified Version.</para>
      </listitem>

      <listitem><para>Do not retitle any
      existing section as "Endorsements" or to conflict in title with
      any Invariant Section.</para>
      </listitem>
    </orderedlist>
    
    <para>If the Modified Version includes new front-matter sections
    or appendices that qualify as Secondary Sections and contain no
    material copied from the Document, you may at your option
    designate some or all of these sections as invariant.  To do this,
    add their titles to the list of Invariant Sections in the Modified
    Version's license notice.  These titles must be distinct from any
    other section titles.</para>

    <para>You may add a section entitled "Endorsements", provided it
    contains nothing but endorsements of your Modified Version by
    various parties--for example, statements of peer review or that
    the text has been approved by an organization as the authoritative
    definition of a standard.</para>

    <para>You may add a passage of up to five words as a Front-Cover
    Text, and a passage of up to 25 words as a Back-Cover Text, to the
    end of the list of Cover Texts in the Modified Version.  Only one
    passage of Front-Cover Text and one of Back-Cover Text may be
    added by (or through arrangements made by) any one entity.  If the
    Document already includes a cover text for the same cover,
    previously added by you or by arrangement made by the same entity
    you are acting on behalf of, you may not add another; but you may
    replace the old one, on explicit permission from the previous
    publisher that added the old one.</para>

    <para>The author(s) and publisher(s) of the Document do not by
    this License give permission to use their names for publicity for
    or to assert or imply endorsement of any Modified Version.</para>
  </sect1>

  <sect1 label="5">
    <title>COMBINING DOCUMENTS</title>

    <para>You may combine the Document with other documents released
    under this License, under the terms defined in section 4 above for
    modified versions, provided that you include in the combination
    all of the Invariant Sections of all of the original documents,
    unmodified, and list them all as Invariant Sections of your
    combined work in its license notice.</para>

    <para>The combined work need only contain one copy of this
    License, and multiple identical Invariant Sections may be replaced
    with a single copy.  If there are multiple Invariant Sections with
    the same name but different contents, make the title of each such
    section unique by adding at the end of it, in parentheses, the
    name of the original author or publisher of that section if known,
    or else a unique number.  Make the same adjustment to the section
    titles in the list of Invariant Sections in the license notice of
    the combined work.</para>

    <para>In the combination, you must combine any sections entitled
    "History" in the various original documents, forming one section
    entitled "History"; likewise combine any sections entitled
    "Acknowledgements", and any sections entitled "Dedications".  You
    must delete all sections entitled "Endorsements."</para>
  </sect1>

  <sect1 label="6">
    <title>COLLECTIONS OF DOCUMENTS</title>

    <para>You may make a collection consisting of the Document and
    other documents released under this License, and replace the
    individual copies of this License in the various documents with a
    single copy that is included in the collection, provided that you
    follow the rules of this License for verbatim copying of each of
    the documents in all other respects.</para>

    <para>You may extract a single document from such a collection,
    and distribute it individually under this License, provided you
    insert a copy of this License into the extracted document, and
    follow this License in all other respects regarding verbatim
    copying of that document.</para>
  </sect1>

  <sect1 label="7">
    <title>AGGREGATION WITH INDEPENDENT WORKS</title>
    
    <para>A compilation of the Document or its derivatives with other
    separate and independent documents or works, in or on a volume of
    a storage or distribution medium, does not as a whole count as a
    Modified Version of the Document, provided no compilation
    copyright is claimed for the compilation.  Such a compilation is
    called an "aggregate", and this License does not apply to the
    other self-contained works thus compiled with the Document, on
    account of their being thus compiled, if they are not themselves
    derivative works of the Document.</para>

    <para>If the Cover Text requirement of section 3 is applicable to
    these copies of the Document, then if the Document is less than
    one quarter of the entire aggregate, the Document's Cover Texts
    may be placed on covers that surround only the Document within the
    aggregate.  Otherwise they must appear on covers around the whole
    aggregate.</para>
  </sect1>

  <sect1 label="8">
    <title>TRANSLATION</title>

    <para>Translation is considered a kind of modification, so you may
    distribute translations of the Document under the terms of section
    4.  Replacing Invariant Sections with translations requires
    special permission from their copyright holders, but you may
    include translations of some or all Invariant Sections in addition
    to the original versions of these Invariant Sections.  You may
    include a translation of this License provided that you also
    include the original English version of this License.  In case of
    a disagreement between the translation and the original English
    version of this License, the original English version will
    prevail.</para>
  </sect1>

  <sect1 label="9">
    <title>TERMINATION</title>
    
    <para>You may not copy, modify, sublicense, or distribute the
    Document except as expressly provided for under this License.  Any
    other attempt to copy, modify, sublicense or distribute the
    Document is void, and will automatically terminate your rights
    under this License.  However, parties who have received copies, or
    rights, from you under this License will not have their licenses
    terminated so long as such parties remain in full
    compliance.</para>
  </sect1>

  <sect1 label="10">
    <title>FUTURE REVISIONS OF THIS LICENSE</title>

    <para>The Free Software Foundation may publish new, revised
    versions of the GNU Free Documentation License from time to time.
    Such new versions will be similar in spirit to the present
    version, but may differ in detail to address new problems or
    concerns.  See <ulink
    url="http://www.gnu.org/copyleft/">http://www.gnu.org/copyleft/</ulink>.</para>

    <para>Each version of the License is given a distinguishing
    version number.  If the Document specifies that a particular
    numbered version of this License "or any later version" applies to
    it, you have the option of following the terms and conditions
    either of that specified version or of any later version that has
    been published (not as a draft) by the Free Software Foundation.
    If the Document does not specify a version number of this License,
    you may choose any version ever published (not as a draft) by the
    Free Software Foundation.</para>
  </sect1>

  <sect1 label="">
    <title>How to use this License for your documents</title>

    <para>To use this License in a document you have written, include
    a copy of the License in the document and put the following
    copyright and license notices just after the title page:</para>

<blockquote><para>
      Copyright (c)  YEAR  YOUR NAME.
      Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.1
      or any later version published by the Free Software Foundation;
      with the Invariant Sections being LIST THEIR TITLES, with the
      Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
      A copy of the license is included in the section entitled "GNU
      Free Documentation License".
</para></blockquote>

    <para>If you have no Invariant Sections, write "with no Invariant
    Sections" instead of saying which ones are invariant.  If you have
    no Front-Cover Texts, write "no Front-Cover Texts" instead of
    "Front-Cover Texts being LIST"; likewise for Back-Cover
    Texts.</para>

    <para>If your document contains nontrivial examples of program
    code, we recommend releasing these examples in parallel under your
    choice of free software license, such as the GNU General Public
    License, to permit their use in free software.</para>
  </sect1>

</appendix>
<appendix id="changelog">
<?dbhtml filename="appi.html"?>
<appendixinfo>
<pubdate>$Date: 2006-02-17 00:11:15 +0300 (Пт, 17 фев 2006) $</pubdate>
<releaseinfo>$Revision: 5566 $</releaseinfo>
</appendixinfo>
<title>ChangeLog</title>

<para>This appendix details the changes made between versions.</para>

<section><title>Version 2.0.14: Changes since version 2.0.12 (2005-04-18)</title>

<para>I forgot to update the <citetitle>ChangeLog</citetitle> for
version 2.0.13. That's the difference between 2.0.13 and 2.0.14.
This change log is slightly abbreviated; there were hundreds of uninteresting
changes to generated files.</para>

<programlisting><![CDATA[Changes to en/*

  | 2006-02-16  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* Makefile, VERSION.xml: Updated for DocBook V4.5
  | 
  | 2005-11-12  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* ch04.xml: Fix some markup typos
  | 

Changes to en/entities/*

  | 2006-02-16  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* elements.e.ent, elements.ent, elements.u.ent, refpurps.ent:
  | 	  Updated for DocBook V4.5
  | 

Changes to en/refpages/*

  | 2006-02-16  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* intro.elements.xml, references.xml: Updated for DocBook V4.5
  | 

Changes to en/stylesheets/*

  | 2006-02-16  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* tdg.xsl: Updated for DocBook V4.5
  | 

Changes to en/build/bin/*

  | 2006-02-16  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* bash.paths, nutparse: Updated for DocBook V4.5
  | 

Changes to en/build/lib/*

  | 2006-02-16  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* ebnf-4.5.dtd.xml, refentry.pl: Updated for DocBook V4.5
  | 

Changes to en/figures/100dpi/*

  | 2006-02-16  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* rev_4.5.png: New file.
  | 

Changes to en/refpages/paraments/*

  | 2006-02-16  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* attlist.e.gen, attlist.u.gen, cals.e.gen, cals.u.gen,
  | 	  class.e.gen, class.u.gen, common.e.gen, common.u.gen,
  | 	  content.e.gen, content.u.gen, db.e.gen, db.u.gen,
  | 	  element.e.gen, element.u.gen, htmltables.e.gen,
  | 	  htmltables.u.gen, lattrib.e.gen, lattrib.u.gen, mix.e.gen,
  | 	  mix.u.gen, module.e.gen, module.u.gen, role.e.gen,
  | 	  role.u.gen: Updated for DocBook V4.5
  | 

Changes to en/refpages/elements/equation/*

  | 2006-02-16  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, entities.e.ent, entities.u.ent, example.2.gen,
  | 	  example.2.txt, example.2.xml, refentry.xml, synopsis.e.gen:
  | 	  Updated for DocBook V4.5
  | 

Changes to en/refpages/elements/mathphrase/*

  | 2006-02-16  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, entities.e.ent, entities.u.ent, example.1.gen,
  | 	  example.1.txt, example.1.xml, parents.gen, refentry.xml,
  | 	  reference.e.xml, reference.u.xml, synopsis.e.gen,
  | 	  synopsis.u.gen: New file.
  | 

Changes to en/refpages/elements/termdef/*

  | 2006-02-16  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, entities.e.ent, entities.u.ent, parents.gen,
  | 	  refentry.xml, reference.e.xml, reference.u.xml,
  | 	  synopsis.e.gen, synopsis.u.gen: New file.]]></programlisting>

</section>

<section><title>Version 2.0.12: Changes since version 2.0.10 (2004-05-19)</title>

<para>I forgot to update the <citetitle>ChangeLog</citetitle> for
version 2.0.11. That's the difference between 2.0.11 and 2.0.12.
This change log is slightly abbreviated; there were hundreds of uninteresting
changes to generated files.</para>

<programlisting><![CDATA[Changes to en/*

  | 2005-04-18  Jirka Kosek <kosek@users.sourceforge.net>
  | 
  | 	* makechm.bat: Updates to HTML Help processing
  | 
  | 2005-04-15  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* VERSION.xml: Version 2.0.11 Released
  | 
  | 	* ch02.xml: Fixed example
  | 
  | 	* unexbook.xml: Point at right DTD
  | 

Changes to en/entities/*

  | 2005-04-15  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* elements.e.ent, elements.ent, elements.u.ent, refpurps.ent:
  | 	  Added DocBook V4.4 entities
  | 

Changes to en/refpages/*

  | 2005-04-15  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* references.xml: Updated
  | 

Changes to en/schema/*

  | 2005-04-15  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* calstblx.dtd, catalog.xml, dbcentx.mod, dbebnf.dtd,
  | 	  dbgenent.mod, dbhierx.mod, dbnotnx.mod, dbpoolx.mod,
  | 	  docbook.cat, docbookx.dtd, htmltblx.mod, soextblx.dtd,
  | 	  tdg.dtd: Updated to DocBook V4.4
  | 

Changes to en/stylesheets/*

  | 2005-04-18  Jirka Kosek <kosek@users.sourceforge.net>
  | 
  | 	* htmlhelp.xsl: Updates to HTML Help processing
  | 
  | 2005-04-15  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* identity.xsl: Point to correct doctype
  | 
  | 	* tdg.xsl: Support revision=4.4
  | 

Changes to en/build/bin/*

  | 2005-04-15  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* bash.paths, nutparse: Updated for V4.4
  | 

Changes to en/build/lib/*

  | 2005-04-15  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* .cvsignore, alphalist.xsl, parament.classes: Updated for
  | 	  V4.4
  | 
  | 	* refentry.pl: Updated
  | 

Changes to en/figures/100dpi/*

  | 2005-04-15  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* rev_4.4.png: New file.
  | 

Changes to en/figures/300dpi/*

  | 2005-04-15  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* fermat.png: Fixed equation
  | 
  | 	* rev_4.4.png: New file.
  | 

Changes to en/refpages/paraments/*

  | 2005-04-15  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* attlist.e.gen, attlist.u.gen, attrib.e.gen, attrib.u.gen,
  | 	  cals.e.gen, cals.u.gen, class.e.gen, class.u.gen,
  | 	  common.e.gen, common.u.gen, content.e.gen, content.u.gen,
  | 	  db.e.gen, db.u.gen, element.e.gen, element.u.gen,
  | 	  htmltables.e.gen, htmltables.u.gen, iso.e.gen, iso.u.gen,
  | 	  lattrib.e.gen, lattrib.u.gen, mix.e.gen, mix.u.gen,
  | 	  module.e.gen, module.u.gen, role.e.gen, role.u.gen: Updated
  | 

[...]

Changes to en/refpages/elements/bibliolist/*

  | 2005-04-15  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, entities.e.ent, entities.u.ent, parents.gen,
  | 	  refentry.xml, reference.e.xml, reference.u.xml,
  | 	  synopsis.e.gen, synopsis.u.gen: New file.
  | 
  | 	* refentry.xml, synopsis.e.gen, synopsis.u.gen: Updated
  | 

Changes to en/refpages/elements/biblioref/*

  | 2005-04-15  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* entities.e.ent, entities.u.ent, parents.gen, refentry.xml,
  | 	  reference.e.xml, reference.u.xml, synopsis.e.gen,
  | 	  synopsis.u.gen: New file.
  | 
  | 	* refentry.xml, synopsis.e.gen, synopsis.u.gen: Updated
  | 

Changes to en/refpages/elements/package/*

  | 2005-04-15  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, entities.e.ent, entities.u.ent, parents.gen,
  | 	  refentry.xml, reference.e.xml, reference.u.xml,
  | 	  synopsis.e.gen, synopsis.u.gen: New file.
  | 
  | 	* refentry.xml, synopsis.e.gen, synopsis.u.gen: Updated]]></programlisting>
</section>

<section><title>Version 2.0.10: Changes since version 2.0.9 (2003-12-31)</title>

<programlisting><![CDATA[Changes to en/*

  | 2004-05-19  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* appi.xml: Fix the 2.0.9 changelog, add 2.0.10 changelog
  | 
  | 	* book.xml: Make a local copy of the reference schema
  | 
  | 	* ch04.xml: Added section on MIME type
  | 

Changes to en/stylesheets/*

  | 2004-05-19  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* dbv5.xsl, tdg.xsl: Hacking for V5/NG presentation
  | 
  | 	* html-titlepage.xml: Make attributes namespace-qualified per
  | 	  some change I made to the template system
  | 

Changes to en/schema/*

  | 2004-05-19  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* calstblx.dtd, catalog.xml, dbcentx.mod, dbebnf.dtd,
  | 	  dbgenent.mod, dbhierx.mod, dbnotnx.mod, dbpoolx.mod,
  | 	  docbook.cat, docbookx.dtd, htmltblx.mod, soextblx.dtd,
  | 	  tdg.dtd: New file.
  | 

Changes to en/build/bin/*

  | 2004-05-19  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* attrcheck: New file.
  | 

Changes to en/build/lib/*

  | 2004-05-19  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* docbook-rng.xml: New file.
  | 

Changes to en/refpages/elements/address/*

  | 2004-05-19  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* refentry.xml: First pass at some updates for V4.3
  | 

Changes to en/refpages/elements/code/*

  | 2004-05-19  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* refentry.xml: First pass at some updates for V4.3
  | 

Changes to en/refpages/elements/col/*

  | 2004-05-19  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* refentry.xml: First pass at some updates for V4.3
  | 

Changes to en/refpages/elements/colgroup/*

  | 2004-05-19  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* refentry.xml: First pass at some updates for V4.3
  | 

Changes to en/refpages/elements/corpcredit/*

  | 2004-05-19  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* refentry.xml: First pass at some updates for V4.3
  | 

Changes to en/refpages/elements/mediaobjectco/*

  | 2004-05-19  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* example.1.xml: Fixed misleading URI
  | 

Changes to en/refpages/elements/option/*

  | 2004-05-19  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* refentry.xml: First pass at some updates for V4.3
  | 

Changes to en/refpages/elements/orderedlist/*

  | 2004-05-19  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* refentry.xml: First pass at some updates for V4.3
  | 

Changes to en/refpages/elements/procedure/*

  | 2004-05-19  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* refentry.xml: First pass at some updates for V4.3
  | 

Changes to en/refpages/elements/stepalternatives/*

  | 2004-05-19  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* refentry.xml: First pass at some updates for V4.3
  | 

Changes to en/refpages/elements/task/*

  | 2004-05-19  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* refentry.xml: First pass at some updates for V4.3
  | 

Changes to en/refpages/elements/taskprerequisites/*

  | 2004-05-19  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* refentry.xml: First pass at some updates for V4.3
  | 

Changes to en/refpages/elements/taskrelated/*

  | 2004-05-19  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* refentry.xml: First pass at some updates for V4.3
  | 

Changes to en/refpages/elements/tasksummary/*

  | 2004-05-19  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* refentry.xml: First pass at some updates for V4.3
  | 

Changes to en/refpages/elements/td/*

  | 2004-05-19  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* refentry.xml: First pass at some updates for V4.3
  | 

Changes to en/refpages/elements/th/*

  | 2004-05-19  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* refentry.xml: First pass at some updates for V4.3
  | 

Changes to en/refpages/elements/tr/*

  | 2004-05-19  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* refentry.xml: First pass at some updates for V4.3
  | 

Changes to en/refpages/elements/ulink/*

  | 2004-05-19  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* refentry.xml: First pass at some updates for V4.3
  | 

Changes to en/refpages/elements/uri/*

  | 2004-05-19  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* refentry.xml: First pass at some updates for V4.3]]>
</programlisting>
</section>

<section><title>Version 2.0.9: Changes since version 2.0.8 (2003-01-01)</title>

<programlisting><![CDATA[Changes to en/*

  | 2003-12-31  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* .cvsignore: Ignore the tdgex.xml too
  | 
  | 	* .cvsignore: Ignore bookinfo.xml
  | 
  | 	* Makefile: Updates
  | 
  | 	* VERSION.xml: Version 2.0.9 released
  | 
  | 	* appi.xml: Added ChangeLog for 2.0.9; fixed metadata
  | 
  | 	* book.xml, unexbook.xml: Update to 4.3CR2
  | 
  | 	* bookinfo.xml: Built automatically from VERSION.xml
  | 
  | 	* legalnotice.xml: Now part of VERSION.xml
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* Makefile: Don't build the index twice by default
  | 
  | 	* Makefile, VERSION.xml, unexbook.xml: First attempt at
  | 	  building a V4.3 book
  | 
  | 2003-06-04  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* appd.xml, appe.xml: Fixed typo
  | 
  | 	* ch04.xml: Point to more up-to-date language list
  | 
  | 2003-01-25  Jirka Kosek <kosek@users.sourceforge.net>
  | 
  | 	* makechm.bat: Updated HTML Help generation. Character
  | 	  entities' images are now compiled into CHM.
  | 

Changes to en/entities/*

  | 2003-12-31  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* charents.ent: Remove character tables
  | 
  | 	* content.ent: Remove entities for VERSION.xml and
  | 	  legalnotice.xml
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* elements.e.ent, elements.ent, elements.u.ent, refpurps.ent:
  | 	  First attempt at building a V4.3 book
  | 

Changes to en/refpages/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* references.xml: First attempt at building a V4.3 book
  | 

Changes to en/stylesheets/*

  | 2003-12-31  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* dbv5.xsl: New file.
  | 
  | 	* tdg.xsl: Table presentation cleanup and optionally handle
  | 	  RNG code
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* identity.xsl, tdg.xsl: First attempt at building a V4.3 book
  | 
  | 2003-01-25  Jirka Kosek <kosek@users.sourceforge.net>
  | 
  | 	* htmlhelp.xsl: Updated HTML Help generation. Character
  | 	  entities' images are now compiled into CHM.
  | 

Changes to en/build/bin/*

  | 2003-12-31  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* bash.paths: Update to 4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* bash.paths, nutparse: First attempt at building a V4.3 book
  | 

Changes to en/build/lib/*

  | 2003-12-31  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* .cvsignore: Ignore db5doc.xml
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* .cvsignore, parament.classes, refentry.pl: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/figures/100dpi/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* fermat.png: Fix equation
  | 
  | 	* rev_4.3.png: New file.
  | 

Changes to en/figures/300dpi/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* rev_4.3.png: New file.
  | 

Changes to en/refpages/charents/*

  | 2003-12-31  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* iso-amsa.gen, iso-amsb.gen, iso-amsc.gen, iso-amsn.gen,
  | 	  iso-amso.gen, iso-amsr.gen, iso-box.gen, iso-cyr1.gen,
  | 	  iso-cyr2.gen, iso-dia.gen, iso-grk1.gen, iso-grk2.gen,
  | 	  iso-grk3.gen, iso-grk4.gen, iso-lat1.gen, iso-lat2.gen,
  | 	  iso-num.gen, iso-pub.gen, iso-tech.gen: Remove character
  | 	  table
  | 
  | 	* iso-amsa.xml, iso-amsb.xml, iso-amsc.xml, iso-amsn.xml,
  | 	  iso-amso.xml, iso-amsr.xml, iso-box.xml, iso-cyr1.xml,
  | 	  iso-cyr2.xml, iso-dia.xml, iso-grk1.xml, iso-grk2.xml,
  | 	  iso-grk3.xml, iso-grk4.xml, iso-lat1.xml, iso-lat2.xml,
  | 	  iso-num.xml, iso-pub.xml, iso-tech.xml: Remove character
  | 	  tables; point to W3C 2003/entities
  | 

Changes to en/refpages/notations/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* notations.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* notations.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/paraments/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* attlist.e.gen, attlist.u.gen, attrib.e.gen, attrib.u.gen,
  | 	  cals.e.gen, cals.u.gen, common.e.gen, common.u.gen,
  | 	  db.e.gen, db.u.gen, htmltables.e.gen, htmltables.u.gen,
  | 	  lattrib.e.gen, lattrib.u.gen, mix.e.gen, mix.u.gen,
  | 	  module.e.gen, module.u.gen, role.e.gen, role.u.gen: Updated
  | 	  to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* attlist.e.gen, attlist.u.gen, attrib.e.gen, attrib.u.gen,
  | 	  attval.e.gen, attval.u.gen, cals.e.gen, cals.u.gen,
  | 	  class.e.gen, class.u.gen, cmodule.e.gen, cmodule.u.gen,
  | 	  common.e.gen, common.u.gen, content.e.gen, content.u.gen,
  | 	  db.e.gen, db.u.gen, element.e.gen, element.u.gen,
  | 	  hook.e.gen, hook.u.gen, htmltables.e.gen, htmltables.u.gen,
  | 	  lattrib.e.gen, lattrib.u.gen, mix.e.gen, mix.u.gen,
  | 	  module.e.gen, module.u.gen, role.e.gen, role.u.gen: First
  | 	  attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/abbrev/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/abstract/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/acronym/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/action/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/address/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/anchor/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/appendix/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/appendixinfo/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/application/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/area/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: First attempt at building a
  | 	  V4.3 book
  | 
  | 2003-08-17  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* refentry.xml: Identify lower left corner
  | 

Changes to en/refpages/elements/areaset/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/arg/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 

Changes to en/refpages/elements/article/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/articleinfo/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/attribution/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/audiodata/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/author/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/authorblurb/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/authorgroup/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/authorinitials/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/beginpage/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/bibliocoverage/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/bibliodiv/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/biblioentry/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/bibliography/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/bibliographyinfo/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/bibliomisc/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/bibliomixed/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/bibliomset/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/bibliorelation/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/biblioset/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/blockinfo/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/blockquote/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen, synopsis.u.gen:
  | 	  First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/book/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/bookinfo/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, example.1.txt, synopsis.e.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/bridgehead/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/callout/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/calloutlist/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/caption/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/caution/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/chapter/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/chapterinfo/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/citation/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/citerefentry/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/citetitle/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen, synopsis.u.gen:
  | 	  First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/classname/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/classsynopsis/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/classsynopsisinfo/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/cmdsynopsis/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/co/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* entities.e.ent, entities.u.ent, example.1.gen,
  | 	  example.1.txt, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/code/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen, synopsis.e.gen, synopsis.u.gen: Updated to
  | 	  DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, entities.e.ent, entities.u.ent, parents.gen,
  | 	  refentry.xml, reference.e.xml, reference.u.xml,
  | 	  synopsis.e.gen, synopsis.u.gen: New file.
  | 

Changes to en/refpages/elements/col/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* entities.e.ent, entities.u.ent, parents.gen, refentry.xml,
  | 	  reference.e.xml, reference.u.xml, synopsis.e.gen,
  | 	  synopsis.u.gen: New file.
  | 

Changes to en/refpages/elements/colgroup/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, entities.e.ent, entities.u.ent, parents.gen,
  | 	  refentry.xml, reference.e.xml, reference.u.xml,
  | 	  synopsis.e.gen, synopsis.u.gen: New file.
  | 

Changes to en/refpages/elements/colspec/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/command/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/computeroutput/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/constant/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/constraintdef/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/constructorsynopsis/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/coref/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 

Changes to en/refpages/elements/corpauthor/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/corpcredit/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, entities.e.ent, entities.u.ent, parents.gen,
  | 	  refentry.xml, reference.e.xml, reference.u.xml,
  | 	  synopsis.e.gen, synopsis.u.gen: New file.
  | 

Changes to en/refpages/elements/database/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen, synopsis.u.gen:
  | 	  First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/destructorsynopsis/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/email/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/emphasis/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/entry/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/entrytbl/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/envar/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/epigraph/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/equation/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* example.1.gen, example.1.txt: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* example.1.gen, example.1.txt, parents.gen, synopsis.e.gen,
  | 	  synopsis.u.gen: First attempt at building a V4.3 book
  | 
  | 	* example.1.xml: Fix equation
  | 

Changes to en/refpages/elements/errorcode/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* example.1.gen, example.1.txt, parents.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/errorname/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/errortext/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/errortype/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/example/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/exceptionname/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/fieldsynopsis/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/figure/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* example.1.gen, example.1.txt, parents.gen, synopsis.e.gen,
  | 	  synopsis.u.gen: First attempt at building a V4.3 book
  | 
  | 2003-08-18  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* example.1.xml: Fix spelling error in title
  | 

Changes to en/refpages/elements/filename/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/firstterm/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen, synopsis.u.gen:
  | 	  Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/footnote/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/footnoteref/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen, synopsis.e.gen, synopsis.u.gen: Updated to
  | 	  DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/foreignphrase/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/formalpara/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/funcparams/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, example.1.gen, example.1.txt, synopsis.e.gen:
  | 	  First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/funcprototype/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/funcsynopsis/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/funcsynopsisinfo/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/function/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/glossary/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/glossaryinfo/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/glossdiv/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/glosslist/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen, synopsis.u.gen:
  | 	  First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/glosssee/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/glossseealso/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/glossterm/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/graphic/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/graphicco/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/group/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 

Changes to en/refpages/elements/guibutton/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/guiicon/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/guilabel/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/guimenu/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/guimenuitem/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/guisubmenu/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/hardware/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/highlights/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/imagedata/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/important/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/index/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/indexinfo/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/indexterm/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/informalequation/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/informalexample/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/informalfigure/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/informaltable/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen, synopsis.u.gen:
  | 	  First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/initializer/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/inlineequation/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/inlinegraphic/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/inlinemediaobject/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/interface/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/interfacename/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/itemizedlist/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/keycap/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen, synopsis.e.gen, synopsis.u.gen: Updated to
  | 	  DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen, synopsis.u.gen:
  | 	  First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/keycode/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/keycombo/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen, synopsis.e.gen, synopsis.u.gen: Updated to
  | 	  DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/keysym/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/lhs/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/lineannotation/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/link/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen, synopsis.u.gen:
  | 	  First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/listitem/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/literal/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/literallayout/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen, synopsis.u.gen:
  | 	  First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/lotentry/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/markup/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/medialabel/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/mediaobject/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/mediaobjectco/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/member/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/menuchoice/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/methodname/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/methodparam/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 

Changes to en/refpages/elements/methodsynopsis/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen, refentry.xml, synopsis.e.gen, synopsis.u.gen:
  | 	  First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/modespec/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/modifier/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/mousebutton/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/msgaud/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/msgexplan/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/msgset/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/msgtext/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/nonterminal/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/note/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/objectinfo/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/olink/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, example.1.txt, parents.gen, synopsis.e.gen,
  | 	  synopsis.u.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/ooclass/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/ooexception/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/oointerface/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/option/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/optional/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/orderedlist/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/orgname/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/othercredit/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/para/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/paramdef/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/parameter/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/part/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/partinfo/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/partintro/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/personname/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/phrase/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/preface/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/prefaceinfo/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/primary/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/primaryie/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/procedure/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/productionset/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* example.1.txt, parents.gen: First attempt at building a V4.3
  | 	  book
  | 
  | 2003-08-18  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* example.1.xml: Fix defs in example
  | 

Changes to en/refpages/elements/productname/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/productnumber/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/programlisting/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen, synopsis.u.gen:
  | 	  First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/programlistingco/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/prompt/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/property/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/qandaset/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/quote/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/refdescriptor/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/refentry/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/refentryinfo/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/refentrytitle/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/reference/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/referenceinfo/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/refname/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/refpurpose/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/refsect1/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/refsect1info/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/refsect2/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/refsect2info/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/refsect3/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/refsect3info/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/refsection/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/refsectioninfo/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/refsynopsisdiv/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/refsynopsisdivinfo/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/remark/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/replaceable/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/returnvalue/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/revhistory/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/revision/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/rhs/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/row/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/screen/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen, synopsis.u.gen:
  | 	  First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/screenco/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* example.1.txt, parents.gen: First attempt at building a V4.3
  | 	  book
  | 

Changes to en/refpages/elements/screeninfo/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/screenshot/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/secondary/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/secondaryie/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/sect1/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/sect1info/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/sect2/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/sect2info/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/sect3/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/sect3info/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/sect4/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/sect4info/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/sect5/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/sect5info/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/section/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/sectioninfo/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/see/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/seealso/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/seealsoie/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/seeie/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/seg/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/segmentedlist/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/segtitle/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/set/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, entities.e.ent, entities.u.ent, parents.gen,
  | 	  synopsis.e.gen, synopsis.u.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/setindex/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/setindexinfo/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/setinfo/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/sgmltag/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/shortcut/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/sidebar/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/sidebarinfo/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/simpara/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/simplelist/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/simplemsgentry/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/simplesect/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/spanspec/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/step/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, refentry.xml, synopsis.e.gen,
  | 	  synopsis.u.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/stepalternatives/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, entities.e.ent, entities.u.ent, parents.gen,
  | 	  refentry.xml, reference.e.xml, reference.u.xml,
  | 	  synopsis.e.gen, synopsis.u.gen: New file.
  | 

Changes to en/refpages/elements/structfield/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/structname/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/subscript/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/subtitle/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/superscript/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/symbol/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/synopsis/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen, synopsis.e.gen, synopsis.u.gen: Updated to
  | 	  DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, example.1.gen, example.1.txt, parents.gen,
  | 	  synopsis.e.gen, synopsis.u.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/systemitem/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen, synopsis.u.gen:
  | 	  First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/table/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen, synopsis.u.gen:
  | 	  First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/task/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, entities.e.ent, entities.u.ent, parents.gen,
  | 	  refentry.xml, reference.e.xml, reference.u.xml,
  | 	  synopsis.e.gen, synopsis.u.gen: New file.
  | 

Changes to en/refpages/elements/taskprerequisites/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, entities.e.ent, entities.u.ent, parents.gen,
  | 	  refentry.xml, reference.e.xml, reference.u.xml,
  | 	  synopsis.e.gen, synopsis.u.gen: New file.
  | 

Changes to en/refpages/elements/taskrelated/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, entities.e.ent, entities.u.ent, parents.gen,
  | 	  refentry.xml, reference.e.xml, reference.u.xml,
  | 	  synopsis.e.gen, synopsis.u.gen: New file.
  | 

Changes to en/refpages/elements/tasksummary/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, entities.e.ent, entities.u.ent, parents.gen,
  | 	  refentry.xml, reference.e.xml, reference.u.xml,
  | 	  synopsis.e.gen, synopsis.u.gen: New file.
  | 

Changes to en/refpages/elements/tbody/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen, synopsis.u.gen:
  | 	  First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/td/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, entities.e.ent, entities.u.ent, parents.gen,
  | 	  refentry.xml, reference.e.xml, reference.u.xml,
  | 	  synopsis.e.gen, synopsis.u.gen: New file.
  | 

Changes to en/refpages/elements/term/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/tertiary/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/tertiaryie/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/textdata/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/textobject/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 

Changes to en/refpages/elements/tfoot/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen, synopsis.u.gen:
  | 	  First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/tgroup/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/th/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, entities.e.ent, entities.u.ent, parents.gen,
  | 	  refentry.xml, reference.e.xml, reference.u.xml,
  | 	  synopsis.e.gen, synopsis.u.gen: New file.
  | 

Changes to en/refpages/elements/thead/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen, synopsis.u.gen:
  | 	  First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/tip/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/title/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/titleabbrev/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/tocback/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/tocentry/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/tocfront/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book
  | 

Changes to en/refpages/elements/token/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/tr/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, entities.e.ent, entities.u.ent, parents.gen,
  | 	  refentry.xml, reference.e.xml, reference.u.xml,
  | 	  synopsis.e.gen, synopsis.u.gen: New file.
  | 

Changes to en/refpages/elements/trademark/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/type/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/ulink/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen, synopsis.u.gen:
  | 	  First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/uri/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, entities.e.ent, entities.u.ent, parents.gen,
  | 	  refentry.xml, reference.e.xml, reference.u.xml,
  | 	  synopsis.e.gen, synopsis.u.gen: New file.
  | 

Changes to en/refpages/elements/userinput/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* children.gen, parents.gen, synopsis.e.gen: First attempt at
  | 	  building a V4.3 book
  | 

Changes to en/refpages/elements/variablelist/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/varname/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/videodata/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/void/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* synopsis.e.gen, synopsis.u.gen: First attempt at building a
  | 	  V4.3 book
  | 

Changes to en/refpages/elements/warning/*

  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/wordasword/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: Updated to DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen: First attempt at building a V4.3 book
  | 

Changes to en/refpages/elements/xref/*

  | 2003-12-30  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen, synopsis.e.gen, synopsis.u.gen: Updated to
  | 	  DocBook V4.3CR2
  | 
  | 2003-12-23  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* parents.gen, synopsis.e.gen, synopsis.u.gen: First attempt
  | 	  at building a V4.3 book]]></programlisting>

</section>

<section><title>Changes since version 2.0.7 (2002-06-17)</title>

<programlisting><![CDATA[Changes to en/*

  | 2002-12-29  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* ch00.xml, ch01.xml, ch05.xml: Patches from jrdaily
  | 
  | 	* ch04.xml: Patches from jrdaily: I'm attaching yet another
  | 	  revision of the patch. Updated changelog: * Use CDATA
  | 	  sections in screen and programlisting blocks containing
  | 	  sample SGML and XML code. * Put quotes around attribute
  | 	  values in one sample block. Some of the attributes are
  | 	  attached to <xref> tags; so far as I know, there is no way
  | 	  to represent an <xref> that is legal in both DocBook SGML
  | 	  and XML, so I left them SGML-compliant (without a closing
  | 	  /). * Replace XML with &XML; when not in index terms, and
  | 	  SGML with &SGML;. This only affects latter parts of the
  | 	  chapter; older portions already use those entities. *
  | 	  Replace <literal> with tags such as sgmltag, varname, and
  | 	  parameter. * Update the Emacs comments at the end of the
  | 	  document. * Replace &ldquo;/&rdquo; pairs with <quote> tags.
  | 	  * Eliminate &ldquo;/&rdquo; entities used following an
  | 	  <xref>; this may be an outdated stylesheet workaround. *
  | 	  Replace a quoted reference to a section with an <xref>
  | 	  (Scheme).
  | 
  | 	* ch04.xml: Fix typo
  | 
  | 2002-09-21  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* ch02.xml: Fixed SGML minimization bug; not that it'll matter
  | 	  in 2e, I suppose
  | 
  | 2002-06-26  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* ch02.xml: Add ID to Making an Index section
  | 

Changes to en/stylesheets/*

  | 2002-12-29  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* tdg.xsl: Improve linking
  | 

Changes to en/build/lib/*

  | 2002-12-29  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* refentry.pl: Attempt to support run-time prefix for output
  | 	  files. This will allow multiple versions of the book to be
  | 	  built. (This may not work yet)
  | 
  | 	* seealso: Fixed category title
  | 

Changes to en/refpages/elements/bookinfo/*

  | 2002-09-25  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* example.1.xml: Defguide bug #613988: fix bug in copyright
  | 	  holders
  | 

Changes to en/refpages/elements/callout/*

  | 2002-11-26  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* refentry.xml: Corrected typos and thinkos reported by Robert
  | 	  P. J. Day
  | 

Changes to en/refpages/elements/co/*

  | 2002-11-26  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* example.1.xml: New file.
  | 

Changes to en/refpages/elements/emphasis/*

  | 2002-08-06  <dcramer@users.sourceforge.net>
  | 
  | 	* refentry.xml: Changed Emphasis in refentrytitle to emphasis
  | 	  to make it consistent with other refentrytitles
  | 

Changes to en/refpages/elements/equation/*

  | 2002-09-21  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* example.1.xml: Try spelling Theorem correctly
  | 

Changes to en/refpages/elements/errorcode/*

  | 2002-12-28  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* example.1.xml: Fix errorname usage
  | 

Changes to en/refpages/elements/figure/*

  | 2002-09-21  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* example.1.xml: Use mediaobject instead of graphic
  | 

Changes to en/refpages/elements/funcparams/*

  | 2002-11-26  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* example.1.xml: Fix typo
  | 

Changes to en/refpages/elements/imagedata/*

  | 2002-11-26  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* refentry.xml: Add an ID so we can xref to a section
  | 
  | 2002-09-21  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* refentry.xml: Specify scalefit=0 on example
  | 

Changes to en/refpages/elements/index/*

  | 2002-11-26  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* refentry.xml: Corrected typos and thinkos reported by Robert
  | 	  P. J. Day
  | 

Changes to en/refpages/elements/nonterminal/*

  | 2002-12-29  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* refentry.xml: Fix tracker #599968, clarify semantics of def
  | 	  attribute
  | 

Changes to en/refpages/elements/olink/*

  | 2002-07-17  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* example.1.xml: Fix typo in entity declaration
  | 

Changes to en/refpages/elements/qandaset/*

  | 2002-11-26  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* refentry.xml: Corrected typos and thinkos reported by Robert
  | 	  P. J. Day
  | 

Changes to en/refpages/elements/screenco/*

  | 2002-11-26  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* example.1.xml: Corrected typos and thinkos reported by
  | 	  Robert P. J. Day
  | 

Changes to en/refpages/elements/simplemsgentry/*

  | 2002-12-28  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* refentry.xml: Remove reference to a future change that's
  | 	  already been made
  | 

Changes to en/refpages/elements/synopsis/*

  | 2002-11-26  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* example.1.xml: Corrected typos and thinkos reported by
  | 	  Robert P. J. Day
  | 

Changes to en/refpages/elements/xref/*

  | 2002-12-28  Norman Walsh <nwalsh@users.sourceforge.net>
  | 
  | 	* refentry.xml: Clarify processing expectations
  | ]]></programlisting>

</section>

</appendix>

<book id="docbook">
<?dbhtml filename="docbook.html"?>
&bookinfo;
&bookbody;
</book>
<!-- $Id: bookbody.xml 2414 2003-01-01 21:37:40Z nwalsh $ -->
&ch00;

<part id="docbook-intro">
<?dbhtml filename="part1.html"?>
<?ORApage height="4.93352"?>
<?ORApage height="7.5625"?>
<?ORA last-page-blank?>
<title>Introduction</title>
&ch01;
&ch02;
&ch03;
&ch04;
&ch05;
</part>

&references;

<part id="docbook-apps">
<?dbhtml filename="part3.html"?>
<?ORApage height="4.93352"?>
<?ORApage height="7.5625"?>
<?ORA last-page-blank?>
<title>Appendixes</title>
&appa;
&appb;
&appc;
&appd;
&appe;
&appf;
&appg;
&apph;
&appi;
</part>

&glossary;

&index;
&colophon;
<preface id="preface">
<?dbhtml filename="ch00.html"?>
<prefaceinfo>
<pubdate>$Date: 2002-12-29 22:37:30 +0300 (Вс, 29 дек 2002) $</pubdate>
<releaseinfo>$Revision: 2356 $</releaseinfo>
</prefaceinfo>
<title>Preface</title>
<para>
DocBook provides a system for writing structured documents using
&SGML; or &XML;. It is particularly well-suited to books and papers
about computer hardware and software, though it is by no means limited
to them.  DocBook is a document type definition (&DTD;).
Because it is a large and robust &DTD;, and because its
main structures correspond to the general notion of what constitutes a
book, DocBook has been adopted by a large and growing community of
authors. DocBook is supported <quote>out of the box</quote> by a number
of commercial tools, and support for it is rapidly growing in a number
of free software environments. In short, DocBook is an
easy-to-understand and widely used &DTD;. Dozens of organizations use
DocBook for millions of pages of documentation, in various print
and online formats, worldwide.
</para>
<sect1 id="pref-whyread">
<title>Why Read This Book?</title>
<para>
This book is designed to be the clear, concise, normative reference to
the DocBook &DTD;. This book is the official documentation for the
DocBook &DTD;.
</para>
<para>
We hope to answer, definitively, all the questions you might
have about all the elements and entities in DocBook.  In
particular, we cover the following subjects:</para>
<itemizedlist>
<listitem><para>The general nature of DocBook. With over 300 elements,
DocBook can be a bit overwhelming at first. We quickly get you up to
speed on how the pieces fit together.</para>
</listitem>
<listitem><para>How to write DocBook documents. Where should you start
and what should you do?</para>
</listitem>
<listitem><para>Parsing and validation. After you've written a
document, how can you tell if it really conforms to the DocBook
&DTD;?</para>
</listitem>
<listitem><para>How to publish DocBook documents. After you've written
one, what do you do with it? We provide a guide to using some popular
free tools to publish DocBook documents both in print and on the
Web.</para>
</listitem>
<listitem><para>Customizing the &DTD;. Many individuals and
corporations have standardized on the DocBook &DTD;. Whether your
subject matter is computer software documentation or not,
we explain how you can write a <quote>customization layer</quote> to
tailor DocBook explicitly for your information.</para>
</listitem>
<listitem><para>Understanding all of the elements. Each element is
extensively documented, including the intended semantics and the
purpose of all its attributes. An example of proper usage is given
for every element. The parameter entities and character entities are
also described.
</para>
</listitem>
<listitem><para>Stylesheets. Several standard stylesheet
languages are briefly described.</para>
</listitem>
<listitem><para>&XML; compatability. We outline all of the points that
you'll need to consider
as you or your organization contemplate &XML; for authoring, publishing, or
both.</para>
</listitem>
<listitem><para>Additional resources and a
<acronym>CD-ROM</acronym>. Finally, we direct you to other places you
can go for all the latest info, and offer a complete set of online
documentation on the <acronym>CD-ROM</acronym>.</para>
</listitem>
</itemizedlist>
</sect1>

<sect1 id="pref-bookaud">
<title>This Book's Audience</title>
<para>
We expect that most readers will have some familiarity with &SGML; or
&XML;. Even if your experience goes no farther than writing a few
&HTML; pages, you're probably in good shape.  Although we provide an
introduction to &SGML;, &XML;, and structured markup, this book may
not suffice as your only tutorial about &SGML; and &XML;. This
depends, naturally, on your needs and experience.  For a list of some
other good resources, consult <xref linkend="app-resources"/>.
</para>
<para>
Some sections of this book describe tools and applications. For
the most part, these are Microsoft Windows or &UNIX; applications,
although there's nothing about DocBook that makes it unsuitable for the
Mac or <acronym>VM/CMS</acronym> or any other operating system of your
choice.
</para>
</sect1>

<sect1 id="pref-organization">
<title>Organization of This Book</title>
<para>This book is divided into three parts. <citetitle>Part I: Introduction
</citetitle> is an introduction to structured markup and DocBook:</para>
<variablelist>
<varlistentry><term><xref linkend="ch-gssgml"/></term>
<listitem>
<para>A quick introduction to structured markup.</para>
</listitem>
</varlistentry>
<varlistentry><term><xref linkend="ch-create"/></term>
<listitem>
<para>How to make DocBook documents.</para>
</listitem>
</varlistentry>
<varlistentry><term><xref linkend="ch-parse"/></term>
<listitem>
<para>Parsing and validating DocBook documents.</para>
</listitem>
</varlistentry>
<varlistentry><term><xref linkend="ch-publish"/></term>
<listitem>
<para>How to publish DocBook documents.</para>
</listitem>
</varlistentry>
<varlistentry><term><xref linkend="app-customizing"/></term>
<listitem>
<para>How to customize DocBook.</para>
</listitem>
</varlistentry>
</variablelist>

<para condition="refpages"><citetitle>Part II: Reference</citetitle>
<phrase condition="online">
is a complete reference to every element and parameter entity in
the DocBook &dtd.version; &DTD;.
</phrase>
<phrase condition="print">
is a complete reference to every element in the DocBook
&dtd.version; &DTD; and provides a concise summary of the
parameter entities. For a detailed reference to the parameter
entities, consult the online version available either on <link
linkend="app-cdrom">the <acronym>CD-ROM</acronym></link> or the
<ulink url="http://docbook.org/">web site</ulink>.
</phrase>
</para>

<variablelist condition="refpages">
<varlistentry><term><xref linkend="ref-element"/></term>
<listitem>
<para>A reference guide to the DocBook elements.</para>
</listitem>
</varlistentry>
<varlistentry><term><xref linkend="ref-parement"/></term>
<listitem>
<para>A reference guide to the DocBook parameter entities.</para>
</listitem>
</varlistentry>
<varlistentry><term><xref linkend="ref-charent"/></term>
<listitem>
<para>A reference guide to the character entities declared in DocBook.</para>
</listitem>
</varlistentry>
</variablelist>

<para><citetitle>Part III: Appendixes</citetitle> discusses other resources:
</para>
<variablelist>
<varlistentry><term><xref linkend="app-install"/></term>
<listitem>
<para>How to install DocBook, Jade, and the stylesheets.</para>
</listitem>
</varlistentry>
<varlistentry><term><xref linkend="app-xml"/></term>
<listitem>
<para>DocBook as &XML;.</para>
</listitem>
</varlistentry>
<varlistentry><term><xref linkend="app-versions"/></term>
<listitem>
<para>A guide to DocBook versions, including a summary of the features
expected in future releases.</para>
</listitem>
</varlistentry>
<varlistentry><term><xref linkend="app-resources"/></term>
<listitem>
<para>Other resources.</para>
</listitem>
</varlistentry>
<varlistentry><term><xref linkend="app-cdrom"/></term>
<listitem>
<para>What's on the <acronym>CD</acronym>?</para>
</listitem>
</varlistentry>
<varlistentry><term><xref linkend="app-interchange"/></term>
<listitem>
<para>An interchange checklist. Things to consider when you're sharing
DocBook documents with others.</para>
</listitem>
</varlistentry>
<varlistentry><term><xref linkend="quickref"/></term>
<listitem>
<para>A Quick Reference to the elements in DocBook.</para>
</listitem>
</varlistentry>
</variablelist>
<para>At the end of this book you'll find a <link linkend="glossary">Glossary
</link> and an
<!-- YES, THIS IS DUPLICATED ONCE WITH THE LINK AND ONCE WITHOUT: -->
<phrase condition="online"><link linkend="index">Index</link>.</phrase>
<phrase condition="print">Index.</phrase>
</para>
</sect1>

<sect1 id="pref-conventions">
<title>Conventions Used in This Book</title>

<itemizedlist>
<listitem><para>
<sgmltag>Garamond Book</sgmltag> is used for element and
attribute names.
</para></listitem>
<listitem><para>
<literal>Constant Willison</literal>
is used for program examples, attribute value
literals, start- and end-tags, and source code example text.
</para></listitem>
<listitem><para>
<replaceable>Constant Willison Oblique</replaceable> is used for
<quote>replaceable</quote> text or variables.  Replaceable text is text
that describes something you're supposed to type, like a
<replaceable>filename</replaceable>, in which the word
<quote>filename</quote> is a placeholder for the actual filename.</para>
</listitem>
<listitem><para>
<filename>Garamond Italic</filename> is used for filenames and (in the print version
of the book) <acronym>URL</acronym>s.
</para></listitem>
<listitem condition="print"><para>
<ulink url="http://docbook.org/"><acronym>URL</acronym>s</ulink> are
presented in parentheses after the name of the resource they describe
in the print version of the book.
</para></listitem>
</itemizedlist>
</sect1>
<sect1 id="pref-getbook"><title>Getting This Book</title>
<para>
If you want to hold this book in your hand and flip through its pages,
you have to buy it as you would any other book. You can also get this
book in electronic form, as a DocBook &SGML; document, and in &HTML;,
either on the <acronym>CD</acronym> that accompanies the bound book or
from this book's web site:
<ulink url="http://docbook.org/"/>.
</para>
</sect1>

<sect1 id="pref-getexamples">
<title>Getting Examples from This Book</title>
<para>
All of the examples are included on the <acronym>CD-ROM</acronym> and
online at the book's web site.  You can get the most up-to-date
information about this book from the web site: <ulink
url="http://docbook.org/">http://docbook.org/</ulink>.</para>
</sect1>

<sect1 id="pref-getdocbook">
<title>Getting DocBook</title>
<para>
The DocBook &DTD; is included <link linkend="app-cdrom-docbook">on the
<acronym>CD-ROM</acronym></link>. You can get the most up-to-date
version and information about DocBook from the DocBook web page:
<ulink url="http://www.oasis-open.org/docbook/">http://www.oasis-open.org/docbook/</ulink>.</para>
</sect1>

<sect1 id="pref-req-comments">
<title>Request for Comments</title>
<para>
Please help us improve future editions of this book by reporting any
errors, inaccuracies, bugs, misleading or confusing statements, and
plain old typos that you find. An online errata list is maintained at
<ulink
url="http://docbook.org/tdg/errata.html">http://docbook.org/tdg/errata.html</ulink>.
Email your bug reports and comments to us at <ulink role="online"
url="mailto:bookcomments@docbook.org">bookcomments@docbook.org</ulink>.</para>
</sect1>
<sect1 id="pref-acknorm">
<title>Acknowledgements from Norm</title>
<para>This book has been in the works for a long
time. It could not have been completed without the help and
encouragement of a lot of people, most especially my wife,
Deborah, who supported me through the long hours and the late
nights.
</para>
<para>
I also want to thank Lenny for collaborating with me and developing
real prose out of my rough outlines, cryptic email messages, and
scribbled notes.</para>
<para>
A number of people contributed technical feedback as this book
was being written, in particular Terry Allen and Eve Maler. I
owe most of what I know about &SGML; to them, and to the other
members of the Davenport Group who answered all my questions so
many years ago, especially Jon Bosak, Eduardo Guttentag, and
Murray Maloney. Paul Prescod, Mark Galassi, and Dave Pawson also
provided invaluable feedback on the technical review draft. It's
a better book because of them.
</para>
</sect1>
<sect1 id="pref-acklen">
<title>Acknowledgements from Lenny</title>
<para>My gratitude goes back to Dale Dougherty and Terry Allen, who
long ago encouraged me and the production department at O'Reilly to learn
&SGML;; and to Lar Kaufman, who also made large contributions to my 
knowledge and appreciation of &SGML;. But my greatest debt of thanks goes to 
Norm for all that he patiently taught me about DocBook, and for his
supreme graciousness in keeping me a part of this project. 
</para>
</sect1>
<sect1 id="pref-ackboth">
<title>Acknowledgements from Norm and Lenny</title>
<para>
Thanks finally to the great people at O'Reilly who encouraged us to
write it (Frank Willison and Sheryl Avruch), agreed to edit it
(Frank), helped design it (Alicia Cech, who worked on the interior
design, and Edie Freeman, who designed the cover), proofed and
produced it (Chris Maden, Madeline Newell, and David Futato), and
indexed it (Ellen Troutman).
</para>
</sect1>
</preface>

<!--
Local Variables:
mode:sgml
sgml-parent-document: ("book.sgm" "preface")
End:
-->
<chapter id="ch-gssgml">
<?dbhtml filename="ch01.html"?>
<chapterinfo>
<pubdate>$Date: 2002-12-29 23:20:58 +0300 (Вс, 29 дек 2002) $</pubdate>
<releaseinfo>$Revision: 2357 $</releaseinfo>
</chapterinfo>
<title>Getting Started<?lb?>with &SGML;/&XML;</title>
<para>
<indexterm id="getstartSGML" class="startofrange"><primary>SGML</primary>
  <secondary>getting started</secondary></indexterm>
<indexterm id="XMLgetstart" class="startofrange"><primary>XML</primary>
  <secondary>getting started</secondary></indexterm>

This chapter is intended to provide a quick introduction to structured
markup (&SGML; and &XML;). If you're already familiar with &SGML; or
&XML;, you only need to skim this chapter.
</para>
<para>
To work with DocBook, you need to understand a few basic concepts of
structured editing in general, and DocBook, in particular. That's
covered here. You also need some concrete experience with the way a
DocBook document is structured. That's covered in the next chapter.
</para>
<sect1 id="ch01-compare">
<title>&HTML; and &SGML; vs. &XML;</title>
<para>
<indexterm><primary>HTML</primary>
  <secondary>XML vs.</secondary></indexterm>
<indexterm><primary>Hypertext Markup Language</primary><see>HTML</see></indexterm>
<indexterm><primary>SGML</primary>
  <secondary>HTML vs.</secondary></indexterm>

This chapter doesn't assume that you know what &HTML; is, but if you
do, you have a starting point for understanding structured
markup. &HTML; (Hypertext Markup Language) is a way of marking up text
and graphics so that the most popular web browsers can interpret
them. &HTML; consists of a set of markup tags with specific
meanings. Moreover, &HTML; is a very basic type of &SGML; markup that
is easy to learn and easy for computer applications to generate. But
the simplicity of &HTML; is both its virtue and its weakness. Because
of &HTML;'s limitations, web users and programmers have had to extend
and enhance it by a series of customizations and revisions that still
fall short of accommodating current, to say nothing of future, needs.
</para>
<para>


&SGML;, on the other hand, is an international standard that describes
how markup languages are defined. &SGML; does not consist of
particular tags or the rules for their usage. &HTML; is an example of
a markup language defined in &SGML;.
</para>
<para>
<indexterm><primary>XML</primary>
  <secondary>HTML and SGML vs.</secondary></indexterm>

&XML; promises an intelligent improvement over &HTML;, and
compatibility with it is already being built into the most popular web
browsers. &XML; is not a new markup language designed to compete with
&HTML;, and it's not designed to create conversion headaches for people
with tons of &HTML; documents. &XML; is intended to alleviate
compatibility problems with browser software; it's a new, easier
version of the standard rules that govern the markup itself, or, in
other words, a new version of &SGML;. The rules of &XML; are designed
to make it easier to write both applications that interpret its type
of markup and applications that generate its markup. &XML; was
developed by a team of &SGML; experts who understood and sought to
correct the problems of learning and implementing &SGML;. &XML; is
also <emphasis>extensible</emphasis> markup, which means that it is
customizable. A browser or word processor that is &XML;-capable will
be able to read any &XML;-based markup language that an individual
user defines.
</para>
<para>
In this book, we tend to describe things in terms of &SGML;, but where
there are differences between &SGML; and &XML; (and there are only a
few), we point them out. For our purposes, it doesn't really matter
whether you use &SGML; or &XML;.
</para>
<para>
During the coming months, we anticipate that &XML;-aware web browsers
and other tools will become available. Nevertheless, it's not
unreasonable to do your authoring in &SGML; and your online publishing
in &XML; or &HTML;. By the same token, it's not unreasonable to do
your authoring in &XML;.
</para>
</sect1>
<sect1 id="s1-basic-concepts">
<title>Basic &SGML;/&XML; Concepts</title>
<para>
<indexterm id="SGMLbasicconceptch01" class="startofrange"><primary>SGML</primary>
  <secondary>basic concepts</secondary></indexterm>
<indexterm id="XMLbasicconceptch01" class="startofrange"><primary>XML</primary>
  <secondary>basic concepts</secondary></indexterm>

<indexterm><primary>XML</primary>
  <secondary>basic concepts</secondary></indexterm>
<indexterm><primary>structured semantic markup language</primary><see>SGML</see></indexterm>

Here are the basic &SGML;/&XML; concepts you need to grasp:</para>
<itemizedlist>
<listitem><para>structured, semantic markup</para>
</listitem>
<listitem><para>elements</para>
</listitem>
<listitem><para>attributes</para>
</listitem>
<listitem><para>entities</para>
</listitem>
</itemizedlist>
<sect2>
<title>Structured and Semantic Markup</title>
<para>
<indexterm><primary>appearance</primary>
  <secondary>SGML and</secondary></indexterm>
<indexterm><primary>structured markup</primary></indexterm>
<indexterm><primary>semantic markup</primary></indexterm>

An essential characteristic of structured markup is that it explicitly
distinguishes (and accordingly &ldquo;marks up&rdquo; within a
document) the structure and semantic content of a document. It does
not mark up the way in which the document will appear to the reader,
in print or otherwise.
</para>
<para>
In the days before word processors it was common for a typed
manuscript to be submitted to a publisher. The manuscript identified
the logical structures of the documents (chapters, section titles, and
so on), but said nothing about its appearance. Working independently
of the author, a designer then developed a specification for the
appearance of the document, and a typesetter marked up and applied the
designer's format to the document.
</para>
<para>
<indexterm><primary>presentation</primary><see>appearance</see></indexterm>
<indexterm><primary>HTML</primary>
  <secondary>appearance, limitions of specification</secondary></indexterm>

Because presentation or appearance is usually based on structure and
content, &SGML; markup logically precedes and generally determines the
way a document will look to a reader. If you are familiar with strict,
simple &HTML; markup, you know that a given document that is
structurally the same can also look different on different
computers. That's because the markup does not specify many aspects of
a document's appearance, although it does specify many aspects of a
document's structure.
</para>
<para>
<indexterm><primary>text</primary>
  <secondary>formatting</secondary></indexterm>
<indexterm><primary>word processors, SGML/XML vs.</primary></indexterm>
Many writers type their text into a word processor, line-by-line and
word-for-word, italicizing technical terms, underlining words for
emphasis, or setting section headers in a font complementary to the
body text, and finally, setting the headers off with a few carriage
returns fore and aft. The format such a writer imposes on the words on
the screen imparts structure to the document by changing its
appearance in ways that a reader can more or less reliably decode.
The reliability depends on how consistently and unambiguously the
changes in type and layout are made. By contrast, an &SGML;/&XML;
markup of a section header explicitly specifies that a specific piece
of text is a section header. This assertion does not specify the
presentation or appearance of the section header, but it makes the
fact that the text is a section header completely unambiguous.
</para>
<para>
<indexterm><primary>elements</primary>
  <secondary>SGML/XML, using</secondary></indexterm>
<indexterm><primary>titles</primary>
  <secondary>top-level sections</secondary></indexterm>
<indexterm><primary>top-level sections</primary></indexterm>
<indexterm><primary>characters</primary>
  <secondary>character sets</secondary>
    <tertiary>SGML documents</tertiary></indexterm>
<indexterm><primary>ASCII character set</primary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>Unicode character set</secondary></indexterm>
<indexterm><primary>Unicode character set</primary>
  <secondary>XML documents, using</secondary></indexterm>

&SGML; and &XML; use named elements, delimited by angle brackets
(&ldquo;&lt;&rdquo; and &ldquo;>&rdquo;) to identify the markup in a
document. In DocBook, a top-level section is <sgmltag class="starttag">sect1</sgmltag>, so the title of a top-level section
named <emphasis>My First-Level Header</emphasis> would be identified
like this:
</para>

<screen>&lt;sect1>&lt;title>My First-Level Header&lt;/title> </screen>

<para>Note the following features of this markup:</para>
<variablelist>
<varlistentry>
<term>Clarity</term>
<listitem><para>A title begins with <sgmltag class="starttag">
title</sgmltag> and ends with <sgmltag class="endtag">title</sgmltag>. The <sgmltag>sect1</sgmltag> also has
an ending <sgmltag class="endtag">sect1</sgmltag>, but we haven't
shown the whole section so it's not visible.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Hierarchy</term>
<listitem><para>&ldquo;My First-Level
Header&rdquo; is the title of a top-level section because it occurs
inside a title in a <sgmltag>sect1</sgmltag>. A
<sgmltag>title</sgmltag> element occurring somewhere else, say in a
<sgmltag>Chapter</sgmltag> element, would be the title of the
chapter.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Plain text</term>
<listitem><para>&SGML; documents can have varying character sets, but
most are <acronym>ASCII</acronym>. &XML; documents use the Unicode
character set. This makes &SGML; and &XML; documents highly portable
across systems and tools.</para>
</listitem>
</varlistentry>
</variablelist>
<para>
<indexterm><primary>appearance</primary>
  <secondary>SGML and</secondary></indexterm>
<indexterm><primary>formatting</primary>
  <secondary>SGML documents</secondary></indexterm>
<indexterm><primary>filenames</primary>
  <secondary>tags, specifying</secondary></indexterm>
<indexterm><primary>semantic content, SGML marking for</primary></indexterm>

In an &SGML; document, there is no obligatory difference between the
size or face of the type in a first-level section header and the title
of a book in a footnote or the first sentence of a body paragraph. All
&SGML; files are simple text files without font changes or special
characters.<footnote><para>Some structured editors apply style to the
document while it's being edited, using fonts and color to make the
editing task easier, but this stylistic information is not stored in
the actual &SGML;/&XML; document. Instead, it is provided by the
editing application.</para></footnote> Similarly, an &SGML; document
does not specify the words in a text that are to be set in italic,
bold, or roman type. Instead, &SGML; marks certain kinds of texts for
their semantic content. For example, if a particular word is the name
of a file, then the tags around it should specify that it is a
filename:
</para>

<screen>Many mail programs read configuration information from the
users <sgmltag class="starttag">filename</sgmltag>.mailrc<sgmltag class="endtag">filename</sgmltag> file.</screen>

<para>
<indexterm><primary>stylesheets</primary>
  <secondary>SGML documents, specifying appearance</secondary></indexterm>
<indexterm><primary>appearance</primary>
  <secondary>structure or content vs.</secondary></indexterm>
<indexterm><primary>CSS stylesheets</primary></indexterm>
<indexterm><primary>FOSI stylesheets</primary></indexterm>
<indexterm><primary>DSSSL</primary>
  <secondary>stylesheets</secondary></indexterm>
<indexterm><primary>XSL stylesheets</primary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>XSL stylesheets</secondary></indexterm>

If the meaning of a phrase is particularly audacious, it might get
tagged for boldness of thought instead of appearance. An &SGML;
document contains all the information that a typesetter needs to lay
out and typeset a printed page in the most effective and consistent
way, but it does not specify the layout or the
type.<footnote><para>The distinction between appearance or
presentation and structure or content is essential to &SGML;, but
there is a way to specify the appearance of an &SGML; document: attach
a stylesheet to it. There are several standards for such stylesheets:
<acronym>CSS</acronym>, <acronym>XSL</acronym>, <acronym>FOSI</acronym>s,
and <acronym>DSSSL</acronym>.
See <xref linkend="ch-publish"/>.</para></footnote>
</para>
<para>
<indexterm><primary>DocBook DTD</primary>
  <secondary>document type definition</secondary></indexterm>
<indexterm><primary>declarations</primary>
  <secondary>SGML documents</secondary></indexterm>
<indexterm><primary>document type definitions</primary><see>DTDs</see></indexterm>
<indexterm><primary>tags</primary>
  <secondary>names</secondary>
    <tertiary>document type definition</tertiary></indexterm>
<indexterm><primary>combination rules (DTD)</primary></indexterm>
<indexterm><primary>DTDs</primary></indexterm>
<indexterm><primary>DTDs</primary>
  <secondary>DocBook</secondary><see>DocBook DTD</see></indexterm>


Not only is the structure of an &SGML;/&XML; document explicit, but it
is also carefully controlled. An &SGML; document makes reference to a
set of declarations&mdash;a document type definition
(&DTD;)&mdash;that contains an inventory of tag names and specifies
the combination rules for the various structural and semantic features
that make up a document. What the distinctive features are and how
they should be combined is &ldquo;arbitrary&rdquo; in the sense that
almost any selection of features and rules of composition is
theoretically possible. The DocBook &DTD; chooses a particular set of
features and rules for its users.
</para>
<para>
<indexterm><primary>sections</primary>
  <secondary>ordering, DocBook DTD rules (example)</secondary></indexterm>
Here is a specific example of how the DocBook &DTD; works. DocBook
specifies that a third-level section can follow a second-level section
but cannot follow a first-level section without an intervening
second-level section.
</para>
<informaltable>
<tgroup cols="2">
<colspec colname="COLSPEC0" colwidth="2.50in"/>
<colspec colname="COLSPEC1" colwidth="2.50in"/>
<tbody>
<row>
<entry colname="COLSPEC0" valign="top"><para>This is valid:</para><screen>&lt;sect1>&lt;title>...&lt;/title>
  &lt;sect2>&lt;title>...&lt;/title>
    &lt;sect3>&lt;title>...&lt;/title>
      ...
    &lt;/sect3>
  &lt;/sect2>
&lt;/sect1>
</screen></entry>
<entry colname="COLSPEC1" valign="top"><para>This is not:</para><screen>&lt;sect1>&lt;title>...&lt;/title>
  &lt;sect3>&lt;title>...&lt;/title>
    ...
  &lt;/sect3>
&lt;/sect1>
</screen></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<para>
<indexterm><primary>parsers</primary>
  <secondary>validating</secondary></indexterm>
<indexterm><primary>validation</primary>
  <secondary>SGML documents</secondary></indexterm>
<indexterm><primary>DTDs</primary>
  <secondary>validating SGML documents against</secondary></indexterm>
<indexterm><primary>instance (DocBook document)</primary></indexterm>

Because an &SGML;/&XML; document has an associated &DTD; that
describes the valid, logical structures of the document, you can test
the logical structure of any particular document against the
&DTD;. This process is performed by a <firstterm>parser</firstterm>. An
&SGML; processor must begin by parsing the document and determining if
it is valid, that is, if it conforms to the rules specified in the
&DTD;. <!--<phrase role="xml">-->&XML; processors are not required to
check for validity, but it's always a good idea to check for validity
when authoring.<!--</phrase>--> Because you can test and validate the
structure of an &SGML;/&XML; document with software, a DocBook
document containing a first-level section followed immediately by a
third-level section will be identified as invalid, meaning that it's
not a valid <firstterm>instance</firstterm> or example of a document
defined by the DocBook &DTD;. Presumably, a document with a logical
structure won't normally jump from a first- to a third-level section,
so the rule is a safeguard&mdash;but not a guarantee&mdash;of good
writing, or at the very least, reasonable structure. A parser also
verifies that the names of the tags are correct and that tags
requiring an ending tag have them. This means that a valid document is
also one that should format correctly, without runs of paragraphs
incorrectly appearing in bold type or similar monstrosities that
everyone has seen in print at one time or another. For more
information about &SGML;/&XML; parsers, see <xref linkend="ch-parse"/>.
</para>
<para>
In general, adherence to the explicit rules of structure and markup in
a &DTD; is a useful and reassuring guarantee of consistency and
reliability within documents, across document sets, and over
time. This makes &SGML;/&XML; markup particularly desirable to
corporations or governments that have large sets of documents to
manage, but it is a boon to the individual writer as well.
</para>
<sect3>
<title>How can this markup help you?</title>
<para>
<indexterm><primary>semantic markup</primary>
  <secondary>presentation media, different</secondary></indexterm>
Semantic markup makes your documents more amenable to interpretation
by software, especially publishing software. You can publish a white
paper, authored as a DocBook <sgmltag>Article</sgmltag>, in the
following formats:
<indexterm><primary>articles</primary>
  <secondary>formats, listed</secondary></indexterm>
<indexterm><primary>journal articles</primary></indexterm>

</para>
<itemizedlist>
<listitem><para>On the Web in &HTML;</para>
</listitem>
<listitem><para>As a standalone document on 8&frac12;&times;11 paper</para>
</listitem>
<listitem><para>As part of a quarterly journal, in a 6&times;9 format
</para>
</listitem>
<listitem><para>In Braille</para>
</listitem>
<listitem><para>In audio</para>
</listitem>
</itemizedlist>
<para>
You can produce each of these publications from exactly the same
source document using the presentational techniques best suited to
both the content of the document and the presentation medium. This
versatility also frees the author to concentrate on the document
content. For example, as we write this book, we don't know exactly how
O'Reilly will choose to present chapter headings, bulleted lists,
&SGML; terms, or any of the other semantic features. And we don't
care. It's irrelevant; whatever presentation is chosen, the &SGML;
sources will be transformed automatically into that style.
</para>
<para>
Semantic markup can relieve the author of other, more significant
burdens as well (after all, careful use of paragraph and character
styles in a word processor document theoretically allows us to change
the presentation independently from the document). Using semantic
markup opens up your documents to a world of possibilities. Documents
become, in a loose sense, databases of information. Programs can
compile, retrieve, and otherwise manipulate the documents in
predictable, useful ways.
</para>
<para>
<indexterm><primary>links</primary>
  <secondary>SGML documents, maintaining</secondary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>linking to references</secondary></indexterm>

Consider the online version of this book: almost every element name
(<sgmltag>Article</sgmltag>, <sgmltag>Book</sgmltag>, and so on) is a
hyperlink to the reference page that describes that
element. Maintaining these links by hand would be tedious and might be
unreliable, as well. Instead, every element name is marked as an
element using <sgmltag>SGMLTag</sgmltag>: a <sgmltag>Book</sgmltag> is
a <literal><sgmltag class="starttag">sgmltag</sgmltag>Book<sgmltag class="endtag">sgmltag</sgmltag></literal>.
</para>
<para>
Because each element name in this book is tagged semantically, the
program that produces the online version can determine which
occurrences of the word &ldquo;book&rdquo; in the text are actually
references to the <sgmltag>Book</sgmltag> element. The program can
then automatically generate the appropriate hyperlink when it should.
</para>
<para>
There's one last point to make about the versatility of &SGML;
documents: how much you have depends on the &DTD;. If you take a good
photo with a high resolution lens, you can print it and copy it and
scan it and put it on the Web, and it will look good. If you start
with a low-resolution picture it will not survive those
transformations so well. DocBook &SGML;/&XML; has this advantage over,
say, &HTML;: DocBook has specific and unambiguous semantic and
structural markup, because you can convert its documents with ease
into other presentational forms, and search them more precisely. If
you start with &HTML;, whose markup is at a lower resolution than
DocBook's, your versatility and searchability is substantially
restricted and cannot be improved.
</para>
</sect3>
<sect3>
<title>What are the shortcomings to structural authoring?</title>
<para>
There are a few significant shortcomings to structured authoring:
</para>
<itemizedlist>
<listitem><para>It requires a significant change in the authoring
process. Writing structured documents is very different from writing
with a typical word processor, and change is difficult. In particular,
authors don't like giving up control over the appearance of their
words especially now that they have acquired it with the advent of
word processors. But many publishing companies need authors to
relinquish that control, because book design and production remains
their job, not their authors'.</para>
</listitem>
<listitem><para>Because semantics are separate from appearance, in
order to publish an &SGML;/&XML; document, a stylesheet or other tool
must create the presentational form from the structural form. Writing
stylesheets is a skill in its own right, and though not every author
among a group of authors has to learn how to write them, someone has
to.</para>
</listitem>
<listitem><para>Authoring tools for &SGML; documents can generally be
pretty expensive. While it's not entirely unreasonable to edit
&SGML;/&XML; documents with a simple text editor, it's a bit tedious
to do so. However, there are a few free tools that are
&SGML;-aware. The widespread interest in &XML; may well produce new,
clever, and less expensive &XML; editing tools.</para>
</listitem>
</itemizedlist>
</sect3>
</sect2>
</sect1>
<sect1 id="ch01-elemattr">
<title>Elements and Attributes</title>
<para>
<indexterm><primary>elements</primary>
  <secondary>attributes</secondary></indexterm>
<indexterm><primary>attributes</primary>
  <secondary>elements and</secondary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>attributes</secondary><seealso>attributes</seealso></indexterm>
<indexterm><primary>empty elements</primary></indexterm>
<indexterm><primary>end tags</primary>
  <secondary>empty elements, not requiring</secondary></indexterm>
<indexterm><primary>cross references</primary></indexterm>
<indexterm><primary>entities</primary>
  <secondary>SGML/XML markup</secondary></indexterm>

&SGML;/&XML; markup consists primarily of
<firstterm>elements</firstterm>, <firstterm>attributes</firstterm>,
and <firstterm>entities</firstterm>. Elements are the terms we have
been speaking about most, like <sgmltag>sect1</sgmltag>, that describe
a document's content and structure. Most elements are represented by pairs
of tags and
mark the start and end of the construct they surround&mdash;for
example, the &SGML; source for this particular paragraph begins with a
<sgmltag class="starttag">para</sgmltag> tag and ends with a <sgmltag class="endtag">para</sgmltag> tag. Some elements are
&ldquo;empty&rdquo; (such as DocBook's cross-reference element,
<sgmltag class="starttag">xref</sgmltag>) and require no end
tag.<footnote><para>In &XML;, this is written as
<literal>&lt;xref/></literal>, as we'll see in the section <xref linkend="ch02-typexml"/>.</para></footnote>
</para>
<para>
<indexterm><primary>ID attribute</primary>
  <secondary>SGML start tags</secondary></indexterm>
<indexterm><primary>tags</primary>
  <secondary>identifiers (SGML)</secondary></indexterm>
<indexterm><primary>end tags</primary>
  <secondary>attributes and</secondary></indexterm>
<indexterm><primary>start tags</primary>
  <secondary>attribute ID, containing</secondary></indexterm>

Elements can, but don't necessarily, include one or more attributes,
which are additional terms that extend the function or refine the
content of a given element. For instance, in DocBook a <sgmltag class="starttag">sect1</sgmltag> start tag can contain an
identifier&mdash;an <sgmltag class="attribute">id</sgmltag>
attribute&mdash;that will ultimately allow the writer to
cross-reference it or enable a reader to retrieve it. End tags cannot
contain attributes. A <sgmltag class="starttag">sect1</sgmltag>
element with an <sgmltag class="attribute">id</sgmltag> attribute
looks like this:
</para>

<screen>&lt;sect1 id="<replaceable>idvalue</replaceable>"&gt;</screen>

<para>
<indexterm><primary>namespaces</primary>
  <secondary>XML tags</secondary></indexterm>
<indexterm><primary>tags</primary>
  <secondary>namespaces (XML)</secondary></indexterm>
<indexterm><primary>validation</primary>
  <secondary>namespace tags (XML), problems</secondary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>namespaces, using</secondary></indexterm>

In &SGML;, the catalog of attributes that can occur on an element is
predefined. You cannot add arbitrary attribute names to an
element. Similarly, the values allowed for each attribute are
predefined. In &XML;, the use of <ulink url="http://www.w3.org/TR/REC-xml-names/">namespaces</ulink> may allow you
to add additional attributes to an element, but as of this writing,
there's no way to perform validation on those attributes.
</para>
<para>
<indexterm><primary>SystemItem element</primary>
  <secondary>subdividing into URL and email addresses</secondary></indexterm>
<indexterm><primary>Role attribute</primary>
  <secondary>systemitem tags, subdividing</secondary></indexterm>

The <sgmltag class="attribute">id</sgmltag> attribute is one half of a
cross reference. An <sgmltag class="attribute">idref</sgmltag>
attribute on another element, for example <sgmltag class="starttag">xref linkend=&rdquo;idvalue&rdquo;
</sgmltag>, provides the other half. These attributes provide whatever
application might process the &SGML; source with the data needed
either to make a hypertext link or to substitute a named and/or numbered cross
reference in place of the <sgmltag class="starttag">
xref</sgmltag>. Another use for attributes is to specify subclasses of
certain elements. For instance, you can subdivide DocBook's <sgmltag class="starttag">systemitem</sgmltag> into <acronym>URL</acronym>s and
email addresses by making the content of the <sgmltag class="attribute">role</sgmltag> attribute the distinction between
them, as in <sgmltag class="starttag">systemitem role="URL"</sgmltag>
versus <sgmltag class="starttag">systemitem
role="emailaddr"</sgmltag>.
</para>
</sect1>
<sect1 id="s-entities"><title>Entities</title>
<para>
<indexterm><primary>entities</primary>
  <secondary>functions</secondary></indexterm>
<indexterm><primary>parsed entities</primary></indexterm>
<indexterm><primary>unparsed entities</primary></indexterm>
<indexterm><primary>names</primary>
  <secondary>assigning to data (entities)</secondary></indexterm>

Entities are a fundamental concept in &SGML; and &XML;, and can be
somewhat daunting at first. They serve a number of related, but
slightly different functions, and this makes them a little bit
complicated.
</para>
<para>
In the most general terms, entities allow you to assign a name to some
chunk of data, and use that name to refer to that data. The complexity
arises because there are two different contexts in which you can use
entities (in the &DTD; and in your documents), two types of entities
(parsed and unparsed), and two or three different ways in which the
entities can point to the chunk of data that they name.
</para>
<para>
In the rest of this section, we'll describe each of the commonly
encountered entity types. If you find the material in this section
confusing, feel free to skip over it now and come back to it later.
We'll refer to the different types of entities as the need arises in
our discussion of DocBook. Come back to this section when you're
looking for more detail.
</para>
<para>
Entities can be divided into two broad categories, <firstterm>general
entities</firstterm> and <firstterm>parameter entities</firstterm>.
Parameter entities are most often used in the &DTD;, not in documents,
so we'll describe them last. Before you can use any type of entity, it
must be formally declared. This is typically done in the document
prologue, as we'll explain in <xref linkend="ch-create"/>, but we will
show you how to declare each of the entities discussed here.
</para>
<sect2><title>General Entities</title>
<para>
<indexterm><primary>general entities</primary>
  <secondary>external and internal</secondary></indexterm>
<indexterm><primary>entities</primary>
  <secondary>general</secondary></indexterm>
In use, general entities are introduced with an ampersand (&amp;) and end with
a semicolon (;). Within the category of general entities, there are
two types: <firstterm>internal general entities</firstterm> and
<firstterm>external general entities</firstterm>.
</para>
<sect3><title>Internal general entities</title>
<para>
<indexterm><primary>internal general entities</primary></indexterm>
<indexterm><primary>names</primary>
  <secondary>text, associating with (internal general entities)</secondary></indexterm>
<indexterm><primary>text</primary>
  <secondary>entity, declaring as</secondary></indexterm>

With internal entities, you can associate an essentially arbitrary
piece of text (which may have other markup, including references to
other entities) with a name. You can then include that text by
referring to its name. For example, if your document frequently refers
to, say, &ldquo;O'Reilly &amp; Associates,&rdquo; you might declare it
as an entity:
</para>

<screen><![CDATA[<!ENTITY ora "O'Reilly &amp; Associates">]]></screen>

<para>
Then, instead of typing it out each time, you can insert it as needed
in your document with the entity reference <sgmltag class="genentity">ora</sgmltag>, simply to save time. Note that this
entity declaration includes another entity reference within it.
That's perfectly valid as long as the reference isn't directly or
indirectly recursive.
</para>
<para>
<indexterm><primary>entities</primary>
  <secondary>adding directly to DTD</secondary></indexterm>

If you find that you use a number of entities across many documents,
you can add them directly to the &DTD; and avoid having to include the
declarations in each document. See the discussion of
<filename>dbgenent.mod</filename> in <xref linkend="app-customizing"/>.
</para>
</sect3>
<sect3 id="s-egenent"><title>External general entities</title>
<para>
<indexterm><primary>external general entities</primary></indexterm>
<indexterm><primary>SGML</primary>
  <secondary>external documents, referencing (external general entities)</secondary></indexterm>
<indexterm><primary>parsers</primary>
  <secondary>external file text, inserting</secondary></indexterm>
<indexterm><primary>files</primary>
  <secondary>external, referencing</secondary></indexterm>

With external entities, you can reference other documents from within
your document. If these entities contain document text (&SGML; or
&XML;), then references to them cause the parser to insert the text of
the external file directly into your document (these are called parsed
entities). In this way, you can use entities to divide your single,
logical document into physically distinct chunks. For example, you
might break your document into four chapters and store them in
separate files. At the top of your document, you would include entity
declarations to reference the four files:
</para>

<screen><![CDATA[<!ENTITY ch01 SYSTEM "ch01.sgm">
<!ENTITY ch02 SYSTEM "ch02.sgm">
<!ENTITY ch03 SYSTEM "ch03.sgm">
<!ENTITY ch04 SYSTEM "ch04.sgm">]]></screen>

<para>
Your <sgmltag>Book</sgmltag> now consists simply of references to the
entities:
</para>

<screen>&lt;book&gt;
&amp;ch01;
&amp;ch02;
&amp;ch03;
&amp;ch04;
&lt;/book&gt;</screen>

<para>
<indexterm><primary>unparsed entities</primary></indexterm>
<indexterm><primary>notations (unparsed entities)</primary></indexterm>

Sometimes it's useful to reference external files that don't contain
document text. For example, you might want to reference an external
graphic. You can do this with entities by declaring the type of data
that's in the entity using a notation (these are called unparsed
entities). For example, the following declaration declares the entity
<literal>tree</literal> as an encapsulated PostScript image:
</para>

<screen><![CDATA[<!ENTITY tree SYSTEM "tree.eps" NDATA EPS>]]></screen>

<para>
<indexterm><primary>elements</primary>
  <secondary>entity attributes</secondary></indexterm>

Entities declared this way cannot be inserted directly into your
document. Instead, they must be used as entity attributes to elements:
</para>

<screen><![CDATA[<graphic entityref="tree"></graphic>]]></screen>

<para>
Conversely, you cannot use entities declared without a notation as the
value of an entity attribute.
</para>
</sect3>
<sect3 id="s-specchar"><title>Special characters</title>
<para>
<indexterm><primary>markup</primary>
  <secondary>distinguishing from content</secondary></indexterm>
<indexterm><primary>start tags</primary>
  <secondary>beginning</secondary></indexterm>
<indexterm><primary>end tags</primary>
  <secondary>beginning</secondary></indexterm>
In order for the parser to recognize markup in your document, it must
be able to distinguish markup from content. It does this with two
special characters: &ldquo;&lt;,&rdquo; which identifies the beginning
of a start or end tag, and &ldquo;&amp;,&rdquo; which identifies the
beginning of an entity reference.<footnote>
<para>
<indexterm><primary>start characters, changing</primary></indexterm>
In &XML;, these characters are fixed. In &SGML;, it is possible to
change the markup start characters, but we won't consider that case
here. If you change the markup start characters, you know what you're
doing. While we're on the subject, in &SGML;, these characters only
have their special meaning if they are followed by a name character.
It is, in fact, valid in an <emphasis>&SGML;</emphasis> (but not an &XML;)
document to write &ldquo;O'Reilly &amp; Associates&rdquo; because the
ampersand is not followed by a name character. Don't do this, however.
<indexterm><primary>characters</primary>
  <secondary>entities</secondary>
    <tertiary>encoding as</tertiary></indexterm>
<indexterm><primary>entities</primary>
  <secondary>characters</secondary></indexterm>
<indexterm><primary>angle brackets</primary>
  <secondary>coding as entities</secondary></indexterm>
</para>
</footnote>
If you want these characters to have their literal value, they must be
encoded as entity references in your document. The entity reference
<sgmltag class="genentity">lt</sgmltag> produces a left angle bracket;
<sgmltag class="genentity">amp</sgmltag> produces the
ampersand.<footnote>
<para>
<indexterm><primary>marked sections</primary>
  <secondary>character sequence, ending</secondary></indexterm>

The sequence of characters that end a marked section (see <xref linkend="s-ms"/>), such as ]]&gt; must also be encoded with at least
one entity reference if it is not being used to end a marked section.
For this purpose, you can use the entity reference <sgmltag class="genentity">gt</sgmltag> for the final right angle bracket.
</para>
</footnote>
</para>
<para>
<indexterm><primary>parsers</primary>
  <secondary>entity references, interpreting</secondary></indexterm>

If you do not encode each of these as their respective entity
references, then an &SGML; parser or application is likely to
interpret them as characters introducing elements or entities (an
&XML; parser will always interpret them this way); consequently, they
won't appear as you intended. If you wish to cite text that contains
literal ampersands and less-than signs, you need to transform these
two characters into entity references before they are included in a
DocBook document. The only other alternative is to incorporate text
that includes them in your document through some process that avoids
the parser.
</para>
<para>
<indexterm><primary>data entities</primary></indexterm>
<indexterm><primary>numeric character references</primary></indexterm>

In &SGML;, character entities are frequently declared using a third
entity category (one that we deliberately chose to overlook), called
<firstterm>data entities</firstterm>. In &XML;, these are declared using
numeric character references. Numeric character references resemble
entity references, but technically aren't the same. They have the form
<literal>&amp;#<replaceable>999</replaceable>;</literal>, in which
&ldquo;999&rdquo; is the numeric character number.
</para>
<para>
<indexterm><primary>Unicode character set</primary>
  <secondary>character numbers (XML)</secondary></indexterm>
<indexterm><primary>hexadecimal numeric character references (XML)</primary></indexterm>

In &XML;, the numeric character number is always the Unicode character
number. In addition, &XML; allows hexadecimal numeric character
references of the form
<literal>&amp;#x<replaceable>hhhh</replaceable>;</literal>. In &SGML;, the
numeric character number is a number from the document character set
that's declared in the &SGML; declaration.
</para>
<para>
<indexterm><primary>special characters, encoding as entities</primary></indexterm>

Character entities are also used to give a name to special characters
that can't otherwise be typed or are not portable across applications
and operating systems. You can then include these characters in your
document by refering to their entity name. Instead of using the often
obscure and inconsistent key combinations of your particular word
processor to type, say, an uppercase letter U with an umlaut (&Uuml;),
you type in an entity for it instead. For instance, the entity for an
uppercase letter U with an umlaut has been defined as the entity
<literal>Uuml</literal>, so you would type in <sgmltag class="genentity">Uuml</sgmltag> to reference it instead of the actual
character. The &SGML; application that eventually processes your
document for presentation will match the entity to your platform's
handling of special characters in order to render it
appropriately.
</para>
</sect3>
</sect2><!--general entities-->
<sect2><title>Parameter Entities</title>
<para>
<indexterm><primary>entities</primary>
  <secondary>parameter entities</secondary><see>parameter entities</see></indexterm>
<indexterm><primary>parameter entities</primary></indexterm>

Parameter entities are only recognized in markup declarations (in the
&DTD;, for example). Instead of beginning with an ampersand, they
begin with a percent sign.  Parameter entities are most frequently
used to customize the &DTD;. For a detailed discussion of this topic,
see <xref linkend="app-customizing"/>. Following are some other uses for
them.
</para>
<sect3 id="s-ms"><title>Marked sections</title>
<para>
<indexterm><primary>marked sections</primary></indexterm>
<indexterm><primary>SGML</primary>
  <secondary>marked sections</secondary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>marked sections</secondary></indexterm>

You might use a parameter entity reference in an &SGML; document in a
marked section. Marking sections is a mechanism for indicating that
special processing should apply to a particular block of text.  Marked
sections are introduced by the special sequence
<literal>&lt;![<replaceable>keyword</replaceable>[</literal> and end
with <literal>]]&gt;</literal>.  In &SGML;, marked sections can appear
in both &DTD;s and document instances.  In &XML;, they're only allowed
in the &DTD;.<footnote>
<para>
<indexterm><primary>CDATA</primary>
  <secondary>marked sections</secondary></indexterm>
Actually, CDATA marked sections are allowed in an &XML; document, but
the keyword cannot be a parameter entity, and it must be typed
literally. See the examples on this page.
</para>
</footnote>
</para>
<para>
<indexterm><primary>keywords</primary>
  <secondary>marked sections</secondary></indexterm>
<indexterm><primary>INCLUDE keyword (marked section)</primary></indexterm>
<indexterm><primary>IGNORE keyword (marked section)</primary></indexterm>

The most common keywords are <literal>INCLUDE</literal>, which
indicates that the text in the marked section should be included in
the document; <literal>IGNORE</literal>, which indicates that the text
in the marked section should be ignored (it completely disappears from
the parsed document); and <literal>CDATA</literal>, which indicates
that all markup characters within that section should be ignored
except for the closing characters <literal>]]&gt;</literal>.
</para>
<para>
<indexterm><primary>SGML</primary>
  <secondary>keywords as parameter entities</secondary></indexterm>
In &SGML;, these keywords can be parameter entities. For example, you
might declare the following parameter entity in your document:
</para>

<screen><![CDATA[<!ENTITY % draft "INCLUDE">]]></screen>

<para>
Then you could put the sections of the document that are only applicable
in a draft within marked sections:
</para>

<screen>&lt;![%draft;[
&lt;para>
This paragraph only appears in the draft version.
&lt;/para>
]]&gt;</screen>

<para>
When you're ready to print the final version, simply change the 
<literal>draft</literal> parameter entity declaration:
</para>

<screen><![CDATA[<!ENTITY % draft "IGNORE">]]></screen>

<para>
and publish the document. None of the draft sections will appear.
<indexterm startref="SGMLbasicconceptch01" class="endofrange"/>
<indexterm startref="XMLbasicconceptch01" class="endofrange"/>
</para>
</sect3>
</sect2>
</sect1>
<sect1 id="ch01-wheredocbook"><title>How Does DocBook Fit In?</title>
<para>
<indexterm><primary>DocBook DTD</primary>
  <secondary>history and overview</secondary></indexterm>

DocBook is a very popular set of tags for describing books, articles,
and other prose documents, particularly technical
documentation. DocBook is defined using the native &DTD; syntax of
&SGML; and &XML;. Like &HTML;, DocBook is an example of a markup
language defined in &SGML;/&XML;.
</para>
<sect2><title>A Short DocBook History</title>
<para>
DocBook is almost 10 years old. It began in 1991 as a joint project of
HaL Computer Systems and O'Reilly. Its popularity grew, and eventually
it spawned its own maintenance organization, the Davenport Group. In
mid-1998, it became a Technical Committee (<acronym>TC</acronym>) of
the Organization for the Advancement of Structured Information
Standards (<acronym>OASIS</acronym>).
</para>
<sect3><title>The HaL and O'Reilly era</title>
<para>
<indexterm><primary>Open Software Foundation</primary></indexterm>
<indexterm><primary>troff markup (UNIX documentation)</primary></indexterm>
<indexterm><primary>UNIX</primary>
  <secondary>DocBook DTD, development</secondary></indexterm>

The DocBook &DTD; was originally designed and implemented by HaL
Computer Systems and O'Reilly &amp; Associates around 1991. It was
developed primarily to facilitate the exchange of &UNIX; documentation
originally marked up in <command>troff</command>. Its design appears
to have been based partly on input from &SGML; interchange projects
conducted by the Unix International and Open Software Foundation
consortia.
</para>
<para>
<indexterm><primary>Davenport Group (DocBook maintenance)</primary></indexterm>
When DocBook <acronym>V1.1</acronym> was published, discussion about
its revision and maintenance began in earnest in the Davenport Group,
a forum created by O'Reilly for computer documentation
producers. Version 1.2 was influenced strongly by
Novell and Digital.
</para>
<para>
In 1994, the Davenport Group became an officially chartered entity
responsible for DocBook's maintenance. DocBook
<acronym>V1.2.2</acronym> was published simultaneously. The founding
sponsors of this incarnation of Davenport include the following
people:
<itemizedlist spacing="compact">
<listitem><para>Jon Bosak, Novell</para></listitem>
<listitem><para>Dale Dougherty, O'Reilly &amp; Associates</para></listitem>
<listitem><para>Ralph Ferris, Fujitsu <acronym>OSSI</acronym></para></listitem>
<listitem><para>Dave Hollander, Hewlett-Packard</para></listitem>
<listitem><para>Eve Maler, Digital Equipment Corporation</para></listitem>
<listitem><para>Murray Maloney, <acronym>SCO</acronym></para></listitem>
<listitem><para>Conleth O'Connell, HaL Computer Systems</para></listitem>
<listitem><para>Nancy Paisner, Hitachi Computer Products</para></listitem>
<listitem><para>Mike Rogers, SunSoft</para></listitem>
<listitem><para>Jean Tappan, Unisys</para></listitem>
</itemizedlist>
</para>
</sect3>
<sect3><title>The Davenport era</title>
<para>
Under the auspices of the Davenport Group, the DocBook &DTD; began to
widen its scope. It was now being used by a much wider audience, and
for new purposes, such as direct authoring with &SGML;-aware tools,
and publishing directly to paper. As the largest users of DocBook,
Novell and Sun had a heavy influence on its design.
</para>
<para>
<indexterm><primary>DocBook DTD</primary>
  <secondary>releases, rules for new versions</secondary></indexterm>

In order to help users manage change, the new Davenport charter established
the following rules for DocBook releases:
<itemizedlist>
<listitem><para>Minor versions (<quote>point releases</quote> such as
<acronym>V2.2</acronym>) could add to the markup model, but could not
change it in a backward-incompatible way. For example, a new kind of
list element could be added, but it would not be acceptable for the
existing itemized-list model to start requiring two list items inside
it instead of only one. Thus, any document conforming to version
<replaceable>n</replaceable>.0 would also conform to
<replaceable>n</replaceable>.<replaceable>m</replaceable>.</para>
</listitem>
<listitem><para>Major versions (such as <acronym>V3.0</acronym>) could
both add to the markup model and make backward-incompatible
changes. However, the changes would have to be announced in the last
major release.</para>
</listitem>
<listitem><para>Major-version introductions must be separated by at
least a year.</para>
</listitem>
</itemizedlist>
</para>
<para>
<indexterm><primary>DocBook DTD</primary>
  <secondary>XML</secondary>
    <tertiary>XML-compliant version</tertiary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>DocBook version compliant with</secondary></indexterm>

<acronym>V3.0</acronym> was released in January 1997. After that time,
although DocBook's audience continued to grow, many of the Davenport
Group stalwarts became involved in the &XML; effort, and development
slowed dramatically. The idea of creating an official &XML;-compliant
version of DocBook was discussed, but not implemented. (For more
detailed information about DocBook <acronym>V3.0</acronym> and plans
for subsequent versions, see <xref linkend="app-versions"/>.)
</para>
<para>
<indexterm><primary>OASIS</primary>
  <secondary>DocBook Technical Committee</secondary></indexterm>

The sponsors wanted to close out Davenport in an orderly way to ensure
that DocBook users would be supported. It was suggested that
<acronym>OASIS</acronym> become DocBook's new home. An
<acronym>OASIS</acronym> DocBook Technical Committee was formed in
July, 1998, with Eduardo Gutentag of Sun Microsystems as chair.
</para>
</sect3>
<sect3>
<title>The <acronym>OASIS</acronym> era</title>
<para>
The <ulink url="http://www.oasis-open.org/docbook/">DocBook Technical
Commitee</ulink> is continuing the work started by the
Davenport Group. The transition from Davenport to
<acronym>OASIS</acronym> has been very smooth, in part because the
core design team consists of essentially the same individuals (we all
just changed hats).
</para>
<para>
DocBook <acronym>V3.1</acronym>, published in February 1999, was the
first <acronym>OASIS</acronym> release.  It integrated a number of
changes that had been <quote>in the wings</quote> for some time.
</para>

<para>In February of 2001, OASIS made DocBook SGML V4.1 and DocBook XML V4.1.2
<ulink url="http://lists.oasis-open.org/archives/members/200102/msg00000.html">official
OASIS Specifications</ulink>.
</para>

<para><ulink url="http://www.oasis-open.org/docbook/specs/cs-docbook-docbook-4.2.html">Version 4.2</ulink> of the DocBook &DTD;, for both &SGML; and &XML;, was
released in July 2002.</para>

<para>
The committee continues new DocBook development to ensure
that the &DTD; continues to meet the needs of its users.  Forthcoming
and experimental work includes:
</para>

<itemizedlist>
<listitem><para>A V5.0 DTD projected for release no earlier than the end of
2002.
</para></listitem>
<listitem><para>Experimental
<ulink url="http://www.oasis-open.org/committees/relax-ng/">RELAX NG</ulink> schemas
<ulink url="http://www.oasis-open.org/docbook/relaxng">available</ulink>.</para></listitem>
<listitem><para>Experimental
<ulink url="http://www.w3.org/XML/Schema">W3C XML Schema</ulink> versions
<ulink url="http://www.oasis-open.org/docbook/xmlschema/">available</ulink>.</para></listitem>
<listitem><para>Experimental
<ulink url="http://www.xml.gr.jp/relax/">RELAX</ulink> schemas
<ulink url="http://www.oasis-open.org/docbook/relax/">available</ulink>.</para></listitem>
<listitem><para>Experimental
<ulink url="http://www.thaiopensource.com/trex/">TREX</ulink> schemas
<ulink url="http://www.oasis-open.org/docbook/trex/">available</ulink>.</para></listitem>
</itemizedlist>

<indexterm startref="XMLgetstart" class="endofrange"/>
<indexterm startref="getstartSGML" class="endofrange"/>

</sect3>
</sect2>
</sect1>
</chapter>

<!--
Local Variables:
mode: xml
sgml-parent-document: ("book.xml" "chapter")
End:
-->
<chapter id="ch-create">
<?dbhtml filename="ch02.html"?>
<chapterinfo>
<pubdate>$Date: 2006-03-08 16:42:23 +0300 (Ср, 08 мар 2006) $</pubdate>
<releaseinfo>$Revision: 5626 $</releaseinfo>
</chapterinfo>
<title>Creating DocBook Documents</title>
<para>
<indexterm id="DocBookDocch02" class='startofrange'>
  <primary>DocBook DTD</primary>
  <secondary>documents</secondary>
  <tertiary>creating in SGML</tertiary>
</indexterm>
<indexterm id="documentsDocBookch02" class='startofrange'>
  <primary>documents</primary>
  <secondary>creating</secondary>
  <tertiary>DocBook</tertiary>
</indexterm>This chapter explains in concrete, practical terms how to
make DocBook documents. It's an overview of all the kinds of markup
that are possible in DocBook documents. It explains how to create
several kinds of DocBook documents: books, sets of books, chapters,
articles, and reference manual entries. The idea is to give you enough
basic information to actually start writing. The information here is
intentionally skeletal; you can find &ldquo;the details&rdquo; in the
reference section of this book.
</para>
<para>
Before we can examine DocBook markup, we have to take a look at what
an &SGML; or &XML; system requires.
</para>
<sect1 id="ch02-makesgml"><title>Making an &SGML; Document</title>
<para>
<indexterm><primary>SGML</primary>
  <secondary>documents, creating</secondary></indexterm>

<indexterm><primary>prologue</primary>
  <secondary>SGML documents</secondary></indexterm>
&SGML; requires that your document have a specific prologue. The
following sections describe the features of the prologue.
</para>
<sect2><title>An &SGML; Declaration</title>
<para>
<indexterm><primary>SGML</primary>
  <secondary>declarations</secondary></indexterm>
<indexterm><primary>declarations</primary>
  <secondary>SGML documents</secondary></indexterm>

&SGML; documents begin with an optional &SGML; Declaration. The
declaration can precede the document instance, but generally it is
stored in a separate file that is associated with the &DTD;. The
&SGML; Declaration is a grab bag of &SGML; defaults. DocBook includes
an &SGML; Declaration that is appropriate for most DocBook documents,
so we won't go into a lot of detail here about the &SGML; Declaration.
</para>
<para>
<indexterm><primary>markup</primary>
  <secondary>delimiters (characters)</secondary></indexterm>
<indexterm><primary>tags</primary>
  <secondary>names</secondary>
    <tertiary>SGML declaration</tertiary></indexterm>
<indexterm><primary>attributes</primary>
  <secondary>names</secondary></indexterm>
<indexterm><primary>characters</primary>
  <secondary>SGML declaration</secondary></indexterm>
<indexterm><primary>minimization</primary>
  <secondary>markup</secondary></indexterm>
<indexterm><primary>markup</primary>
  <secondary>minimization</secondary></indexterm>

In brief, the &SGML; Declaration describes, among other things, what
characters are markup delimiters (the default is angle brackets), what
characters can compose tag and attribute names (usually the
alphabetical and numeric characters plus the dash and the period),
what characters can legally occur within your document, how long
&SGML; &ldquo;names&rdquo; and &ldquo;numbers&rdquo; can be, what sort
of minimizations (abbreviation of markup) are allowed, and so
on. Changing the &SGML; Declaration is rarely necessary, and because
many tools only partially support changes to the declaration, changing
it is best avoided, if possible.
</para>
<para>
<indexterm><primary>tutorial, SGML Declaration</primary></indexterm>

Wayne Wholer has written an excellent tutorial on the &SGML;
Declaration; if you're interested in more details, see <ulink url="http://www.oasis-open.org/cover/wlw11.html">http://www.oasis-open.org/cover/wlw11.html</ulink>.
</para>
</sect2>
<sect2><title>A Document Type Declaration</title>
<para>
<indexterm><primary>SGML</primary>
  <secondary>document type declaration</secondary></indexterm>
<indexterm><primary>document type declaration</primary>
  <secondary>SGML documents</secondary></indexterm>
<indexterm><primary>declarations</primary>
  <secondary>document type declaration</secondary></indexterm>
<indexterm><primary>declarations</primary>
  <secondary>document type declaration</secondary>
    <tertiary>SGML</tertiary></indexterm>

All &SGML; documents must begin with a document type declaration. This
identifies the &DTD; that will be used by the document and what the
root element of the document will be. A typical doctype declaration
for a DocBook document looks like this:
</para>
<screen>&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V3.1//EN"></screen>
<para>
<indexterm><primary>root element</primary>
  <secondary>document type declaration</secondary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>root element</secondary></indexterm>
This declaration indicates that the <firstterm>root element</firstterm>,
which is the first element in the hierarchical structure of the
document, will be <sgmltag class="starttag">book</sgmltag> and that
the &DTD; used will be the one identified by the public identifier
<literal>-//OASIS//DTD DocBook V3.1//EN</literal>. See <xref linkend="ch.create.pubids"/>&rdquo; later in this chapter.
</para>
</sect2>
<sect2>
<title>An Internal Subset</title>
<para>
<indexterm><primary>internal subset</primary>
  <secondary>SGML document declarations</secondary></indexterm>

It's also possible to provide additional declarations in a document
by placing them in the document type declaration:</para>
<screen>&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V3.1//EN" [
&lt;!ENTITY nwalsh "Norman Walsh">
&lt;!ENTITY chap1 SYSTEM "chap1.sgm">
&lt;!ENTITY chap2 SYSTEM "chap2.sgm">
]></screen>

<para>
<indexterm><primary>external subset</primary>
  <secondary>SGML document declarations</secondary></indexterm>
<indexterm><primary>public identifiers</primary>
  <secondary>SGML</secondary></indexterm>
<indexterm><primary>system identifiers</primary>
  <secondary>SGML</secondary></indexterm>

These declarations form what is known as the
<firstterm>internal subset</firstterm>. The declarations stored in the
file referenced by the public or system identifier in the 
<literal>DOCTYPE</literal> declaration is called the <firstterm>external
subset</firstterm> and it is technically optional.
It is legal to put the &DTD; in the internal
subset and to have no external subset, but for a &DTD; as large
as DocBook that wouldn't make much sense.
</para>

<note>
<para>
<indexterm><primary>parsing</primary>
  <secondary>order</secondary></indexterm>
The internal subset is parsed <emphasis>first</emphasis>
and, if multiple declarations for an entity occur, the first
declaration is used.  Declarations in the internal subset
override declarations in the external subset.</para>
</note>
</sect2>
<sect2>
<title>The Document (or Root) Element</title>
<para>
<indexterm><primary>elements</primary>
  <secondary>root element</secondary></indexterm>
<indexterm><primary>root element</primary>
  <secondary>placement</secondary></indexterm>

Although comments and processing instructions may occur between the
document type declaration and the root element, the root element usually
immediately follows the document type declaration:</para>
<screen>&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V3.1//EN" [
&lt;!ENTITY nwalsh "Norman Walsh">
&lt;!ENTITY chap1 SYSTEM "chap1.sgm">
&lt;!ENTITY chap2 SYSTEM "chap2.sgm">
]>
&lt;book>
&amp;chap1;
&amp;chap2;
&lt;/book></screen>
<para>You cannot place the root element of
the document in an external entity.</para>
</sect2>
<sect2 id="ch02-typexml"><title>Typing an &SGML; Document</title>
<para>
<indexterm><primary>Emacs text editor</primary></indexterm>
<indexterm><primary>vi text editor</primary></indexterm>
<indexterm><primary>SGML</primary>
  <secondary>text editors, entering through</secondary></indexterm>
<indexterm><primary>text editors</primary>
  <secondary>SGML, entering</secondary></indexterm>

If you are entering &SGML; using a text editor such as
<application>Emacs</application> or <application>vi</application>, there are a few things to
keep in mind.<footnote>
<para>
Many of these things are influenced by the &SGML; declaration in use.
For the purpose of this discussion, we assume you are using the
standard DocBook declaration.
</para>
</footnote>
Using a structured text editor designed for &SGML; hides most of these
issues.
</para>
<itemizedlist>
<listitem><para>
<indexterm><primary>elements</primary>
  <secondary>case sensitivity (DocBook)</secondary></indexterm>
<indexterm><primary>case sensitivity</primary>
  <secondary>elements (DocBook)</secondary></indexterm>
<indexterm><primary>attributes</primary>
  <secondary>case sensitivity (DocBook)</secondary></indexterm>
<indexterm><primary>case sensitivity</primary>
  <secondary>attributes (DocBook)</secondary></indexterm>

DocBook element and attribute names are not case-sensitive.  There's
no difference between <sgmltag class='starttag'>Para</sgmltag> and <sgmltag class='starttag'>pArA</sgmltag>.  Entity names are case-sensitive, however.
</para>
<para>
<indexterm><primary>SGML</primary>
  <secondary>XML/SGML compatibility</secondary>
    <tertiary>case sensitivity</tertiary></indexterm>

<indexterm><primary>XML</primary>
  <secondary>SGML/XML compatibility</secondary>
    <tertiary>case sensitivity, attributes and elements</tertiary></indexterm>
<indexterm><primary>compatibility, SGML/XML conversion</primary>
  <secondary>case sensitivity, attribute and element names</secondary></indexterm>
If you are interested in future &XML; compatibility, input all
element and attribute names strictly in lowercase.
</para>
</listitem>
<listitem><para>
<indexterm><primary>SGML</primary>
  <secondary>XML/SGML compatibility</secondary>
    <tertiary>quotes, attribute values</tertiary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>SGML/XML compatibility</secondary>
    <tertiary>quotes, attribute values</tertiary></indexterm>
<indexterm><primary>quotes</primary>
  <secondary>attribute values</secondary>
    <tertiary>spaces and punctuation characters</tertiary></indexterm>
<indexterm><primary>attributes</primary>
  <secondary>values</secondary>
    <tertiary>quoting</tertiary></indexterm>
<indexterm><primary>spaces, quoting (attribute values)</primary></indexterm>
<indexterm><primary>punctuation characters, quoting (attribue values)</primary></indexterm>

If attribute values contain spaces or punctuation characters, you must
quote them. You are not required to quote attribute values if they
consist of a single word or number, although it is not wrong to do so.
</para>
<para>
<indexterm><primary>straight single quotes (attribute values)</primary></indexterm>
<indexterm><primary>straight double quotes (attribute values)</primary></indexterm>
<indexterm><primary>curly quotes (attribute values)</primary></indexterm>
When quoting attribute values, you can use either a straight single
quote (&apos;), or a straight double quote (&quot;).  Don't use the
&ldquo;curly&rdquo; quotes (&ldquo; and &rdquo;) in your editing tool.
</para>
<para>
<indexterm><primary>compatibility, SGML/XML conversion</primary>
  <secondary>attribute values, quoting</secondary></indexterm>
If you are interested in future &XML; compatibility, always
quote all attribute values.
</para>
</listitem>
<listitem><para>

<indexterm><primary>SGML</primary>
  <secondary>XML/SGML compatibility</secondary>
    <tertiary>empty tags</tertiary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>SGML/XML compatibility</secondary>
    <tertiary>empty tags</tertiary></indexterm>
<indexterm><primary>compatibility, SGML/XML conversion</primary>
  <secondary>empty tags</secondary></indexterm>
<indexterm><primary>tags</primary>
  <secondary>empty</secondary></indexterm>
<indexterm><primary>empty tags</primary></indexterm>
Several forms of markup minimization are allowed, including empty
tags. Instead of typing the entire end tag for an element, you can
type simply <literal>&lt;/></literal>. For example:
</para>
<screen>
<![CDATA[
<para>
This is <emphasis>important</>: never stick the tines of a fork
in an electrical outlet.
</para>
]]>
</screen>
<para>
You can use this technique for any and every tag, but it will make
your documents very hard to understand and difficult to debug if you 
introduce errors.  It is best to use this technique
only for inline elements containing a short string of text.
</para>
<para>
<indexterm><primary>start tags</primary>
  <secondary>empty, using (SGML documents)</secondary></indexterm>
<indexterm><primary>parsing</primary>
  <secondary>empty start tags, problems with</secondary></indexterm>
Empty start tags are also possible, but may be even more confusing.
For the record, if you encounter an empty start tag, the &SGML; parser uses
the element that ended last:
</para>
<screen>
<![CDATA[
<para>
This is <emphasis>important</emphasis>.  So is <>this</emphasis>.
</para>
]]>
</screen>
<para>
Both <quote>important</quote> and <quote>this</quote> are emphasized.
</para>
<para>
<indexterm><primary>markup</primary>
  <secondary>minimization</secondary>
    <tertiary>SGML/XML conversion problems</tertiary></indexterm>
<indexterm><primary>minimization</primary>
  <secondary>markup</secondary>
    <tertiary>SGML/XML conversion problems</tertiary></indexterm>
If you are interested in future &XML; compatibility, don't use any
of these tricks.
</para>
</listitem>
<listitem>
<para>
The null end tag (net) minimization feature allows constructions like this:
</para>
<screen>
<![CDATA[
<para>
This is <emphasis/important/: never stick the tines of a fork
in an electrical outlet.
</para>
]]>
</screen>
<para>
<indexterm><primary>start tags</primary>
  <secondary>minimization</secondary></indexterm>
If, instead of ending a start tag with <literal>></literal>, you end
it with a slash, then the next occurrence of a slash ends the element.
</para>
<para>
<indexterm><primary>minimization</primary>
  <secondary>markup</secondary>
    <tertiary>net tag minimization</tertiary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>SGML/XML compatibility</secondary>
    <tertiary>net tag minimization</tertiary></indexterm>
<indexterm><primary>SGML</primary>
  <secondary>XML/SGML compatibility</secondary>
    <tertiary>net tag minimization</tertiary></indexterm>

If you are interested in future &XML; compatibility, don't use
net tag minimization either.
</para>
</listitem>
</itemizedlist>
<para>
If you are willing to modify both the declaration and the &DTD;, even more
dramatic minimizations are possible, including completely omitted tags
and <quote>shortcut</quote> markup.
</para>

<note><title>Removing Minimizations</title>
<para>
<indexterm><primary>markup</primary>
  <secondary>minimization</secondary>
    <tertiary>removing</tertiary></indexterm>
<indexterm><primary>minimization</primary>
  <secondary>removing</secondary></indexterm>

Although we've made a point of reminding you about which of these
minimization features are not valid in &XML;, that's not really a
sufficient reason to avoid using them.  (The fact that many of the
minimization features can lead to confusing, difficult-to-author
documents might be.)
</para>
<para>
<indexterm><primary>SGML</primary>
  <secondary>XML/SGML compatibility</secondary>
    <tertiary>markup minimizations, removing</tertiary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>SGML/XML compatibility</secondary>
    <tertiary>markup minimizations, removing</tertiary></indexterm>
<indexterm><primary>sgmlnorm (SGML to XML conversion)</primary></indexterm>
If you want to convert one of these documents to &XML; at some point
in the future, you can run it through a program like
<command>sgmlnorm</command>, which will remove all the minimizations and
insert the correct, verbose markup.  The <command>sgmlnorm</command> program
is part of the <ulink url="http://www.jclark.com/">SP and Jade
distributions</ulink>, which are on <link linkend="app-cdrom">the
<acronym>CD-ROM</acronym></link>.
</para>
</note>

</sect2>
</sect1>
<sect1 id="ch02-makexml">
<title>Making an &XML; Document</title>
<para>
<indexterm><primary>XML</primary>
  <secondary>DocBook documents, creating</secondary></indexterm>
<indexterm><primary>DocBook DTD</primary>
  <secondary>documents</secondary>
    <tertiary>creating in XML</tertiary></indexterm>
<indexterm><primary>documents</primary>
  <secondary>creating</secondary>
    <tertiary >in XML (DocBook)</tertiary></indexterm>

In order to create DocBook documents in &XML;, you'll need an &XML;
version of DocBook. We've included one on the <acronym>CD</acronym>, but it hasn't
been officially adopted by the <acronym>OASIS</acronym> DocBook Technical Committee yet.
If you're interested in the technical details, <xref linkend="app-xml"/>, describes the specific differences between
&SGML; and &XML; versions of DocBook.
</para>
<para>
<indexterm><primary>prologue</primary>
  <secondary>XML documents</secondary></indexterm>

&XML;, like &SGML;, requires a specific prologue in your document.
The following sections describe the features of the &XML; prologue.
</para>
<sect2>
<title>An &XML; Declaration</title>
<para>
<indexterm><primary>declarations</primary>
  <secondary>XML</secondary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>declarations</secondary></indexterm>
<indexterm><primary>versions</primary>
  <secondary>XML, identifying</secondary></indexterm>
&XML; documents should begin with an &XML; declaration. Unlike the
&SGML; declaration, which is a grab bag of features, the &XML;
declaration identifies a few simple aspects of the document:</para>
<screen>&lt;?xml version="1.0" standalone="no"?></screen>
<para>Identifying the version of &XML; ensures that future changes to
the &XML; specification will not alter the semantics of this
document. The standalone declaration simply makes explicit the fact
that this document cannot &ldquo;stand alone,&rdquo; and that it
relies on an external &DTD;. The complete details of the &XML;
declaration are described in the <ulink url="http://www.w3.org/TR/REC-xml">&XML; specification</ulink>.
</para>
</sect2>
<sect2>
<title>A Document Type Declaration</title>
<para>
<indexterm><primary>declarations</primary>
  <secondary>document type declaration</secondary>
    <tertiary>XML</tertiary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>document type declaration</secondary></indexterm>
<indexterm><primary>document type declaration</primary>
  <secondary>XML documents</secondary></indexterm>
<indexterm><primary>DocBook DTD</primary>
  <secondary>XML</secondary>
    <tertiary>document type declaration</tertiary></indexterm>
Strictly speaking, &XML; documents don't require a
&DTD;. Realistically, DocBook &XML; documents will have one.
</para>
<para>
<indexterm><primary>elements</primary>
  <secondary>root element</secondary></indexterm>
<indexterm><primary>root element</primary>
  <secondary>document type declaration</secondary></indexterm>
The document type declaration identifies the &DTD; that will be used
by the document and what the root element of the document will be. A
typical doctype declaration for a DocBook document looks like
this:
</para>
<screen>&lt;?xml version='1.0'?>
&lt;!DOCTYPE book PUBLIC "-//Norman Walsh//DTD DocBk XML V3.1.4//EN"
                         "http://nwalsh.com/docbook/xml/3.1.4/db3xml.dtd">
</screen>
<para>
<indexterm><primary>external declarations (XML)</primary></indexterm>
<indexterm><primary>public identifiers</primary>
  <secondary>XML documents</secondary></indexterm>
<indexterm><primary>system identifiers</primary>
  <secondary>XML</secondary></indexterm>
This declaration indicates that the root element will be <sgmltag class="starttag">book</sgmltag> and that the &DTD; used will be the
one indentified by the public identifier <literal>-//Norman Walsh//DTD
DocBk XML V3.1.4//EN</literal>. External declarations in &XML; must
include a system identifier (the public identifier is optional). In
this example, the &DTD; is stored on a web server.
</para>
<para>
<indexterm><primary>URI</primary>
  <secondary>XML system identifiers</secondary></indexterm>
System identifiers in &XML; must be <acronym>URI</acronym>s. Many
systems may accept filenames and interpret them locally as
<literal>file:</literal> <acronym>URL</acronym>s, but it's always
correct to fully qualify them.
</para>
</sect2>
<sect2>
<title>An Internal Subset</title>
<para>
<indexterm><primary>declarations</primary>
  <secondary>document type declaration</secondary>
    <tertiary>XML</tertiary></indexterm>
<indexterm><primary>document type declaration</primary>
  <secondary>internal subset</secondary></indexterm>
<indexterm><primary>internal subset</primary>
  <secondary>XML document type declarations</secondary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>document type declarations</secondary>
    <tertiary>internal subset</tertiary></indexterm>
It's also possible to provide additional declarations in a document by
placing them in the document type declaration:
</para>
<screen>&lt;?xml version='1.0'?>
&lt;!DOCTYPE book PUBLIC "-//Norman Walsh//DTD DocBk XML V3.1.4/EN"
                         "http://nwalsh.com/docbook/xml/3.1.4/db3xml.dtd" [
&lt;!ENTITY nwalsh "Norman Walsh">
&lt;!ENTITY chap1 SYSTEM "chap1.sgm">
&lt;!ENTITY chap2 SYSTEM "chap2.sgm">
]></screen>
<para>
These declarations form what is known as the internal subset. The
declarations stored in the file referenced by the public or system
identifier in the <literal>DOCTYPE</literal> declaration is called the
external subset, which is technically optional.  It is legal to put
the &DTD; in the internal subset and to have no external subset, but
for a &DTD; as large as DocBook, that would make very little sense.
</para>
<note>
<para>
<indexterm><primary>parsing</primary>
  <secondary>order</secondary>
    <tertiary>XML document declarations</tertiary></indexterm>

The internal subset is parsed <emphasis>first</emphasis> in &XML; and,
if multiple declarations for an entity occur, the first declaration is used.
Declarations in the internal subset override declarations in the external
subset.</para>
</note>
</sect2>
<sect2>
<title>The Document (or Root) Element</title>
<para>
<indexterm><primary>root element</primary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>root element</secondary></indexterm>
Although comments and processing instructions may occur between the
document type declaration and the root element, the root element usually
immediately follows the document type declaration:</para>
<screen>&lt;?xml version='1.0'?>
&lt;!DOCTYPE book PUBLIC "-//Norman Walsh//DTD DocBk XML V3.1.4//EN"
                         "http://nwalsh.com/docbook/xml/3.1.4/db3xml.dtd" [
&lt;!ENTITY nwalsh "Norman Walsh">
&lt;!ENTITY chap1 SYSTEM "chap1.sgm">
&lt;!ENTITY chap2 SYSTEM "chap2.sgm">
]>
&lt;book>...&lt;/book></screen>
<para>The important point is that the root element must be physically
present immediately
after the document type declaration. You cannot place the root element of
the document in an external entity.</para>
</sect2>

<sect2><title>Typing an &XML; Document</title>
<para>
<indexterm><primary>text editors</primary></indexterm>

If you are entering &SGML; using a text editor such as <application>Emacs</application>
or <application>vi</application>, there are a few things to keep in mind.
Using a structured text editor designed for
&XML; hides most of these issues.
</para>
<itemizedlist>
<listitem><para>
<indexterm><primary>case sensitivity</primary>
  <secondary>markup</secondary></indexterm>
<indexterm><primary>markup</primary>
  <secondary>case sensitivity</secondary></indexterm>
<indexterm><primary>compatibility, SGML/XML conversion</primary>
  <secondary>XML markup, case-sensitivity</secondary></indexterm>

In &XML;, all markup is case-sensitive.  In the &XML; version of DocBook,
you must always type all element,
attribute, and entity names in lowercase.
</para>
</listitem>
<listitem><para>
You are required to quote all attribute values in &XML;.
</para>
<para>
<indexterm><primary>quotes</primary>
  <secondary>attribute values</secondary></indexterm>

When quoting attribute values, you can use either a straight single
quote (&apos;), or a straight double quote (&quot;).  Don't use the
&ldquo;curly&rdquo; quotes (&ldquo; and &rdquo;) in your editing tool.
</para>
</listitem>
<listitem>
<para>
<indexterm><primary>empty elements</primary>
  <secondary>markup syntax</secondary></indexterm>

Empty elements in &XML; are marked with a distinctive syntax:
<literal>&lt;xref/></literal>.
</para>
</listitem>
<listitem>
<indexterm><primary>XML</primary>
  <secondary>question marks (?), processing instructions</secondary></indexterm>
<para>Processing instructions in &XML; begin and end with a question mark:
<literal>&lt;?pitarget data?></literal>.
</para>
</listitem>
<listitem><para>
<indexterm><primary>XML</primary>
  <secondary>interoperability, SGML and XML</secondary></indexterm>

&XML; was designed to be served, received, and processed over the
Web. Two of its most important design principles are ease of
implementation and interoperability with both &SGML; and &HTML;.
</para>
<para>
<indexterm><primary>SGML</primary>
  <secondary>XML/SGML compatibility</secondary>
    <tertiary>markup minimization, problems</tertiary></indexterm>

<indexterm><primary>SGML</primary>
  <secondary>markup minimization</secondary><see>XML/SGML compatibility</see></indexterm>
<indexterm><primary>XML</primary>
  <secondary>markup minimization</secondary><see>SGML/XML compatibility</see></indexterm>
<indexterm><primary>XML</primary>
  <secondary>SGML/XML compatibility</secondary>
    <tertiary>markup minization, problems</tertiary></indexterm>

The markup minimization features in &SGML; documents make it more
difficult to process, and harder to write a parser to interpret it; these
minimization features also run counter to the &XML; design principles
named above. As a result, &XML; does not support them.
</para>
<para>
Luckily, a good authoring environment can offer all of the features of
markup minimization without interfering with the interoperability of
documents.  And because &XML; tools are easier to write, it's likely
that good, inexpensive &XML; authoring environments will be available
eventually.
</para>
</listitem>
</itemizedlist>
</sect2>
<sect2>
<title>&XML; and &SGML; Markup Considerations in This Book</title>
<para>
<indexterm><primary>DocBook DTD</primary>
  <secondary>markup considerations, SGML vs. XML</secondary></indexterm>

Conceptually, almost everything in this book applies equally to &SGML;
and &XML;.  But because DocBook V3.1 is an &SGML; &DTD;, we naturally
tend to use &SGML; conventions in our writing.  If you're primarily
interested in &XML;, there are just a few small details to keep in
mind.
</para>
<itemizedlist>
<listitem>
<para>
<indexterm><primary>case sensitivity</primary>
  <secondary>XML vs. SGML</secondary></indexterm>
<indexterm><primary>SGML</primary>
  <secondary>case sensitivity</secondary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>case sensitivity (XML)</secondary></indexterm>
&XML; is case-sensitive, while the &SGML; version of DocBook is
not. In this book, we've chosen to present the element names using
mixed case (<sgmltag>Book</sgmltag>, <sgmltag>indexterm</sgmltag>,
<sgmltag>XRef</sgmltag>, and so on), but in the DocBook &XML; &DTD;,
all element, attribute, and entity names are strictly
lowercase.</para>
</listitem>
<listitem>
<para>
<indexterm><primary>empty elements</primary>
  <secondary>start tags, XML vs. SGML</secondary></indexterm>
<indexterm><primary>start tags</primary>
  <secondary>empty element</secondary></indexterm>
Empty element start tags in &XML; are marked with a distinctive
syntax: <literal>&lt;xref/></literal>.  In &SGML;, the trailing slash
is not present, so some of our examples need slight revisions to be
valid &XML; elements.
</para>
</listitem>
<listitem>
<para>
<indexterm><primary>question marks (?), processing instructions (XML)</primary></indexterm>
<indexterm><primary>processing instructions</primary>
  <secondary>XML documents</secondary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>processing instructions</secondary></indexterm>

Processing instructions in &XML; begin and end with a question
mark: <literal>&lt;?pitarget data?></literal>.  In &SGML;, the
trailing question mark is not present, so some of our examples need
slight revisions to be valid &XML; elements.
</para>
</listitem>
<listitem>
<para>
<indexterm><primary>system identifiers</primary>
  <secondary>XML</secondary>
    <tertiary>URI requirement</tertiary></indexterm>
<indexterm><primary>Uniform Resource Indicators</primary><see>URI</see></indexterm>
<indexterm><primary>public identifiers</primary>
  <secondary>DocBook DTD</secondary>
    <tertiary>examples</tertiary></indexterm>
Generally we use public identifiers in examples, but whenever system
identifiers are used, don't forget that &XML; system identifiers must
be Uniform Resource Indicators (<acronym>URI</acronym>s), in which
&SGML; system identifiers are usually simple filenames.
</para>
</listitem>
</itemizedlist>
<para>
For a more detailed discussion of DocBook and &XML;, see
<xref linkend="app-xml"/>.
</para>
</sect2>
</sect1>
<sect1 id="s-pid-sid-catalogs">
<title>Public Identifiers, System Identifiers, and Catalog Files</title>
<para>
<indexterm><primary>files</primary>
  <secondary>external, referencing</secondary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>external file references, id</secondary></indexterm>

When a &DTD; or other external file is referenced from a document, the
reference can be specified in three ways: using a <firstterm>public
identifier</firstterm>, a <firstterm>system identifier</firstterm>, or
both. In &XML;, the system identifier is <emphasis>generally</emphasis> 
required and the public identifier is optional. In &SGML;, neither is 
required, but at least one must be present.<footnote>
<para>
This is not absolutely true. &SGML; allows for the possibility that
the reference could be implied by the application, but this is very
rarely the case.
</para>
</footnote>
</para>
<para>
<indexterm><primary>public identifiers</primary>
  <secondary>names, requirements</secondary></indexterm>
A public identifier is a globally unique, abstract
name, such as the following, which is the official public identifier
for DocBook <acronym>V3.1</acronym>:
<screen>-//OASIS//DTD DocBook V3.1//EN</screen>
</para>
<para>
<indexterm><primary>SGML</primary>
  <secondary>system identifiers</secondary></indexterm>
<indexterm><primary>URI</primary>
  <secondary>XML system identifiers</secondary></indexterm>
<indexterm><primary>URL</primary>
  <secondary>SGML system identifers, similarity to</secondary></indexterm>
<indexterm><primary>Uniform Resource Locator</primary><see>URL</see></indexterm>
<indexterm><primary>Uniform Resource Names</primary><see>URN</see></indexterm>
<indexterm><primary>URN</primary>
  <secondary>XML system identifiers, future</secondary></indexterm>
The introduction of &XML; has added some small complications to system
identifiers.  In &SGML;, a system identifier generally points to a
single, local version of a file using local system conventions. In
&XML;, it must point with a Uniform Resource Indicator
(<acronym>URI</acronym>). The most common <acronym>URI</acronym>
today is the Uniform Resource Locator (<acronym>URL</acronym>), which
is familiar to anyone who browses the Web.  <acronym>URL</acronym>s
are a lot like &SGML; system identifiers, because they generally point
to a single version of a file on a particular machine.  In the future,
Uniform Resource Names (<acronym>URN</acronym>), another form of
<acronym>URI</acronym>, will allow &XML; system identifiers to have
the abstract characteristics of public identifiers.
</para>
<para>
<indexterm><primary>SGML</primary>
  <secondary>system identifiers</secondary>
    <tertiary>example</tertiary></indexterm>
<indexterm><primary>system identifiers</primary>
  <secondary>SGML</secondary>
    <tertiary>example</tertiary></indexterm>

The following filename is an example of an &SGML; system identifier:
<screen>/usr/local/sgml/docbook/3.1/docbook.dtd
</screen>
An equivalent &XML; system identifier might be:
<screen>file:///usr/local/sgml/docbook/3.1/docbook.dtd
</screen>
</para>
<para>
The advantage of using the public identifier is that it makes your
documents more portable. For any system on which DocBook is installed,
the public identifier will resolve to the appropriate local version of
the &DTD; (if public identifiers can be resolved at all).
</para>
<para>
Public identifiers have two disadvantages:
<itemizedlist>
<listitem>
<para>Because &XML; does not require them, and because system
identifiers are required, developing &XML; tools may not provide
adequate support for public identifiers. To work with these systems
you must use system identifiers.</para>
</listitem>
<listitem>
<para>
<indexterm><primary>public identifiers</primary>
  <secondary>resolution, mapping to system identifiers</secondary></indexterm>
<indexterm><primary>OASIS</primary>
  <secondary>public identifiers, resolution mechanism</secondary></indexterm>

Public identifiers aren't magical. They're simply a method of
indirection. For them to work, there must be a resolution mechanism
for public identifiers. Luckily, several years ago, &SGML; Open (now
<ulink url="http://www.oasis-open.org/"><acronym>OASIS</acronym></ulink>)
described a standard mechanism for mapping public identifiers to
system identifers using catalog files.</para>
<para>
See <ulink url="http://www.oasis-open.org/html/a401.htm"><acronym>OASIS</acronym>
Technical Resolution 9401:1997 (Amendment 2 to <acronym>TR</acronym>
9401).</ulink>
</para>
</listitem>
</itemizedlist></para>
<sect2 id="ch.create.pubids">
<title>Public Identifiers</title>
<para>
<indexterm><primary>uniqueness</primary>
  <secondary>public identifiers</secondary></indexterm>
An important characteristic of public identifiers is that they are
<emphasis>globally unique</emphasis>. Referring to a document with a
public identifier should mean that the identifier will resolve to the
same actual document on any system even though the location of that
document on each system may vary.  As a rule, you should never reuse
public identifiers, and a published revision should have a new public
identifier. Not following these rules defeats one purpose of the
public identifier.
</para>
<para>
<indexterm><primary>public identifiers</primary>
  <secondary>syntax, examples</secondary></indexterm>
A public identifier can be any string of upper- and lowercase letters,
digits, any of the following symbols: &ldquo;'&rdquo;,
&ldquo;(&ldquo;, &ldquo;)&rdquo;, &ldquo;+&rdquo;, &ldquo;,&rdquo;,
&ldquo;-&rdquo;, &ldquo;.&rdquo;, &ldquo;/&rdquo;, &ldquo;:&rdquo;,
&ldquo;=&rdquo;, &ldquo;?&rdquo;, and white space, including line
breaks.
</para>
<sect3>
<title>Formal public identifiers</title>
<para>
<indexterm><primary>ISO standards</primary>
  <secondary>formal public identifiers</secondary></indexterm>
<indexterm><primary>formal public identifier</primary><see>FPI</see></indexterm>
<indexterm><primary>FPI</primary>
  <secondary>format, standard</secondary></indexterm>
Most public identifiers conform to the <acronym>ISO</acronym> 8879
standard that defines <firstterm>formal public
identifiers</firstterm>. Formal public identifiers, frequently referred
to as <acronym>FPI</acronym>, have a prescribed format that can ensure
uniqueness:<footnote>
<para>
Essentially, it can ensure that two different owners won't
accidentally tread on each other.  Nothing can prevent a given owner
from reusing public identifiers, except maybe common sense.
</para>
</footnote>
</para>
<screen><replaceable>prefix</replaceable>//<replaceable>owner-identifier</replaceable>//<replaceable>
text-class</replaceable> <replaceable>text-description</replaceable>//<replaceable>
language</replaceable>//<replaceable>display-version</replaceable></screen>
<para>
Here are descriptions of the identifiers in this string:
<variablelist>
<varlistentry>
<term><replaceable>prefix</replaceable></term>
<listitem>
<para>
<indexterm><primary>prefix (registered and unregistered public identifiers)</primary></indexterm>
<indexterm><primary>registered public identifiers</primary></indexterm>
<indexterm><primary>unregistered public identifiers</primary></indexterm>
<indexterm><primary>ISO standards</primary>
  <secondary>formal public identifiers</secondary></indexterm>
The <replaceable>prefix</replaceable> is either a
&ldquo;<literal>+</literal>&rdquo; or a &ldquo;<literal>-</literal>&rdquo;
Registered public identifiers begin with
&ldquo;<literal>+</literal>&rdquo;; unregistered identifiers begin
with &ldquo;<literal>-</literal>&rdquo;.</para>
<para>
(<acronym>ISO</acronym> standards sometimes use a third form beginning
with <literal>ISO</literal> and the standard number, but this form is
only available to <acronym>ISO</acronym>.)
</para>
<para>
<indexterm><primary>owner-identifiers</primary>
  <secondary>registered public identifers</secondary>
    <tertiary>uniqueness, guaranteeing</tertiary></indexterm>

The purpose of registration is to guarantee a unique owner-identifier.
There are few authorities with the power to issue registered public
identifiers, so in practice unregistered identifiers are more common.
</para>
<para>
<indexterm><primary>public identifiers</primary>
  <secondary>registered, assigning authority</secondary></indexterm>
<indexterm><primary>Graphics Communication Association (GCA)</primary>
  <secondary>registered public identifiers, assigning</secondary></indexterm>
<indexterm><primary>GCA (Graphics Communication Association)</primary></indexterm>
<indexterm><primary>Graphics Communication Association (GCA)</primary></indexterm>

The <ulink url="http://www.gca.org/">Graphics Communication
Association</ulink> (<acronym>GCA</acronym>) can assign registered
public identifiers.  They do this by issuing the applicant a unique
string and declaring the format of the owner identifier. For example,
the Davenport Group was issued the string &ldquo;A00002&rdquo; and
could have published DocBook using an <acronym>FPI</acronym> of the
following form:
<screen>
+//ISO/IEC 9070/RA::A00002//<replaceable>...</replaceable>
</screen>
</para>
<para>
<indexterm><primary>Internet domain names format (registered public identifiers)</primary></indexterm>
Another way to use a registered public identifier is to use the format
reserved for internet domain names.  For example, O'Reilly can issue
documents using an <acronym>FPI</acronym> of the following form:
<screen>
+//IDN oreilly.com//<replaceable>...</replaceable>
</screen>
</para>
<para>
As of DocBook V3.1, the <acronym>OASIS</acronym> Technical Committee
responsible for DocBook has elected to use the unregistered owner
identifier, <literal>OASIS</literal>, thus its prefix is
<literal>-</literal>.
<screen>
-//OASIS//<replaceable>...</replaceable>
</screen>
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><replaceable>owner-identifier</replaceable></term>
<listitem>
<para>
<indexterm><primary>names</primary>
  <secondary>individuals as owner-identifiers</secondary></indexterm>
Identifies the person or organization that owns the identifier.
Registration guarantees a unique owner identifier. Short of
registration, some effort should be made to ensure that the owner
identifier is globally unique. A company name, for example, is a
reasonable choice as are Internet domain names. It's also not uncommon
to see the names of individuals used as the owner-identifier, although
clearly this may introduce collisions over time.
</para>
<para>
<indexterm><primary>DocBook DTD</primary>
  <secondary>owner-identifier, version 3.1</secondary></indexterm>

The owner-identifier for DocBook V3.1 is
<literal>OASIS</literal>.  Earlier versions used the owner-identifier
<literal>Davenport</literal>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><replaceable>text-class</replaceable></term>
<listitem>
<para>
<indexterm><primary>text</primary>
  <secondary>text class</secondary></indexterm>
<indexterm><primary>DOCUMENT text class</primary></indexterm>
<indexterm><primary>DTDs</primary>
  <secondary>text class</secondary></indexterm>
<indexterm><primary>ELEMENTS text class</primary></indexterm>
<indexterm><primary>ENTITIES text class</primary></indexterm>
<indexterm><primary>NONSGML text class</primary></indexterm>

The text class identifies the kind of document that is
associated with this public identifier. Common text classes
are
  <variablelist>
  <varlistentry>
  <term>DOCUMENT</term>
  <listitem>
  <para>An &SGML; or &XML; document.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term>DTD</term>
  <listitem>
  <para>A &DTD; or part of a &DTD;.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term>ELEMENTS</term>
  <listitem>
  <para>A collection of element declarations.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term>ENTITIES</term>
  <listitem>
  <para>A collection of entity declarations.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term>NONSGML</term>
  <listitem>
  <para>Data that is not in &SGML; or &XML;.</para>
  </listitem>
  </varlistentry>
  </variablelist>
</para>
<para>
DocBook is a &DTD;, thus its text class is DTD.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><replaceable>text-description</replaceable></term>
<listitem>
<para>
<indexterm><primary>text</primary>
  <secondary>text description</secondary></indexterm>
<indexterm><primary>DocBook DTD</primary>
  <secondary>text description</secondary></indexterm>

This field provides a description of the document. The text description is
free-form, but cannot include the string //.
</para>
<para>
The text description of DocBook is <literal>DocBook V3.1</literal>.
</para>
<para>
<indexterm><primary>proprietary DTDs, unavailable public texts</primary></indexterm>
<indexterm><primary>DTDs</primary>
  <secondary>proprietary</secondary></indexterm>
In the uncommon case of unavailable public texts
(<acronym>FPI</acronym>s for proprietary &DTD;s, for example), there
are a few other options available (technically in front of or in place
of the text description), but they're rarely used.
<footnote>
<para>
See Appendix A of <xref linkend="maler96"/>, for more details.
</para>
</footnote>
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><replaceable>language</replaceable></term>
<listitem>
<para>
<indexterm><primary>languages</primary>
  <secondary>document texts</secondary></indexterm>
<indexterm><primary>ISO standards</primary>
  <secondary>language codes</secondary></indexterm>

Indicates the language in which the document is written. It is
recommended that the <acronym>ISO</acronym> standard two-letter
language codes be used if possible.
</para>
<para>
DocBook is an English-language &DTD;, thus its language is
<literal>EN</literal>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><replaceable>display-version</replaceable></term>
<listitem>
<para>
<indexterm><primary>display version</primary></indexterm>

This field, which is not frequently used, distinguishes between
public texts that are the same except for the display device or system
to which they apply.
</para>
<para>
<indexterm><primary>FPI</primary>
  <secondary>ISO Latin 1 character set, examples</secondary></indexterm>

For example, the <acronym>FPI</acronym> for the <acronym>ISO</acronym>
Latin 1 character set is:
<screen>-//ISO 8879-1986//ENTITIES Added Latin 1//EN</screen>
</para>
<para>
A reasonable <acronym>FPI</acronym> for an &XML; version of this
character set is:
<screen>-//ISO 8879-1986//ENTITIES Added Latin 1//EN//XML</screen>
</para>
</listitem>
</varlistentry>
</variablelist>
</para>
</sect3>
</sect2>
<sect2>
<title>System Identifiers</title>
<para>
<indexterm><primary>system identifiers</primary></indexterm>
<indexterm><primary>URI</primary>
  <secondary>XML system identifiers</secondary></indexterm>
System identifiers are usually filenames on the local system. In
&SGML;, there's no constraint on what they can be. Anything that your
&SGML; processing system recognizes is allowed. In &XML;, system
identifiers must be <acronym>URI</acronym>s (Uniform Resource
Identifiers).
</para>
<para>
The use of <acronym>URI</acronym>s as system identifiers introduces
the possibility that a system identifier can be a
<acronym>URN</acronym>. This allows the system identifier to benefit
from the same global uniqueness benefit as the public identifier. It
seems likely that &XML; system identifiers will eventually move in
this direction.
</para>
</sect2>
<sect2 id="s-catalog-files">
<title>Catalog Files</title>
<para>
<indexterm><primary>catalog files</primary>
  <secondary>pubic identifiers, resolving to system</secondary></indexterm>

<firstterm>Catalog files</firstterm> are the standard mechanism for
resolving public identifiers into system identifiers. Some resolution
mechanism is necessary because DocBook refers to its component modules
with public identifiers, and those must be mapped to actual files on
the system before any piece of software can actually load them.
</para>
<para>
<indexterm><primary>OASIS</primary>
  <secondary>catalog file format</secondary></indexterm>
<indexterm><primary>keywords</primary>
  <secondary>catalog files</secondary></indexterm>

The catalog file format was defined in 1994 by &SGML; Open (now
<acronym>OASIS</acronym>). The formal specification is contained in
<acronym>OASIS</acronym> Technical Resolution 9401:1997.
</para>
<para>
Informally, a catalog is a text file that contains a number of
keyword/value pairs. The most frequently used keywords are
<literal>PUBLIC</literal>, <literal>SYSTEM</literal>,
<literal>SGMLDECL</literal>, <literal>DTDDECL</literal>,
<literal>CATALOG</literal>, <literal>OVERRIDE</literal>,
<literal>DELEGATE</literal>, and <literal>DOCTYPE</literal>.
</para>
<variablelist>
<varlistentry><term><literal>PUBLIC</literal></term>
<listitem>
<para>
<indexterm><primary>PUBLIC keyword</primary></indexterm>

The <literal>PUBLIC</literal> keyword maps public identifiers to
system identifiers:</para>
<screen>
PUBLIC "-//OASIS//DTD DocBook V3.1//EN" "docbook/3.1/docbook.dtd"
</screen>
</listitem>
</varlistentry>
<varlistentry><term><literal>SYSTEM</literal></term>
<listitem>
<para>
<indexterm><primary>SYSTEM keyword</primary></indexterm>

The <literal>SYSTEM</literal> keyword maps system identifiers to
system identifiers:</para>
<screen>
SYSTEM "http://nwalsh.com/docbook/xml/1.3/db3xml.dtd"
    "docbook/xml/1.3/db3xml.dtd"
</screen>
</listitem>
</varlistentry>
<varlistentry><term><literal>SGMLDECL</literal></term>
<listitem>
<para>
<indexterm><primary>SGMLDECL keyword</primary></indexterm>

The <literal>SGMLDECL</literal> keyword identifies the system
identifier of the &SGML; Declaration that should be used:</para>
<screen>
SGMLDECL "docbook/3.1/docbook.dcl"
</screen>
</listitem>
</varlistentry>
<varlistentry><term><literal>DTDDECL</literal></term>
<listitem>
<para>
<indexterm><primary>DTDDECL</primary></indexterm>

Like <literal>SGMLDECL</literal>, <literal>DTDDECL</literal>
identifies the &SGML; Declaration that should be
used. <literal>DTDDECL</literal> associates a declaration with a
particular public identifier for a &DTD;:
</para>
<screen>DTDDECL "-//OASIS//DTD DocBook V3.1//EN" "docbook/3.1/docbook.dcl"
</screen>
<para>Unfortunately, it is not supported by the free tools that are
available. The practical benefit of <literal>DTDDECL</literal> can
usually be achieved, albeit in a slightly cumbersome way, with
multiple catalog files.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>CATALOG</literal></term>
<listitem>
<para>
<indexterm><primary>CATALOG keyword</primary></indexterm>

The <literal>CATALOG</literal> keyword allows one catalog to
include the content of another.  This can make maintenance somewhat
easier and allows a system to directly use the catalog files included
in &DTD; distributions. For example, the DocBook distribution includes
a catalog file. Rather than copying each of the declarations in that
catalog into your system catalog, you can simply include the contents
of the DocBook catalog:
</para>
<screen>CATALOG "docbook/3.1/catalog"</screen>
</listitem>
</varlistentry>
<varlistentry><term><literal>OVERRIDE</literal></term>
<listitem>
<para>
<indexterm><primary>OVERRIDE keyword</primary></indexterm>

The <literal>OVERRIDE</literal> keyword indicates whether or not
public identifiers override system identifiers. If a given declaration
includes both a system identifer and a public identifier, most systems
attempt to process the document referenced by the system identifier,
and consequently ignore the public identifier. Specifying
<screen>OVERRIDE YES</screen> in the catalog informs the processing
system that resolution should be attempted first with the public
identifier.</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>DELEGATE</literal></term>
<listitem>
<para>
<indexterm><primary>DELEGATE keyword</primary></indexterm>

The <literal>DELEGATE</literal> keyword allows you to specify
that some set of public identifiers should be resolved by another
catalog. Unlike the <literal>CATALOG</literal> keyword, which loads
the referenced catalog, <literal>DELEGATE</literal> does nothing until
an attempt is made to resolve a public identifier.</para> <para>The
<literal>DELEGATE</literal> entry specifies a partial public
identifier and an alternate catalog:
<screen>DELEGATE "-//OASIS" "/usr/sgml/oasis/catalog"</screen>
</para>
<para>
<indexterm><primary>initial substring matches (public identifiers)</primary></indexterm>
<indexterm><primary>public identifiers</primary>
  <secondary>partial (initial substring matches)</secondary></indexterm>

Partial public identifers are simply initial substring
matches. Given the preceding entry, if an attempt is made to match any
public identifier that begins with the string
<literal>-//OASIS</literal>, the alternate catalog
<filename>/usr/sgml/oasis/catalog</filename> will be used&nbsp;instead
of the current catalog.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>DOCTYPE</literal></term>
<listitem>
<para>
<indexterm><primary>DOCTYPE keyword</primary></indexterm>
<indexterm><primary>system identifiers</primary>
  <secondary>default, specifying</secondary></indexterm>
<indexterm><primary>declarations</primary>
  <secondary>system identifier, default (SGML)</secondary></indexterm>

The <literal>DOCTYPE</literal> keyword allows you to specify a default
system identifier.  If an &SGML; document begins with a
<literal>DOCTYPE</literal> declaration that specifies neither a public
identifier nor a system identifier (or is missing a
<literal>DOCTYPE</literal> declaration altogether), the
<literal>DOCTYPE</literal> declaration may provide a default:
</para>
<screen>
DOCTYPE BOOK n:/share/sgml/docbook/3.1/docbook.dtd
</screen>
</listitem>
</varlistentry>
</variablelist>
<para>
<indexterm><primary>catalog files</primary>
  <secondary>sample</secondary></indexterm>
A small fragment of an actual catalog file is shown in <xref linkend="ex-catalog"/>.
</para>
<example id="ex-catalog"><title>A Sample Catalog</title>
<programlistingco>
<areaspec>
<area id="cat-comment" coords="1 60" units="linecolumn"/>
<area id="cat-override" coords="4 60" units="linecolumn"/>
<area id="cat-sgmldecl" coords="6 60" units="linecolumn"/>
<area id="cat-doctype" coords="8 60" units="linecolumn"/>
<area id="cat-public" coords="10 60" units="linecolumn"/>
<area id="cat-system" coords="13 60" units="linecolumn"/>
</areaspec>
<programlisting>
-- Comments are delimited by pairs of double-hyphens,
   as in SGML and XML comments. --

OVERRIDE YES

SGMLDECL "n:/share/sgml/docbook/3.1/docbook.dcl"

DOCTYPE  BOOK  n:/share/sgml/docbook/3.1/docbook.dtd

PUBLIC "-//OASIS//DTD DocBook V3.1//EN" 
  n:/share/sgml/docbook/3.1/docbook.dtd

SYSTEM "http://nwalsh.com/docbook/xml/1.3/db3xml.dtd"
  n:/share/sgml/Norman_Walsh/db3xml/db3xml.dtd
</programlisting>
</programlistingco>
</example>

<calloutlist>
<callout arearefs="cat-comment"><para>
<indexterm><primary>comments</primary>
  <secondary>catalog files</secondary></indexterm>
Catalog files may also include comments.
</para></callout>
<callout arearefs="cat-override"><para>
This catalog specifies that public identifiers should be used in favor
of system identifiers, if both are present.
</para></callout>
<callout arearefs="cat-sgmldecl"><para>
The default declaration specified by this catalog is the DocBook 
declaration.
</para></callout>
<callout arearefs="cat-doctype"><para>
Given an explicit (or implied) &SGML; <literal>DOCTYPE</literal> of
<screen>
<![CDATA[
<!DOCTYPE BOOK SYSTEM>
]]>
</screen>
use <filename>n:/share/sgml/docbook/3.1/docbook.dtd</filename> as the default
system identifier.  Note that this can only apply to &SGML; documents
because the DOCTYPE declaration above is not a valid &XML; element.
</para></callout>
<callout arearefs="cat-public"><para>
Map the <acronym>OASIS</acronym> public identifer to the local copy of
the DocBook <acronym>V3.1</acronym> &DTD;.
</para></callout>
<callout arearefs="cat-system"><para>
Map a system identifer for the &XML; version of DocBook to a local
version.
</para></callout>
</calloutlist>
<para>A few notes:</para>
<itemizedlist>
<listitem><para>It's not uncommon to have several catalog files. See below,
<xref linkend="s-loc-cat"/>&rdquo;.</para>
</listitem>
<listitem><para>
<indexterm><primary>quotes</primary>
  <secondary>public and system identifiers</secondary></indexterm>
<indexterm><primary>public identifiers</primary>
  <secondary>quotes</secondary></indexterm>
<indexterm><primary>system identifiers</primary>
  <secondary>quotes</secondary></indexterm>

Like attributes on elements you can quote, the public
identifier and system identifier are surrounded by either single or double
quotes.</para>
</listitem>
<listitem><para>
<indexterm><primary>whitespace</primary>
  <secondary>catalog files</secondary></indexterm>
<indexterm><primary>catalog files</primary>
  <secondary>whitespace</secondary></indexterm>

White space in the catalog file is generally
irrelevant. You can use spaces, tabs, or new lines between keywords
and their arguments.</para>
</listitem>
<listitem><para>
<indexterm><primary>relative system identifiers</primary></indexterm>

When a relative system identifier is used, it is
considered to be relative to the location of the catalog file, not the
document being processed.</para>
</listitem>
</itemizedlist>
<sect3 id="s-loc-cat">
<title>Locating catalog files</title>
<para>
<indexterm><primary>catalog files</primary>
  <secondary>locating</secondary></indexterm>
<indexterm><primary>locating catalog files</primary></indexterm>
<indexterm><primary>files</primary>
  <secondary>catalog</secondary></indexterm>

Catalog files go a long way towards making documents more portable by
introducing a level of indirection. A problem still remains, however:
how does a processor locate the appropriate catalog file(s)?
<acronym>OASIS</acronym> outlines a complete interchange packaging
scheme, but for most applications the answer is simply that the
processor looks for a file called <filename>catalog</filename> or
<filename>CATALOG</filename>.
</para>
<para>
<indexterm><primary>directories, specifying (catalog file location)</primary></indexterm>

Some applications allow you to specify a list of directories that
should be examined for catalog files. Other tools allow you to specify
the actual files.
</para>
<para>
Note that even if a list of directories or catalog files is provided,
applications may still load catalog files that occur in directories in
which other documents are found. For example, <acronym>SP</acronym>
and Jade always load the catalog file that occurs in the directory in
which a &DTD; or document resides, even if that directory is not on
the catalog file list.
</para>
</sect3>
</sect2>
</sect1>
<sect1 id="ch02-physdiv">
<title>Physical Divisions: Breaking a Document into Physical Chunks</title>
<para>
<indexterm><primary>documents</primary>
  <secondary>dividing</secondary></indexterm>
<indexterm><primary>divisions</primary>
  <secondary>documents (DocBook)</secondary></indexterm>
The rest of this chapter describes how you can break documents into
logical chunks, such as books, chapters, sections, and so on. Before
we begin, and while the subject of the internal subset is fresh in
your mind, let's take a quick look at how to break documents into
separate physical chunks.
</para>
<para>
Actually, we've already told you how to do it. If you recall, in the
preceding sections we had declarations of the form:
<screen>&lt;!ENTITY <replaceable>name</replaceable> SYSTEM "<replaceable>filename</replaceable>">
</screen>
<indexterm><primary>entities</primary>
  <secondary>inserting files</secondary></indexterm>

If you refer to the entity <replaceable>name</replaceable> in your
document after this declaration, the system will insert the contents
of the file <replaceable>filename</replaceable> into your document at that
point.  So, if you've got a book that consists of three chapters and
two appendixes, you might create a file called
<filename>book.sgm</filename>, which looks like this:
</para>
<screen>&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V3.1//EN" [
&lt;!ENTITY chap1 SYSTEM "chap1.sgm">
&lt;!ENTITY chap2 SYSTEM "chap2.sgm">
&lt;!ENTITY chap3 SYSTEM "chap3.sgm">
&lt;!ENTITY appa SYSTEM "appa.sgm">
&lt;!ENTITY appb SYSTEM "appb.sgm">
]>
&lt;book>&lt;title>My First Book&lt;/title>
&amp;chap1;
&amp;chap2;
&amp;chap3;
&amp;appa;
&amp;appb;
&lt;/book>
</screen>
<para>
<indexterm><primary>declarations</primary>
  <secondary>document type declaration</secondary></indexterm>
<indexterm><primary>document type declaration</primary>
  <secondary>divisions of documents</secondary></indexterm>

You can then write the chapters and appendixes conveniently in
separate files.  Note that these files do not and must not have
document type declarations.
</para>
<para>
For example, Chapter 1 might begin like this:
</para>
<screen>
<![CDATA[
<chapter id="ch1"><title>My First Chapter</title>
<para>My first paragraph.</para>
...
]]>
</screen>
<para>
But it should not begin with its own document type declaration:
</para>
<screen>
<![CDATA[
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
<chapter id="ch1"><title>My First Chapter</title>
<para>My first paragraph.</para>
...
]]>
</screen>
</sect1>
<sect1 id="ch02-logdiv">
<title>Logical Divisions: The Categories of Elements in DocBook</title>
<para>
<indexterm><primary>divisions</primary>
  <secondary>elements, categories of (DocBook)</secondary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>categories, DocBook divisions</secondary></indexterm>

DocBook elements can be divided broadly into these categories:
<simplelist type="vert">
<member>Sets</member>
<member>Books</member>
<member>Divisions, which divide books into parts</member>
<member>Components, which divide books or divisions into chapters</member>
<member>Sections, which subdivide components</member>
<member>Meta-information elements</member>
<member>Block elements</member>
<member>Inline elements</member>
</simplelist>
</para>
<para>
In the rest of this section, we'll describe briefly the elements that
make up these categories.  This section is designed to give you an
overview. It is not an exhaustive list of every element in DocBook.
</para>
<para>
For more information about any specific element and the elements that
it may contain, consult the reference page for the element in
question.
</para>
<sect2>
<title>Sets</title>
<para>
<indexterm><primary>Sets</primary></indexterm>

A <sgmltag>Set</sgmltag> contains two or more
<sgmltag>Book</sgmltag>s.  It's the hierarchical top of DocBook. You
use the <sgmltag>Set</sgmltag> tag, for example, for a series of books
on a single subject that you want to access and maintain as a single
unit, such as the manuals for an airplane engine or the documentation
for a programming language.
</para>
</sect2>
<sect2>
<title>Books</title>
<para>
<indexterm><primary>customizing</primary>
  <secondary>DocBook DTD</secondary>
    <tertiary>book organization</tertiary></indexterm>
<indexterm><primary>Book element</primary>
  <secondary>elements, ordering</secondary></indexterm>
A <sgmltag>Book</sgmltag> is probably the most common top-level
element in a document. The DocBook definition of a book is very loose
and general. Given the variety of books authored with DocBook and the
number of different conventions for book organization used in
countries around the world, attempting to impose a strict ordering of
elements can make the content model extremely complex.  But DocBook
gives you free reign.  It's very reasonable to use a local <link linkend="app-customizing">customization layer</link> to impose a more
strict ordering for your applications.
</para>
<para>
<sgmltag>Book</sgmltag>s consist of a mixture of the following elements:
</para>
<variablelist>
<varlistentry><term>Dedication</term>
<listitem>
<para><sgmltag>Dedication</sgmltag> pages almost always occur at the front of
a book.
<indexterm><primary>Dedication element</primary></indexterm>

</para>
</listitem>
</varlistentry>
<varlistentry><term>Navigational Components</term>
<listitem>
<para>
<indexterm><primary>navigation, component-level elements</primary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>components, navigation</secondary></indexterm>
<indexterm><primary>ToC</primary></indexterm>
<indexterm><primary>LoT</primary></indexterm>
<indexterm><primary>Lists of Titles</primary><see>LoT</see></indexterm>
<indexterm><primary>Index element</primary></indexterm>
<indexterm><primary>tables of contents</primary><seealso>ToC</seealso></indexterm>
There are a few component-level elements designed for
navigation: <sgmltag>ToC</sgmltag>, for Tables of Contents;
<sgmltag>LoT</sgmltag>, for Lists of Titles (for lists of figures,
tables, examples, and so on); and <sgmltag>Index</sgmltag>, for
indexes.</para>
</listitem>
</varlistentry>
<varlistentry><term>Divisions</term>
<listitem>
<para>
<indexterm><primary>divisions</primary>
  <secondary>Book</secondary></indexterm>
<indexterm><primary>Part element</primary></indexterm>
<indexterm><primary>Reference element</primary></indexterm>
<indexterm><primary>RefEntry element</primary></indexterm>
<indexterm><primary>components</primary></indexterm>

Divisions are the first hierarchical level below <sgmltag>Book</sgmltag>.
They contain <sgmltag>Part</sgmltag>s and <sgmltag>Reference</sgmltag>s.
<sgmltag>Part</sgmltag>s, in turn, contain components.
<sgmltag>Reference</sgmltag>s contain <sgmltag>RefEntry</sgmltag>s.  These are
discussed more thoroughly in <xref linkend="making-refentry"/>&rdquo;.
</para>
<para>
Books can contain components directly and are not required to contain
divisions.
</para>
</listitem>
</varlistentry>
<varlistentry><term>Components</term>
<listitem>
<para>
<indexterm><primary>Chapter element</primary>
  <secondary>components, similarity to</secondary></indexterm>

These are the chapter-like elements of a <sgmltag>Book</sgmltag>.
</para>
</listitem>
</varlistentry>
</variablelist>
</sect2>
<sect2>
<title>Components</title>
<para>
<indexterm><primary>books</primary>
  <secondary>components</secondary></indexterm>
<indexterm><primary>Part element</primary></indexterm>

<indexterm><primary>Preface element</primary></indexterm>
<indexterm><primary>Chapter element</primary></indexterm>
<indexterm><primary>Appendix element</primary></indexterm>
<indexterm><primary>Glossary element</primary></indexterm>
<indexterm><primary>Bibliography element</primary></indexterm>
<indexterm><primary>Article element</primary></indexterm>
<indexterm><primary>block elements</primary></indexterm>
<indexterm><primary>sections</primary>
  <secondary>elements</secondary></indexterm>
Components are the chapter-like elements of a <sgmltag>Book</sgmltag> or
<sgmltag>Part</sgmltag>: <sgmltag>Preface</sgmltag>,
<sgmltag>Chapter</sgmltag>, <sgmltag>Appendix</sgmltag>,
<sgmltag>Glossary</sgmltag>, and
<sgmltag>Bibliography</sgmltag>. <sgmltag>Article</sgmltag>s can also
occur at the component level. We describe <sgmltag>Article</sgmltag>s
in more detail in the section titled <xref linkend="making-article"/>&rdquo;.  Components generally
contain block elements and/or sections, and some can contain
navigational components and <sgmltag>RefEntry</sgmltag>s.
</para>
</sect2>
<sect2>
<title>Sections</title>
<para>
<indexterm><primary>nesting</primary>
  <secondary>section elements</secondary></indexterm>
<indexterm><primary>numbered sections, levels</primary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>sections</secondary></indexterm>

There are several flavors of sectioning elements in DocBook:</para>
<variablelist>
<varlistentry><term><sgmltag>Sect1</sgmltag>&hellip;<sgmltag>Sect5</sgmltag> elements</term>
<listitem>
<para>The <sgmltag>Sect1</sgmltag>&hellip;<sgmltag>Sect5</sgmltag>
elements are the most common sectioning elements. They can occur in
most component-level elements. These numbered section elements must be
properly nested (<sgmltag>Sect2</sgmltag>s can only occur inside
<sgmltag>Sect1</sgmltag>s, <sgmltag>Sect3</sgmltag>s can only occur inside
<sgmltag>Sect2</sgmltag>s, and so on).  There are five levels of numbered
sections.</para>
</listitem>
</varlistentry>
<varlistentry><term><sgmltag>Section</sgmltag> element</term>
<listitem>
<para>
<indexterm><primary>Section element</primary></indexterm>

The <sgmltag>Section</sgmltag> element, introduced in DocBook V3.1, is
an alternative to numbered sections.  <sgmltag>Section</sgmltag>s are
recursive, meaning that you can nest them to any depth desired.
</para>
</listitem>
</varlistentry>
<varlistentry><term><sgmltag>SimpleSect</sgmltag> element</term>
<listitem>
<para>
<indexterm><primary>SimpleSect element</primary></indexterm>

In addition to numbered sections, there's the
<sgmltag>SimpleSect</sgmltag> element.  It is a terminal section that
can occur at any level, but it cannot have any other sectioning
element nested within it.</para>
</listitem>
</varlistentry>
<varlistentry><term><sgmltag>BridgeHead</sgmltag></term>
<listitem>
<para>
<indexterm><primary>BridgeHead element</primary></indexterm>

A <sgmltag>BridgeHead</sgmltag> provides a section title without
any containing section.</para>
</listitem>
</varlistentry>
<varlistentry><term><sgmltag>RefSect1</sgmltag>&hellip;<sgmltag>RefSect3</sgmltag> elements</term>
<listitem>
<para>
<indexterm><primary>RefEntry element</primary></indexterm>
These elements, which occur only in <sgmltag>RefEntry</sgmltag>s, are
analogous to the numbered section elements in components.  There are
only three levels of numbered section elements in a
<sgmltag>RefEntry</sgmltag>.</para>
</listitem>
</varlistentry>
<varlistentry><term><sgmltag>GlossDiv</sgmltag>, <sgmltag>BiblioDiv</sgmltag>, and 
<sgmltag>IndexDiv</sgmltag></term>
<listitem>
<para>
<indexterm><primary>GlossDiv element</primary></indexterm>
<indexterm><primary>BiblioDiv element</primary></indexterm>

<indexterm><primary>Glossary element</primary></indexterm>
<indexterm><primary>Bibliography element</primary></indexterm>
<indexterm><primary>Index element</primary></indexterm>

<sgmltag>Glossary</sgmltag>s, <sgmltag>Bibliography</sgmltag>s,
and <sgmltag>Index</sgmltag>es can be broken into top-level
divisions, but not sections.  Unlike sections, these elements do not
nest.</para>
</listitem>
</varlistentry>
</variablelist>
</sect2>
<sect2><title>Meta-Information</title>
<para>
<indexterm><primary>meta-information</primary>
  <secondary>elements, section-level and above</secondary></indexterm>
<indexterm><primary>wrappers</primary>
  <secondary>meta-information, elements</secondary></indexterm>
All of the elements at the section level and above include a wrapper
for meta-information about the content.  See, for example,
<sgmltag>BookInfo</sgmltag>.
</para>
<para>
<indexterm><primary>Author element</primary></indexterm>
<indexterm><primary>Title element</primary></indexterm>
<indexterm><primary>Publisher element</primary></indexterm>
<indexterm><primary>revision histories</primary></indexterm>
<indexterm><primary>keywords</primary>
  <secondary>keyword sets (meta-information)</secondary></indexterm>
<indexterm><primary>indexes</primary>
  <secondary>metainformation</secondary></indexterm>
The meta-information wrapper is designed to contain bibliographic
information about the content (<sgmltag>Author</sgmltag>, <sgmltag>Title</sgmltag>,
<sgmltag>Publisher</sgmltag>, and so on) as well as other meta-information
such as revision histories, keyword sets, and index terms.
</para>
</sect2>
<sect2>
<title>Block Elements</title>
<para>
<indexterm><primary>block elements</primary></indexterm>
<indexterm><primary>paragraphs</primary>
  <secondary>paragraph-level elements</secondary></indexterm>
<indexterm><primary>lists</primary></indexterm>
<indexterm><primary>examples</primary></indexterm>
<indexterm><primary>figures</primary></indexterm>
<indexterm><primary>tables</primary></indexterm>
<indexterm><primary>synopses</primary></indexterm>
<indexterm><primary>admonitions</primary></indexterm>
<indexterm><primary>line-specific environments</primary></indexterm>

The block elements occur immediately below the component and
sectioning elements. These are the (roughly) paragraph-level elements
in DocBook. They can be divided into a number of categories: lists,
admonitions, line-specific environments, synopses of several sorts,
tables, figures, examples, and a dozen or more miscellaneous elements.
</para>
<sidebar><title>Block vs. Inline Elements</title>
<para>
<indexterm><primary>block elements</primary>
  <secondary>inline elements vs.</secondary></indexterm>
<indexterm><primary>inline elements</primary>
  <secondary>block elements vs.</secondary></indexterm>

At the paragraph-level, it's convenient to divide elements into two
classes, <firstterm>block</firstterm> and <firstterm>inline</firstterm>.
From a structural point of view, this distinction is based loosely on
their relative size, but it's easiest to describe the difference in
terms of their presentation.
</para>
<para>
<indexterm><primary>sidebars</primary></indexterm>
<indexterm><primary>block quotations</primary></indexterm>
<indexterm><primary>quotations (block)</primary></indexterm>
Block elements are usually presented with a paragraph (or larger)
break before and after them.  Most can contain other block elements,
and many can contain character data and inline elements. Paragraphs,
lists, sidebars, tables, and block quotations are all common examples
of block elements.
</para>
<para>
<indexterm><primary>fonts</primary>
  <secondary>changes (inline elements)</secondary></indexterm>
<indexterm><primary>characters</primary>
  <secondary>inline elements</secondary></indexterm>
<indexterm><primary>cross references</primary></indexterm>
<indexterm><primary>filenames</primary></indexterm>
<indexterm><primary>commands</primary></indexterm>
<indexterm><primary>options</primary></indexterm>
<indexterm><primary>subscripts and superscripts</primary></indexterm>
<indexterm><primary>glossaries</primary>
  <secondary>glossary terms</secondary></indexterm>
Inline elements are generally represented without any obvious breaks.
The most common distinguishing mark of inline elements is a font
change, but inline elements may present no visual distinction at all.
Inline elements contain character data and possibly other inline
elements, but they never contain block elements.  Inline elements are
used to mark up data such as cross references, filenames, commands,
options, subscripts and superscripts, and glossary terms.
</para>
</sidebar>
<sect3><title>Lists</title>
<para>
<indexterm><primary>lists</primary>
  <secondary>elements</secondary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>lists</secondary></indexterm>

There are seven list elements in DocBook:</para>
<variablelist>
<varlistentry>
<term><sgmltag>CalloutList</sgmltag></term>
<listitem>
<para>
<indexterm><primary>CallOut element</primary></indexterm>
<indexterm><primary>CalloutList element</primary></indexterm>

A list of <sgmltag>CallOut</sgmltag>s and their descriptions.
<sgmltag>CallOut</sgmltag>s are
marks, frequently numbered and  typically on a graphic or verbatim environment,
that are described in a <sgmltag>CalloutList</sgmltag>, outside the element
in which they occur.</para>
</listitem>
</varlistentry>
<varlistentry><term><sgmltag>GlossList</sgmltag></term>
<listitem>
<para>
<indexterm><primary>GlossList element</primary></indexterm>

A list of glossary terms and their definitions.</para>
</listitem>
</varlistentry>
<varlistentry><term><sgmltag>ItemizedList</sgmltag></term>
<listitem>
<para>
<indexterm><primary>ItemizedList element</primary></indexterm>

An unordered (bulleted) list. There are attributes to control
the marks used.</para>
</listitem>
</varlistentry>
<varlistentry><term><sgmltag>OrderedList</sgmltag></term>
<listitem>
<para>
<indexterm><primary>OrderedList element</primary></indexterm>

A numbered list. There are attributes to control the type of
enumeration.</para>
</listitem>
</varlistentry>
<varlistentry><term><sgmltag>SegmentedList</sgmltag></term>
<listitem>
<para>
<indexterm><primary>SegmentedList element</primary></indexterm>

A repeating set of named items. For example, a list of states
and their capitals might be represented as a
<sgmltag>SegmentedList</sgmltag>.</para>
</listitem>
</varlistentry>
<varlistentry><term><sgmltag>SimpleList</sgmltag></term>
<listitem>
<para>
<indexterm><primary>SimpleList element</primary></indexterm>

An unadorned list of items. <sgmltag>SimpleList</sgmltag>s can
be inline or arranged in columns.</para>
</listitem>
</varlistentry>
<varlistentry><term><sgmltag>VariableList</sgmltag></term>
<listitem>
<para>
<indexterm><primary>VariableList element</primary></indexterm>

A list of terms and definitions or descriptions. (This list of
list types is a <sgmltag>VariableList</sgmltag>.)</para>
</listitem>
</varlistentry>
</variablelist>
</sect3>
<sect3><title>Admonitions</title>
<para>
<indexterm><primary>admonitions</primary>
  <secondary>DocBook types</secondary></indexterm>
<indexterm><primary>Caution element</primary></indexterm>
<indexterm><primary>Important element</primary></indexterm>
<indexterm><primary>Note element</primary></indexterm>
<indexterm><primary>Tip element</primary></indexterm>
<indexterm><primary>Warning element</primary></indexterm>

There are five types of admonitions in DocBook:
<sgmltag>Caution</sgmltag>, <sgmltag>Important</sgmltag>,
<sgmltag>Note</sgmltag>, <sgmltag>Tip</sgmltag>, and
<sgmltag>Warning</sgmltag>.
</para>
<para>
All of the admonitions have the same structure: an optional <sgmltag>
Title</sgmltag> followed by paragraph-level elements. The DocBook
&DTD; does not impose any specific semantics on the individual
admonitions. For example, DocBook does not mandate that
<sgmltag>Warning</sgmltag>s be reserved for cases where bodily harm
can result.
</para>
</sect3>
<sect3><title>Line-specific environments</title>
<para>
<indexterm><primary>line-specific environments</primary></indexterm>
<indexterm><primary>whitespace</primary>
  <secondary>preserving in source text</secondary></indexterm>
<indexterm><primary>line breaks, preserving</primary></indexterm>

These environments preserve whitespace and line breaks in the source
text. DocBook does not provide the equivalent of &HTML;'s
<sgmltag>BR</sgmltag> tag, so there's no way to interject a line break
into normal running text.
</para>
<variablelist>
<varlistentry>
<term><sgmltag>Address</sgmltag></term>
<listitem>
<para>
<indexterm><primary>Address element</primary></indexterm>

The <sgmltag>Address</sgmltag> element is intended for postal
addresses.  In addition to being line-specific, <sgmltag>Address</sgmltag>
contains additional elements suitable for marking up names and
addresses.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>LiteralLayout</sgmltag></term>
<listitem>
<para>
<indexterm><primary>LiteralLayout element</primary></indexterm>

A <sgmltag>LiteralLayout</sgmltag> does not have any semantic
association beyond the preservation of whitespace and line breaks.  In
particular, while <sgmltag>ProgramListing</sgmltag> and
<sgmltag>Screen</sgmltag> are frequently presented in a fixed-width
font, a change of fonts is not necessarily implied by <sgmltag>LiteralLayout
</sgmltag>.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>ProgramListing</sgmltag></term>
<listitem>
<para>
<indexterm><primary>ProgramListing element</primary></indexterm>
<indexterm><primary>fonts</primary>
  <secondary>fixed-width, programs and code</secondary></indexterm>

A <sgmltag>ProgramListing</sgmltag> is a verbatim environment, usually
presented in Courier or some other fixed-width font, for program
sources, code fragments, and similar listings.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Screen</sgmltag></term>
<listitem>
<para>
<indexterm><primary>Screen element</primary></indexterm>
<indexterm><primary>text screen-captures </primary></indexterm>

A <sgmltag>Screen</sgmltag> is a verbatim or literal environment
for text screen-captures, other fragments of an
<acronym>ASCII</acronym> display, and similar things. <sgmltag>
Screen</sgmltag> is also a frequent catch-all for any verbatim
text.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>ScreenShot</sgmltag></term>
<listitem>
<para>
<indexterm><primary>ScreenShot element</primary></indexterm>

<sgmltag>ScreenShot</sgmltag> is actually a wrapper for a
<sgmltag>Graphic</sgmltag> intended for screen shots of a
<acronym>GUI</acronym> for example.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Synopsis</sgmltag></term>
<listitem>
<para>
<indexterm><primary>Synopsis element</primary></indexterm>

A <sgmltag>Synopsis</sgmltag> is a verbatim environment for command
and function synopsis.</para>
</listitem>
</varlistentry>
</variablelist>
</sect3>
<sect3><title>Examples, figures, and tables</title>
<para>
<indexterm><primary>block elements</primary>
  <secondary>formal and informal elements</secondary></indexterm>
<indexterm><primary>formal elements</primary></indexterm>
<indexterm><primary>informal elements</primary></indexterm>
<indexterm><primary>Example element</primary></indexterm>
<indexterm><primary>Figure element</primary></indexterm>
<indexterm><primary>Table element</primary></indexterm>
<indexterm><primary>InformalExample element</primary></indexterm>
<indexterm><primary>InformalExample element</primary></indexterm>
<indexterm><primary>InformalTable element</primary></indexterm>

Examples, Figures, and Tables are common block-level elements:
<sgmltag>Example</sgmltag>, <sgmltag>InformalExample</sgmltag>,
<sgmltag>Figure</sgmltag>, <sgmltag>InformalFigure</sgmltag>,
<sgmltag>Table</sgmltag>, and <sgmltag>InformalTable</sgmltag>.
</para>
<para>
<indexterm><primary>titles</primary>
  <secondary>formal elements</secondary></indexterm>

The distinction between formal and informal elements is that formal
elements have titles while informal ones do not. The
<sgmltag>InformalFigure</sgmltag> element was introduced in DocBook
<acronym>V3.1</acronym>. In prior versions of DocBook, you could only
achieve the effect of an informal figure by placing its content,
unwrapped, at the location where the informal figure was desired.
</para>
</sect3>
<sect3><title>Paragraphs</title>
<para>
<indexterm><primary>Para element</primary></indexterm>

There are three paragraph elements: <sgmltag>Para</sgmltag>, <sgmltag>
SimPara</sgmltag> (simple paragraphs may not contain other block-level
elements), and <sgmltag>FormalPara</sgmltag> (formal paragraphs have
titles).
</para>
</sect3>
<sect3><title>Equations</title>
<para>
<indexterm><primary>Equation element</primary></indexterm>
<indexterm><primary>titles</primary>
  <secondary>equation elements</secondary></indexterm>
<indexterm><primary>InlineEquation element</primary></indexterm>
There are two block-equation elements, <sgmltag>Equation</sgmltag> and
<sgmltag>InformalEquation</sgmltag> (for inline equations, use
<sgmltag>InlineEquation</sgmltag>).
</para>
<para>
Informal equations don't have titles. For reasons of
backward-compatibility, <sgmltag>Equation</sgmltag>s are not required
to have titles. However, it may be more difficult for some stylesheet
languages to properly enumerate <sgmltag>Equation</sgmltag>s if they
lack titles.
</para>
</sect3>
<sect3><title>Graphics</title>
<para>
<indexterm><primary>graphics</primary></indexterm>
<indexterm><primary>Figure element</primary></indexterm>
<indexterm><primary>ScreenShot element</primary></indexterm>
<indexterm><primary>block elements</primary>
  <secondary>Graphic</secondary></indexterm>
<indexterm><primary>InlineGraphic element</primary></indexterm>

Graphics occur most frequently in <sgmltag>Figure</sgmltag>s and
<sgmltag>ScreenShot</sgmltag>s, but they can also occur without a
wrapper. DocBook considers a <sgmltag>Graphic</sgmltag> a block
element, even if it appears to occur inline. For graphics that you
want to be represented inline, use <sgmltag>InlineGraphic</sgmltag>.
</para>
<para>
<indexterm><primary>MediaObject elements</primary></indexterm>
<indexterm><primary>InlineMediaObject element</primary></indexterm>

DocBook <acronym>V3.1</acronym> introduced a new element to contain
graphics and other media types: <sgmltag>MediaObject</sgmltag> and its inline
cousin, <sgmltag>InlineMediaObject</sgmltag>. These elements may contain
video, audio, image, and text data. A single media object can contain
several alternative forms from which the presentation system can
select the most appropriate object.
</para>
</sect3>
<sect3><title>Questions and answers</title>
<para>
<indexterm><primary>QandASet element</primary></indexterm>
<indexterm><primary>FAQ element</primary></indexterm>
<indexterm><primary>frequently asked questions (FAQ)</primary></indexterm>
<indexterm><primary>Question element</primary></indexterm>
<indexterm><primary>Answer element</primary></indexterm>

DocBook <acronym>V3.1</acronym> introduced the <sgmltag>QandASet</sgmltag>
element, which is suitable for <acronym>FAQ</acronym>s (Frequently
Asked Questions) and other similar collections of
<sgmltag>Question</sgmltag>s and <sgmltag>Answer</sgmltag>s.
</para>
</sect3>
<sect3><title>Miscellaneous block elements</title>
<para>
The following block elements are also available:
</para>
<variablelist>
<varlistentry>
<term><sgmltag>BlockQuote</sgmltag></term>
<listitem><para>
<indexterm><primary>BlockQuote element</primary></indexterm>
<indexterm><primary>Attribution element</primary></indexterm>

A block quotation.  Block quotations may have
<sgmltag>Attribution</sgmltag>s.</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>CmdSynopsis</sgmltag></term>
<listitem><para>
<indexterm><primary>CmdSynopsis element</primary></indexterm>
<indexterm><primary>parameters (commands), markup</primary></indexterm>
<indexterm><primary>options</primary>
  <secondary>commands, marking up</secondary></indexterm>
<indexterm><primary>commands</primary></indexterm>

An environment for marking up all the parameters and options of a command.
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Epigraph</sgmltag></term>
<listitem><para>
<indexterm><primary>Epigraph element</primary></indexterm>

A short introduction, typically a quotation, at the beginning of a document.
<sgmltag>Epigraph</sgmltag>s may have <sgmltag>Attribution</sgmltag>s.
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>FuncSynopsis</sgmltag></term>
<listitem><para>
<indexterm><primary>FuncSynopsis element</primary></indexterm>
<indexterm><primary>MsgSet element</primary></indexterm>

An environment for marking up the return value and arguments of a function.
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Highlights</sgmltag></term>
<listitem><para>
<indexterm><primary>Highlights element</primary></indexterm>

A summary of the main points discussed in a book component (chapter,
section, and so on).
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>MsgSet</sgmltag></term>
<listitem><para>
<indexterm><primary>error messages</primary>
  <secondary>sets of related</secondary></indexterm>

A set of related error messages.</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Procedure</sgmltag></term>
<listitem><para>
<indexterm><primary>Procedure element</primary></indexterm>
<indexterm><primary>Step element</primary></indexterm>
<indexterm><primary>SubStep element</primary></indexterm>

A procedure.  Procedures contain <sgmltag>Step</sgmltag>s, which
may contain <sgmltag>SubStep</sgmltag>s.</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Sidebar</sgmltag></term>
<listitem><para>A sidebar.</para></listitem>
</varlistentry>
</variablelist>
</sect3>
</sect2>
<sect2><title>Inline Elements</title>
<para>
<indexterm><primary>inline elements</primary></indexterm>
<indexterm><primary>text</primary>
  <secondary>inline elements</secondary></indexterm>

Users of DocBook are provided with a surfeit of inline elements.
Inline elements are used to mark up running text.  In published
documents, inline elements often cause a font change or other small
change, but they do not cause line or paragraph breaks.
</para>
<para>
In practice, writers generally settle on the tagging of inline elements that
suits their time and subject matter. This may be a large number of
elements or only a handful. What is important is that you choose to mark up
not every possible item, but only those for which distinctive tagging will
be useful in the production of the finished document for the readers who
will search through it.
</para>
<para>
The following comprehensive list may be a useful tool for the process
of narrowing down the elements that you will choose to mark up; it is
not intended to overwhelm you by its sheer length. For convenience,
we've divided the inlines into several subcategories.
</para>
<para>
The classification used here is not meant to be authoritative, only
helpful in providing a feel for the nature of the inlines.  Several
elements appear in more than one category, and arguments could be made
to support the placement of additional elements in other categories or
entirely new categories.
</para>
<sect3><title>Traditional publishing inlines</title>
<para>
<indexterm><primary>general writing (traditional publishing inlines)</primary></indexterm>
<indexterm><primary>traditional publishing, inline elements</primary></indexterm>

These inlines identify things that commonly occur in general writing:
</para>
<variablelist>
<varlistentry>
<term><sgmltag>Abbrev</sgmltag></term>
<listitem><para>&abbrev.purpose;.
<indexterm><primary>Abbrev element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Acronym</sgmltag></term>
<listitem><para>&acronym.purpose;.
<indexterm><primary>Acronym element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Emphasis</sgmltag></term>
<listitem><para>&emphasis.purpose;.<indexterm><primary>Emphasis element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Footnote</sgmltag></term>
<listitem>
<para>&footnote.purpose;.  The location of the <sgmltag>Footnote</sgmltag>
element identifies the location of the first reference to the
footnote. Additional references to the same footnote can be inserted with
<sgmltag>FootnoteRef</sgmltag>.
<indexterm><primary>FootnoteRef element</primary></indexterm>
<indexterm><primary>Footnote element</primary></indexterm>
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Phrase</sgmltag></term>
<listitem><para>&phrase.purpose;.<indexterm><primary>Phrase element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Quote</sgmltag></term>
<listitem><para>&quote.purpose;.<indexterm><primary>Quote element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Trademark</sgmltag></term>
<listitem><para>&trademark.purpose;.<indexterm><primary>Trademark element</primary></indexterm>
</para></listitem>
</varlistentry>
</variablelist>
</sect3>
<sect3><title>Cross references</title>
<para>
<indexterm><primary>cross references</primary></indexterm>
<indexterm><primary>Link element</primary></indexterm>
<indexterm><primary>GlossTerm element</primary></indexterm>
<indexterm><primary>LinkEnd attribute</primary></indexterm>

The cross reference inlines identify both explicit cross references,
such as <sgmltag>Link</sgmltag>, and implicit cross references like
<sgmltag>GlossTerm</sgmltag>. You can make the most of the implicit
references explicit with a <sgmltag class='attribute'>LinkEnd</sgmltag>
attribute.
</para>
<variablelist>
<varlistentry>
<term><sgmltag>Anchor</sgmltag></term>
<listitem><para>&anchor.purpose;.<indexterm><primary>Anchor element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Citation</sgmltag></term>
<listitem><para>&citation.purpose;.<indexterm><primary>Citation element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>CiteRefEntry</sgmltag></term>
<listitem><para>&citerefentry.purpose;.<indexterm><primary>CiteRefEntry element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>CiteTitle</sgmltag></term>
<listitem><para>&citetitle.purpose;.<indexterm><primary>CiteTitle element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>FirstTerm</sgmltag></term>
<listitem><para>&firstterm.purpose;.<indexterm><primary>FirstTerm element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>GlossTerm</sgmltag></term>
<listitem><para>&glossterm.purpose;.<indexterm><primary>GlossTerm element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Link</sgmltag></term>
<listitem><para>&link.purpose;.<indexterm><primary>Link element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>OLink</sgmltag></term>
<listitem><para>&olink.purpose;.<indexterm><primary>OLink element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>ULink</sgmltag></term>
<listitem><para>&ulink.purpose;.<indexterm><primary>ULink element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>XRef</sgmltag></term>
<listitem><para>&xref.purpose;.<indexterm><primary>XRef element</primary></indexterm>
</para></listitem>
</varlistentry>
</variablelist>
</sect3>
<sect3><title>Markup</title>
<para>
<indexterm><primary>markup</primary>
  <secondary>elements</secondary></indexterm>

These inlines are used to mark up text for special presentation:
</para>
<variablelist>
<varlistentry>
<term><sgmltag>ForeignPhrase</sgmltag></term>
<listitem><para>&foreignphrase.purpose;.<indexterm><primary>ForeignPhrase element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>WordAsWord</sgmltag></term>
<listitem><para>&wordasword.purpose;.<indexterm><primary>WordAsWord element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>ComputerOutput</sgmltag></term>
<listitem><para>&computeroutput.purpose;.<indexterm><primary>ComputerOutput element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Literal</sgmltag></term>
<listitem><para>&literal.purpose;.<indexterm><primary>Literal element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Markup</sgmltag></term>
<listitem><para>&markup.purpose;.<indexterm><primary>Markup element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Prompt</sgmltag></term>
<listitem><para>&prompt.purpose;.<indexterm><primary>Prompt element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Replaceable</sgmltag></term>
<listitem><para>&replaceable.purpose;.<indexterm><primary>Replaceable element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>SGMLTag</sgmltag></term>
<listitem><para>&sgmltag.purpose;.<indexterm><primary>SGMLTag element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>UserInput</sgmltag></term>
<listitem><para>&userinput.purpose;.<indexterm><primary>UserInput element</primary></indexterm>
</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3><title>Mathematics</title>
<para><indexterm><primary>elements</primary>
<secondary>mathematics</secondary>
</indexterm><indexterm><primary>mathematics (DocBook)</primary>
</indexterm><indexterm><primary>equations (elements)</primary>
</indexterm><indexterm><primary>MathML, incorporating</primary>
</indexterm><indexterm><primary>namespaces</primary>
</indexterm>DocBook does not define a complete set of elements for
representing equations. No one has ever pressed the DocBook
maintainers to add this functionality, and the prevailing opinion is
that incorporating
<ulink url="http://www.w3.org/TR/REC-MathML/">MathML</ulink> using a
mechanism like
<ulink url="http://www.w3.org/TR/REC-xml-names/">namespaces</ulink>
is probably the best long-term solution.</para>
<para>DocBook V4.5 added a <sgmltag>mathphrase</sgmltag> element to support
simple, textual mathematics that doesn't require extensive markup.</para>
<variablelist>
<varlistentry>
<term><sgmltag>InlineEquation</sgmltag></term>
<listitem><para>&inlineequation.purpose;.<indexterm><primary>InlineEquation element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>mathphrase</sgmltag></term>
<listitem><para>&mathphrase.purpose;.<indexterm><primary>mathphrase element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Subscript</sgmltag></term>
<listitem><para>&subscript.purpose;.<indexterm><primary>Subscript element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Superscript</sgmltag></term>
<listitem><para>&superscript.purpose;.<indexterm><primary>Superscript element</primary></indexterm>
</para></listitem>
</varlistentry>
</variablelist>
</sect3>
<sect3><title>User interfaces</title>
<para>
These elements describe aspects of a user interface:
<indexterm><primary>user interfaces, describing (elements)</primary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>user interfaces, describing</secondary></indexterm>

</para>
<variablelist>
<varlistentry>
<term><sgmltag>Accel</sgmltag></term>
     <listitem><para>&accel.purpose;.<indexterm><primary>Accel element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>GUIButton</sgmltag></term>
     <listitem><para>&guibutton.purpose;.<indexterm><primary>GuIButton element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>GUIIcon</sgmltag></term>
     <listitem><para>&guiicon.purpose;.<indexterm><primary>GUIIcon element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>GUILabel</sgmltag></term>
     <listitem><para>&guilabel.purpose;.</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>GUIMenu</sgmltag></term>
     <listitem><para>&guimenu.purpose;.<indexterm><primary>GUIMenu element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>GUIMenuItem</sgmltag></term>
     <listitem><para>&guimenuitem.purpose;.<indexterm><primary>GUIMenuItem element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>GUISubmenu</sgmltag></term>
     <listitem><para>&guisubmenu.purpose;.<indexterm><primary>GUISubmenu element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>KeyCap</sgmltag></term>
     <listitem><para>&keycap.purpose;.<indexterm><primary>KeyCap element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>KeyCode</sgmltag></term>
     <listitem><para>&keycode.purpose;.<indexterm><primary>KeyCode class</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>KeyCombo</sgmltag></term>
     <listitem><para>&keycombo.purpose;.<indexterm><primary>KeyCombo element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>KeySym</sgmltag></term>
     <listitem><para>&keysym.purpose;.<indexterm><primary>KeySym element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>MenuChoice</sgmltag></term>
     <listitem><para>&menuchoice.purpose;.<indexterm><primary>MenuChoice element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>MouseButton</sgmltag></term>
     <listitem><para>&mousebutton.purpose;.<indexterm><primary>MouseButton element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Shortcut</sgmltag></term>
     <listitem><para>&shortcut.purpose;.<indexterm><primary>Shortcut element</primary></indexterm>
</para></listitem>
</varlistentry>
</variablelist>
</sect3>
<sect3><title>Programming languages and constructs</title>
<para>
<indexterm><primary>programming languages (elements)</primary></indexterm>
<indexterm><primary>constructs (programming), elements</primary></indexterm>
<indexterm><primary>inline elements</primary>
  <secondary>programming languages and constructs</secondary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>programming languages and constructs</secondary></indexterm>
<indexterm><primary>inline elements</primary>
  <secondary>technical</secondary></indexterm>

Many of the technical inlines in DocBook are related to programming.
</para>
<variablelist>
<varlistentry>
<term><sgmltag>Action</sgmltag></term>
     <listitem><para>&action.purpose;.<indexterm><primary>Action element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>ClassName</sgmltag></term>
     <listitem><para>&classname.purpose;.<indexterm><primary>ClassName element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Constant</sgmltag></term>
     <listitem><para>&constant.purpose;.<indexterm><primary>Constant element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>ErrorCode</sgmltag></term>
     <listitem><para>&errorcode.purpose;.<indexterm><primary>ErrorCode element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>ErrorName</sgmltag></term>
     <listitem><para>&errorname.purpose;.<indexterm><primary>ErrorName element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>ErrorType</sgmltag></term>
     <listitem><para>&errortype.purpose;.<indexterm><primary>ErrorType element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Function</sgmltag></term>
     <listitem><para>&function.purpose;.<indexterm><primary>Function element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Interface</sgmltag></term>
     <listitem><para>&interface.purpose;.<indexterm><primary>Interface element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>InterfaceDefinition</sgmltag></term>
     <listitem><para>&interfacedefinition.purpose;.<indexterm><primary>InterfaceDefinition element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Literal</sgmltag></term>
     <listitem><para>&literal.purpose;.<indexterm><primary>Literal element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>MsgText</sgmltag></term>
     <listitem><para>&msgtext.purpose;.<indexterm><primary>MsgText element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Parameter</sgmltag></term>
     <listitem><para>&parameter.purpose;.<indexterm><primary>Parameter element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Property</sgmltag></term>
     <listitem><para>&property.purpose;.<indexterm><primary>Property element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Replaceable</sgmltag></term>
     <listitem><para>&replaceable.purpose;.<indexterm><primary>Replaceable element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>ReturnValue</sgmltag></term>
     <listitem><para>&returnvalue.purpose;.<indexterm><primary>ReturnValue element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>StructField</sgmltag></term>
     <listitem><para>&structfield.purpose;.<indexterm><primary>StructField element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>StructName</sgmltag></term>
     <listitem><para>&structname.purpose;.<indexterm><primary>StructName element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Symbol</sgmltag></term>
     <listitem><para>&symbol.purpose;.<indexterm><primary>Symbol element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Token</sgmltag></term>
     <listitem><para>&token.purpose;.<indexterm><primary>Token element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Type</sgmltag></term>
     <listitem><para>&type.purpose;.<indexterm><primary>Type element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>VarName</sgmltag></term>
     <listitem><para>&varname.purpose;.<indexterm><primary>VarName element</primary></indexterm>
</para></listitem>
</varlistentry>
</variablelist>
</sect3>
<sect3><title>Operating systems</title>
<para>
<indexterm><primary>operating systems</primary>
  <secondary>inline elements</secondary></indexterm>

These inlines identify parts of an operating system, or an
operating environment:
</para>
<variablelist>
<varlistentry>
<term><sgmltag>Application</sgmltag></term>
     <listitem><para>&application.purpose;.<indexterm><primary>Application element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Command</sgmltag></term>
     <listitem><para>&command.purpose;.<indexterm><primary>Command element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>EnVar</sgmltag></term>
     <listitem><para>&envar.purpose;.<indexterm><primary>EnVar element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Filename</sgmltag></term>
     <listitem><para>&filename.purpose;.<indexterm><primary>Filename element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>MediaLabel</sgmltag></term>
     <listitem><para>&medialabel.purpose;.<indexterm><primary>MediaLabel element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>MsgText</sgmltag></term>
     <listitem><para>&msgtext.purpose;.<indexterm><primary>MsgText element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Option</sgmltag></term>
     <listitem><para>&option.purpose;.<indexterm><primary>Option element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Parameter</sgmltag></term>
     <listitem><para>&parameter.purpose;.<indexterm><primary>Parameter element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Prompt</sgmltag></term>
     <listitem><para>&prompt.purpose;.<indexterm><primary>Prompt element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>SystemItem</sgmltag></term>
     <listitem><para>&systemitem.purpose;.<indexterm><primary>SystemItem element</primary></indexterm>
</para></listitem>
</varlistentry>
</variablelist>
</sect3>
<sect3><title>General purpose</title>
<para>
<indexterm><primary>general-purpose technical inline elements</primary></indexterm>
<indexterm><primary>inline elements</primary>
  <secondary>technical (general-purpose)</secondary></indexterm>

There are also a number of general-purpose technical inlines.
</para>
<variablelist>
<varlistentry>
<term><sgmltag>Application</sgmltag></term>
     <listitem><para>&application.purpose;.<indexterm><primary>Application element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Database</sgmltag></term>
     <listitem><para>&database.purpose;.<indexterm><primary>Database element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Email</sgmltag></term>
     <listitem><para>&email.purpose;.<indexterm><primary>Email element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Filename</sgmltag></term>
     <listitem><para>&filename.purpose;.<indexterm><primary>Filename element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Hardware</sgmltag></term>
     <listitem><para>&hardware.purpose;.<indexterm><primary>Hardware element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>InlineGraphic</sgmltag></term>
     <listitem><para>&inlinegraphic.purpose;.<indexterm><primary>InlineGraphic element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Literal</sgmltag></term>
     <listitem><para>&literal.purpose;.<indexterm><primary>Literal element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>MediaLabel</sgmltag></term>
     <listitem><para>&medialabel.purpose;.<indexterm><primary>MediaLabel element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Option</sgmltag></term>
     <listitem><para>&option.purpose;.<indexterm><primary>Option element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Optional</sgmltag></term>
     <listitem><para>&optional.purpose;.<indexterm><primary>Optional element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Replaceable</sgmltag></term>
     <listitem><para>&replaceable.purpose;.<indexterm><primary>Replaceable element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Symbol</sgmltag></term>
     <listitem><para>&symbol.purpose;.<indexterm><primary>Symbol element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Token</sgmltag></term>
     <listitem><para>&token.purpose;.<indexterm><primary>Token element</primary></indexterm>
</para></listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>Type</sgmltag></term>
     <listitem><para>&type.purpose;.<indexterm><primary>Type element</primary></indexterm>
</para></listitem>
</varlistentry>
</variablelist>
</sect3>
</sect2>
</sect1>
<sect1 id="ch02-makebook"><title>Making a DocBook Book</title>
<para>
<indexterm><primary>DocBook DTD</primary>
  <secondary>Book, making</secondary></indexterm>
<indexterm><primary>books</primary>
  <secondary>DocBook, making</secondary></indexterm>
<indexterm><primary>meta-information</primary>
  <secondary>DocBook Book</secondary></indexterm>

A typical <sgmltag>Book</sgmltag>, in English at least, consists of 
some meta-information in a <sgmltag>BookInfo</sgmltag>
(<sgmltag>Title</sgmltag>, <sgmltag>Author</sgmltag>,
<sgmltag>Copyright</sgmltag>, and so on), one or more <sgmltag>
Preface</sgmltag>s, several <sgmltag>Chapter</sgmltag>s, and perhaps a
few <sgmltag>Appendix</sgmltag>es. A <sgmltag>Book</sgmltag> may also
contain <sgmltag>Bibliography</sgmltag>s,
<sgmltag>Glossary</sgmltag>s, <sgmltag>Index</sgmltag>es and a
<sgmltag>Colophon</sgmltag>.
</para>
<para>
<xref linkend="ex-typicalbook"/> shows the structure of a typical book.
Additional content is required where the ellipses occur.
<indexterm><primary>books</primary>
  <secondary>typical structure</secondary></indexterm>

</para>
<example id="ex-typicalbook">
<title>A Typical Book</title>
<programlisting>&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
&lt;book>
&lt;bookinfo>
  &lt;title>My First Book&lt;/title>
  &lt;author>&lt;firstname>Jane&lt;/firstname>&lt;surname>Doe&lt;/surname>&lt;/author>
  &lt;copyright>&lt;year>1998&lt;/year>&lt;holder>Jane Doe&lt;/holder>&lt;/copyright>
&lt;/bookinfo>
&lt;preface>&lt;title>Foreword&lt;/title> ... &lt;/preface>
&lt;chapter> ... &lt;/chapter>
&lt;chapter> ... &lt;/chapter>
&lt;chapter> ... &lt;/chapter>
&lt;appendix> ... &lt;/appendix>
&lt;appendix> ... &lt;/appendix>
&lt;index> ... &lt;/index>
&lt;/book></programlisting>
</example>
</sect1>
<sect1 id="ch02-makechap"><title>Making a Chapter</title>
<para>
<indexterm><primary>Chapter element</primary>
  <secondary>typical chapter, structure</secondary></indexterm>
<indexterm><primary>Preface element</primary>
  <secondary>typical structure</secondary></indexterm>
<indexterm><primary>Appendix element</primary>
  <secondary>typical structure</secondary></indexterm>

<sgmltag>Chapter</sgmltag>s, <sgmltag>Preface</sgmltag>s, and
<sgmltag>Appendix</sgmltag>es all have a similar structure. They
consist of a <sgmltag>Title</sgmltag>, possibly some additional
meta-information, and any number of block-level elements followed by
any number of top-level sections. Each section may in turn contain any
number of block-level elements followed by any number from the next
section level, as shown in <xref linkend="ex-typicalchap"/>.
</para>
<example id="ex-typicalchap">
<title>A Typical Chapter</title>
<programlisting>&lt;!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
&lt;chapter>&lt;title>My Chapter&lt;/title>
&lt;para> ... &lt;/para>
&lt;sect1>&lt;title>First Section&lt;/title>
&lt;para> ... &lt;/para>
&lt;example> ... &lt;/example>
&lt;/sect1>
&lt;/chapter>
</programlisting>
</example>
</sect1>
<sect1 id="making-article">
<title>Making an Article</title>
<para>
<indexterm><primary>articles</primary>
  <secondary>creating</secondary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>component-level</secondary></indexterm>
<indexterm><primary>components</primary>
  <secondary>elements</secondary></indexterm>
<indexterm><primary>journal articles</primary></indexterm>
<indexterm><primary>white papers, creating</primary></indexterm>

For documents smaller than a book, such as: journal articles, white
papers, or technical notes, <sgmltag>Article</sgmltag> is frequently
the most logical starting point. The body of an
<sgmltag>Article</sgmltag> is essentially the same as the body of a
<sgmltag>Chapter</sgmltag> or any other component-level element, as
shown in <xref linkend="ex-typicalart"/>
</para>
<para>
<sgmltag>Article</sgmltag>s may include
<sgmltag>Appendix</sgmltag>es, <sgmltag>Bibliography</sgmltag>s,
<sgmltag>Index</sgmltag>es and <sgmltag>Glossary</sgmltag>s.
</para>
<example id="ex-typicalart">
<title>A Typical Article</title>
<programlisting>&lt;!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
&lt;article>
&lt;artheader>
  &lt;title>My Article&lt;/title>
  &lt;author>&lt;honorific>Dr&lt;/honorific>&lt;firstname>Emilio&lt;/firstname>
          &lt;surname>Lizardo&lt;/surname>&lt;/author>
&lt;/artheader>
&lt;para> ... &lt;/para>
&lt;sect1>&lt;title>On the Possibility of Going Home&lt;/title>
&lt;para> ... &lt;/para>
&lt;/sect1>
&lt;bibliography> ... &lt;/bibliography>
&lt;/article>
</programlisting>
</example>
</sect1>
<sect1 id="making-refentry"><title>Making a Reference Page</title>
<para>
<indexterm><primary>reference pages</primary>
  <secondary>creating</secondary></indexterm>
<indexterm><primary>manual page, creating</primary></indexterm>
<indexterm><primary>UNIX</primary>
  <secondary>manpage</secondary></indexterm>
<indexterm><primary>manpage (UNIX)</primary></indexterm>

The reference page or manual page in DocBook was inspired by, and in
fact designed to reproduce, the common &UNIX; &ldquo;manpage&rdquo;
concept. (We use the word "page" loosely here to mean a document of
variable length containing reference material on a specific topic.)
DocBook is rich in markup tailored for such documents, which often
vary greatly in content, however well-structured they may be. To
reflect both the structure and the variability of such texts, DocBook
specifies that reference pages have a strict sequence of parts, even
though several of them are actually optional.
</para>
<para>
<indexterm><primary>RefEntry element</primary>
  <secondary>elements, obligatory</secondary></indexterm>
<indexterm><primary>RefNameDiv element</primary></indexterm>
<indexterm><primary>RefSect1 element</primary></indexterm>

Of the following sequence of elements that may appear in a <sgmltag class="element">RefEntry</sgmltag>, only two are obligatory: <sgmltag class="element">RefNameDiv</sgmltag> and <sgmltag class="element">RefSect1</sgmltag>.
<variablelist>
<varlistentry>
<term><sgmltag class="element">DocInfo</sgmltag></term>
<listitem>
<para>
<indexterm><primary>DocInfo element</primary>
  <secondary>reference page, meta-information</secondary></indexterm>
<indexterm><primary>meta-information</primary>
  <secondary>reference page</secondary></indexterm>

The <sgmltag class="element">DocInfo</sgmltag> element contains
meta-information about the reference page (which should not be
confused with <sgmltag class="element">RefMeta</sgmltag>, which it
precedes). It marks up information about the author of the document,
or the product to which it pertains, or the document's revision
history, or other such information.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><sgmltag class="element">RefMeta</sgmltag></term>
<listitem>
<para>
<indexterm><primary>RefMeta element</primary></indexterm>
<indexterm><primary>titles</primary>
  <secondary>reference pages</secondary></indexterm>
<indexterm><primary>volume number (reference page)</primary></indexterm>
<indexterm><primary>ManVolNum</primary></indexterm>
<indexterm><primary>UNIX</primary>
  <secondary>ManVolNum</secondary></indexterm>
<indexterm><primary>uname command and uname function, distinguishing</primary></indexterm>

<sgmltag class="element">RefMeta</sgmltag> contains a title for
the reference page (which may be inferred if the
<sgmltag>RefMeta</sgmltag> element is not present) and an indication
of the volume number in which this reference page occurs. The
<sgmltag>ManVolNum</sgmltag> is a very &UNIX;-centric concept.  In
traditional &UNIX; documentation, the subject of a reference page is
typically identified by name and volume number; this allows you to
distinguish between the <command>uname</command> command,
<quote>uname(1)</quote> in volume 1 of the documentation and the
<function>uname</function> function, <quote>uname(3)</quote> in
volume 3.
</para>
<para>
<indexterm><primary>RefMiscInfo element</primary></indexterm>
<indexterm><primary>miscellaneous information, reference pages</primary></indexterm>

Additional information of this sort such as conformance or
vendor information specific to the particular environment you are
working in, may be stored in <sgmltag>RefMiscInfo</sgmltag>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><sgmltag class="element">RefNameDiv</sgmltag></term>
<listitem>
<para>
<indexterm><primary>RefNameDiv element</primary></indexterm>
<indexterm><primary>RefDescriptor element</primary></indexterm>
<indexterm><primary>RefName element</primary></indexterm>
<indexterm><primary>RefPurpose element</primary></indexterm>
<indexterm><primary>purpose (reference pages)</primary></indexterm>
<indexterm><primary>RefClass element</primary></indexterm>
<indexterm><primary>operating systems</primary>
  <secondary>configurations, software support</secondary></indexterm>

The first obligatory element is <sgmltag class="element">RefNameDiv</sgmltag>, which is a wrapper for
information about whatever you're documenting, rather than the
document itself. It can begin with a <sgmltag class="element">RefDescriptor</sgmltag> if several items are being
documented as a group and the group has a name. The <sgmltag class="element">RefNameDiv</sgmltag> must contain at least one
<sgmltag class="element">RefName</sgmltag>, that is, the name of
whatever you're documenting, and a single short statement that sums up
the use or function of the item(s) at a glance: their <sgmltag class="element">RefPurpose</sgmltag>. Also available is the <sgmltag class="element">RefClass</sgmltag>, intended to detail the
operating system configurations that the software element in question
supports.
</para>
<para>
<indexterm><primary>titles</primary>
  <secondary>reference pages</secondary></indexterm>
<indexterm><primary>RefEntryTitle element</primary></indexterm>

If no <sgmltag>RefEntryTitle</sgmltag> is given in the
<sgmltag>RefMeta</sgmltag>, the title of the reference page is the
<sgmltag>RefDescriptor</sgmltag>, if present, or the first
<sgmltag>RefName</sgmltag>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><sgmltag class="element">RefSynopsisDiv</sgmltag></term>
<listitem>
<para>
<indexterm><primary>RefSynopsisDiv element</primary></indexterm>
<indexterm><primary>synopses</primary>
  <secondary>reference topics</secondary></indexterm>
<indexterm><primary>commands</primary>
  <secondary>syntax summary</secondary></indexterm>
<indexterm><primary>functions</primary>
  <secondary>function prototype</secondary></indexterm>
<indexterm><primary>Title element</primary></indexterm>

A <sgmltag class="element">RefSynopsisDiv</sgmltag> is intended
to provide a quick synopsis of the topic covered by the reference
page. For commands, this is generally a syntax summary of the command,
and for functions, the function prototype, but other options are
possible. A <sgmltag class="element">Title</sgmltag> is allowed, but
not required, presumably because the application that processes
reference pages will generate the appropriate title if it is not
given. In traditional &UNIX; documentation, its title is always
&ldquo;Synopsis&rdquo;.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><sgmltag>RefSect1</sgmltag>&hellip;<sgmltag>RefSect3</sgmltag></term>
<listitem>
<para>
<indexterm><primary>sections</primary>
  <secondary>RefEntry, levels</secondary></indexterm>
<indexterm><primary>RefSect1&hellip;RefSect3</primary></indexterm>

Within <sgmltag>RefEntry</sgmltag>s, there are only three levels
of sectioning elements: <sgmltag>RefSect1</sgmltag>,
<sgmltag>RefSect2</sgmltag>, and <sgmltag>RefSect3</sgmltag>.</para>
</listitem>
</varlistentry>
</variablelist>
</para>
<para>
<xref linkend="ex-samprefpage"/> shows the beginning of a <sgmltag class="element">RefEntry</sgmltag> that illustrates one possible
reference page:
<indexterm><primary>reference pages</primary>
  <secondary>sample page</secondary></indexterm>
</para>
<example id="ex-samprefpage">
<title>A Sample Reference Page</title>
<programlisting>
<![CDATA[
<refentry id="printf">

<refmeta>
<refentrytitle>printf</refentrytitle>
<manvolnum>3S</manvolnum>
</refmeta>

<refnamediv>
<refname>printf</refname>
<refname>fprintf</refname>
<refname>sprintf</refname>
<refpurpose>print formatted output</refpurpose>
</refnamediv>

<refsynopsisdiv>

<funcsynopsis>
<funcsynopsisinfo>
#include &lt;stdio.h&gt;
</funcsynopsisinfo>
<funcprototype>
  <funcdef>int <function>printf</function></funcdef>
  <paramdef>const char *<parameter>format</parameter></paramdef>
  <paramdef>...</paramdef>
</funcprototype>

<funcprototype>
  <funcdef>int <function>fprintf</function></funcdef>
  <paramdef>FILE *<parameter>strm</parameter></paramdef>
  <paramdef>const char *<parameter>format</parameter></paramdef>
  <paramdef>...</paramdef>
</funcprototype>

<funcprototype>
  <funcdef>int <function>sprintf</function></funcdef>
  <paramdef>char *<parameter>s</parameter></paramdef>
  <paramdef>const char *<parameter>format</parameter></paramdef>
  <paramdef>...</paramdef>
</funcprototype>
</funcsynopsis>

</refsynopsisdiv>

<refsect1><title>Description</title>
<para>
<indexterm><primary>functions</primary>
  <secondary>printf</secondary></indexterm>
<indexterm><primary>printing function</primary></indexterm>

<function>printf</function> places output on the standard
output stream stdout.
&hellip;
</para>
</refsect1>
</refentry>]]></programlisting>
</example>
</sect1>
<sect1 id="ch02-makefrontback"><title>Making Front- and Backmatter</title>
<para>
<indexterm><primary>frontmatter, books and articles</primary></indexterm>
<indexterm><primary>backmatter, books and articles</primary></indexterm>
<indexterm><primary>indexes</primary>
  <secondary>creating, books and articles</secondary></indexterm>
<indexterm><primary>glossaries</primary>
  <secondary>creating</secondary></indexterm>
<indexterm><primary>tables of contents</primary>
  <secondary>creating, books and articles</secondary></indexterm>

DocBook contains markup for the usual variety of front- and backmatter
necessary for books and articles: indexes, glossaries, bibliographies,
and tables of contents. In many cases, these components are generated
automatically, at least in part, from your document by an external
processor, but you can create them by hand, and in either case, store
them in DocBook.
</para>
<para>
<indexterm><primary>markup</primary>
  <secondary>backmatter, books and articles</secondary></indexterm>

Some forms of backmatter, like indexes and glossaries, usually require
additional markup <emphasis>in the document</emphasis> to make
generation by an application possible.  Bibliographies are usually
composed by hand like the rest of your text, unless you are
automatically selecting bibliographic entries out of some larger
database.  Our principal concern here is to acquaint you with the kind
of markup you need to include in your documents if you want to
construct these components.
</para>
<para>
Frontmatter, like the table of contents, is almost always generated
automatically from the text of a document by the processing
application. If you need information about how to mark up a table of
contents in DocBook, please consult the reference page for
<sgmltag>ToC</sgmltag>.
</para>
<sect2 id="makeindex"><title>Making an Index</title>
<para>
<indexterm><primary>indexes</primary>
  <secondary>marking index terms</secondary></indexterm>
In some highly-structured documents such as reference manuals, you can
automate the whole process of generating an index successfully without
altering or adding to the original source. You can design a processing
application to select the information and compile it into an adequate
index. But this is rare.
</para>
<para>
In most cases&mdash;and even in the case of some reference
manuals&mdash;a useful index still requires human intervention to mark
occurrences of words or concepts that will appear in the text of the
index.
</para>
<sect3><title>Marking index terms</title>
<para>
<indexterm><primary>singular index markers</primary></indexterm>
<indexterm><primary>ranges, index entries</primary></indexterm>

Docbook distinguishes two kinds of index markers: those that are
singular and result in a single page entry in the index itself, and
those that are multiple and refer to a range of pages.
</para>
<para>You put a singular index marker where the subject it refers to
actually occurs in your text:
<screen>
&lt;para>
The tiger&lt;indexterm>
&lt;primary>Big Cats&lt;/primary>
&lt;secondary>Tigers&lt;/secondary>&lt;/indexterm>
is a very large cat indeed.
&lt;/para>
</screen> 
<indexterm><primary>primary level index entries</primary></indexterm>
<indexterm><primary>secondary level index entries</primary></indexterm>
<indexterm><primary>tertiary level index entries</primary></indexterm>
This index term has two levels, <sgmltag>primary</sgmltag> and
<sgmltag>secondary</sgmltag>.  They correspond to an increasing amount
of indented text in the resultant index. DocBook allows for three
levels of index terms, with the third labeled
<sgmltag>tertiary</sgmltag>.
</para>
<para>
<indexterm><primary>starting index terms (ranges)</primary></indexterm>
<indexterm><primary>ending index terms (ranges)</primary></indexterm>

There are two ways that you can index a range of text. The first is to
put index marks at both the beginning and end of the discussion.  The
mark at the beginning asserts that it is the start of a range, and the
mark at the end refers back to the beginning. In this way, the
processing application can determine what range of text is
indexed. Here's the previous tiger example recast as starting and
ending index terms:
</para>
<screen>
&lt;para>
The tiger&lt;indexterm id="tiger-desc" class="startofrange">
&lt;primary>Big Cats&lt;/primary>
&lt;secondary>Tigers&lt;/secondary>&lt;/indexterm>
is a very large cat indeed&hellip;
&lt;/para>
&vellip;
&lt;para>
So much for tigers&lt;indexterm startref="tiger-desc" class="endofrange">. Let's talk about
leopards.  
&lt;/para>
</screen>
<para>
<indexterm><primary>ID attribute</primary>
  <secondary>index entries, ranges</secondary></indexterm>
<indexterm><primary>Class attribute</primary>
  <secondary>index entries, ranges</secondary></indexterm>

Note that the mark at the start of the range identifies itself as the
start of a range with the <sgmltag class="attribute">Class</sgmltag>
attribute, and provides an <sgmltag class="attribute">ID</sgmltag>.
The mark at the end of the range points back to the start.
</para>
<para>
<indexterm><primary>IndexTerm element</primary>
  <secondary>Zone attribute</secondary></indexterm>
<indexterm><primary>Zone attribute (indexterm)</primary></indexterm>

Another way to mark up a range of text is to specify that the entire
content of an element, such as a chapter or section, is the complete
range.  In this case, all you need is for the index term to point to
the <sgmltag class="attribute">ID</sgmltag> of the element that
contains the content in question. The <sgmltag class="attribute">Zone</sgmltag> attribute of <sgmltag>indexterm</sgmltag>
provides this functionality.
</para>
<para>
One of the interesting features of this method is that the actual
index marks do not have to occur anywhere near the text being
indexed. It is possible to collect all of them together, for example,
in one file, but it is not invalid to have the index marker occur near
the element it indexes.
</para>
<para>
Suppose the discussion of tigers in your document comprises a
whole text object (like a <sgmltag class="element">Sect1</sgmltag>
or a <sgmltag class="element">Chapter</sgmltag>) with an
<sgmltag class="attribute">ID</sgmltag> value of 
<literal>tiger-desc</literal>. You can put the following
tag anywhere in your document to index that range of text:
<screen>
&lt;indexterm zone="tiger-desc">
&lt;primary>Big Cats&lt;/primary>
&lt;secondary>Tigers&lt;/secondary>&lt;/indexterm>
</screen> 
</para>
<para>
<indexterm><primary>see and see also index entries</primary></indexterm>
DocBook also contains markup for index hits that point to other index
hits (of the same type such as "See Cats, big" or "See also
Lions"). See the reference pages for <sgmltag>See</sgmltag> and
<sgmltag>SeeAlso</sgmltag>.
</para>
</sect3>
<sect3><title>Printing an index</title>
<para>
<indexterm><primary>indexes</primary>
  <secondary>printing</secondary></indexterm>

After you have added the appropriate markup to your document, an
external application can use this information to build an index. The
resulting index must have information about the page numbers on which
the concepts appear. It's usually the document formatter that builds
the index.  In this case, it may never be instantiated in DocBook.
</para>
<para>
<indexterm><primary>indexes</primary>
  <secondary>index marked up in DocBook (example)</secondary></indexterm>

However, there are applications that can produce an index marked up in
DocBook.  The following example includes some one- and two-level
<sgmltag class="element">IndexEntry</sgmltag> elements (which
correspond to the primary and secondary levels in the
<sgmltag>indexterm</sgmltag>s themselves) that begin with the letter D:
<screen>
&lt;!DOCTYPE index PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
&lt;index>&lt;title>Index&lt;/title>
&lt;indexdiv>&lt;title>D&lt;/title>
&lt;indexentry>
  &lt;primaryie>database (bibliographic), 253, 255&lt;/primaryie>
     &lt;secondaryie>structure, 255&lt;/secondaryie>
     &lt;secondaryie>tools, 259&lt;/secondaryie>
&lt;/indexentry>
&lt;indexentry>
  &lt;primaryie>dates (language specific), 179&lt;/primaryie>
&lt;/indexentry>
&lt;indexentry>
  &lt;primaryie>DC fonts, &lt;emphasis>172&lt;/emphasis>, 177&lt;/primaryie>
     &lt;secondaryie>Math fonts, 177&lt;/secondaryie>
&lt;/indexentry>
&lt;/indexdiv>
&lt;/index>
</screen> 
</para>
</sect3>
</sect2>
<sect2><title>Making a Glossary</title>
<para>
<indexterm><primary>glossaries</primary>
  <secondary>creating</secondary></indexterm>

<sgmltag>Glossary</sgmltag>s, like <sgmltag>Bibliography</sgmltag>s, are often
constructed by hand.  However, some applications are capable of
building a skeletal index from glossary term markup in the document.
If all of your terms are defined in some glossary database, it may
even be possible to construct the complete glossary automatically.
</para>
<para>
<indexterm><primary>markup</primary>
  <secondary>glossaries</secondary></indexterm>
<indexterm><primary>GlossTerm element</primary></indexterm>
<indexterm><primary>LinkEnd attribute</primary>
  <secondary>GlossTerm tag</secondary></indexterm>
<indexterm><primary>ID attribute</primary>
  <secondary>glossary entries</secondary></indexterm>
<indexterm><primary>links</primary>
  <secondary>glossary terms (text) to glossary entries</secondary></indexterm>

To enable automatic glossary generation, or simply automatic linking
from glossary terms in the text to glossary entries, you must add
markup to your documents.  In the text, you markup a term for
compilation later with the inline <sgmltag>GlossTerm</sgmltag>
tag. This tag can have a <sgmltag class="attribute">LinkEnd</sgmltag>
attribute whose value is the ID of the actual entry in the
glossary.<footnote>
<para>
Some sophisticated formatters might even be able to establish the link
simply by examining the content of the terms and the glossary. In that
case, the author is not required to make explicit links.
</para>
</footnote>
</para>
<para>
For instance, if you have this markup in your document:
</para>
<screen>
&lt;glossterm linkend="xml">Extensible Markup Language&lt;/glossterm> is a new standard&hellip; 
</screen>
<para>
<indexterm><primary>glossaries</primary>
  <secondary>example</secondary></indexterm>

your glossary might look like this:
</para>
<screen>
&lt;!DOCTYPE glossary PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
&lt;glossary>&lt;title>Example Glossary&lt;/title>
&vellip;
&lt;glossdiv>&lt;title>E&lt;/title>

&lt;glossentry id="xml">&lt;glossterm>Extensible Markup Language&lt;/glossterm>
  &lt;acronym>XML&lt;/acronym>
&lt;glossdef>
  &lt;para>Some reasonable definition here.&lt;/para>
  &lt;glossseealso otherterm="sgml">
&lt;/glossdef>
&lt;/glossentry>

&lt;/glossdiv>
</screen>
<para>
Note that the <sgmltag class="element">GlossTerm</sgmltag> tag
reappears in the glossary to mark up the term and distinguish it from
its definition within the <sgmltag class="element">
GlossEntry</sgmltag>. The <sgmltag class="attribute">ID</sgmltag> that
the <sgmltag class="element"> GlossEntry</sgmltag> referenced in the
text is the <acronym>ID</acronym> of the <sgmltag class="element">GlossEntry</sgmltag> in the <sgmltag>Glossary</sgmltag>
itself. You can use the link between source and glossary to create a
link in the online form of your document, as we have done with the
online form of the glossary in this book.
</para>
</sect2>
<sect2><title>Making a Bibliography</title>
<para>
<indexterm><primary>bibliographies, creating</primary></indexterm>
<indexterm><primary>raw data</primary>
  <secondary>bibliographies</secondary></indexterm>
<indexterm><primary>cooked data</primary>
  <secondary>bibliographies</secondary></indexterm>
<indexterm><primary>BiblioEntry element</primary></indexterm>

There are two ways to set up a bibliography in DocBook: you can have
the data <emphasis>raw</emphasis> or
<emphasis>cooked</emphasis>. Here's an example of a raw
bibliographical item, wrapped in the <sgmltag class="element">Biblioentry</sgmltag> element:
</para>
<screen>
&lt;biblioentry xreflabel="Kites75">
  &lt;authorgroup>
    &lt;author>&lt;firstname>Andrea&lt;/firstname>&lt;surname>Bahadur&lt;/surname>&lt;/author>
    &lt;author>&lt;firstname>Mark&lt;/>&lt;surname>Shwarek&lt;/>&lt;/author>
  &lt;/authorgroup>
  &lt;copyright>&lt;year>1974&lt;/year>&lt;year>1975&lt;/year>
     &lt;holder>Product Development International Holding N. V.&lt;/holder>
     &lt;/copyright>
  &lt;isbn>0-88459-021-6&lt;/isbn>    
  &lt;publisher>
    &lt;publishername>Plenary Publications International, Inc.&lt;/publishername>
  &lt;/publisher>
  &lt;title>Kites&lt;/title>
  &lt;subtitle>Ancient Craft to Modern Sport&lt;/subtitle>
  &lt;pagenums>988-999&lt;/pagenums>
  &lt;seriesinfo>
    &lt;title>The Family Creative Workshop&lt;/title>
    &lt;seriesvolnums>1-22&lt;/seriesvolnums>
    &lt;editor>
      &lt;firstname>Allen&lt;/firstname>
      &lt;othername role=middle>Davenport&lt;/othername>
      &lt;surname>Bragdon&lt;/surname>
      &lt;contrib>Editor in Chief&lt;/contrib>
    &lt;/editor>
  &lt;/seriesinfo>
&lt;/biblioentry>
</screen>
<para>
The &ldquo;raw&rdquo; data in a <sgmltag class="element">Biblioentry</sgmltag> is comprehensive to a
fault&mdash;there are enough fields to suit a host of different
bibliographical styles, and that is the point. An abundance of data
requires processing applications to select, punctuate, order, and
format the bibliographical data, and it is unlikely that all the
information provided will actually be output.
</para>
<para>
<indexterm><primary>Bibliomixed element</primary></indexterm>

All the &ldquo;cooked&rdquo; data in a <sgmltag class="element">Bibliomixed</sgmltag> entry in a bibliography, on the
other hand, is intended to be presented to the reader in the form and
sequence in which it is provided. It even includes punctuation between
the fields of data:
</para>
<screen>
&lt;bibliomixed>
  &lt;bibliomset relation=article>
    &lt;surname>Walsh&lt;/surname>, &lt;firstname>Norman&lt;/firstname>.
    &lt;title role=article>Introduction to Cascading Style Sheets&lt;/title>.
  &lt;/bibliomset>
  &lt;bibliomset relation=journal>
    &lt;title>The World Wide Web Journal&lt;/title> 
    &lt;volumenum>2&lt;/volumenum>&lt;issuenum>1&lt;/issuenum>.
    &lt;publishername>O'Reilly &amp; Associates, Inc.&lt;/publishername> and
    &lt;corpname>The World Wide Web Consortium&lt;/corpname>.
    &lt;pubdate>Winter, 1996&lt;/pubdate>&lt;/bibliomset>.
&lt;/bibliomixed>
</screen>
<para>
Clearly, these two ways of marking up bibliographical entries are
suited to different circumstances.  You should use one or the other
for your bibliography, not both. Strictly speaking, mingling the raw
and the cooked may be &ldquo;kosher&rdquo; as far as the &DTD; is
concerned, but it will almost certainly cause problems for most
processing applications.
<indexterm startref="DocBookDocch02" class="endofrange"/>
<indexterm startref="documentsDocBookch02" class='endofrange'/>

</para>
</sect2>
</sect1>
</chapter>
<chapter id="ch-parse">
<?dbhtml filename="ch03.html"?>
<chapterinfo>
<pubdate>$Date: 2002-03-23 23:57:55 +0300 (Сб, 23 мар 2002) $</pubdate>
<releaseinfo>$Revision: 1322 $</releaseinfo>
</chapterinfo>
<title>Parsing DocBook Documents</title>
<para>
<indexterm id="parsDocch4" class="startofrange"><primary>parsing</primary>
  <secondary>DocBook documents</secondary></indexterm>
<indexterm id="docDTDparsch4" class="startofrange"><primary>DocBook DTD</primary>
  <secondary>parsing documents</secondary></indexterm>

A key feature of &SGML; and &XML; markup is that you
<emphasis>validate</emphasis> it.  The DocBook &DTD; is a precise description
of valid nesting, the order of elements, and their content.  All
DocBook documents must conform to this description or they are not
DocBook documents (by definition).
</para>
<para>
<indexterm><primary>parsers</primary>
  <secondary>validating</secondary></indexterm>
<indexterm><primary>validation</primary>
  <secondary>parsers</secondary></indexterm>

A <firstterm>validating parser</firstterm> is a program that can read
the &DTD; and a particular document and determine whether the exact
nesting and order of elements in the document is valid according to
the &DTD;.
</para>
<para>
<indexterm><primary>text editors</primary>
  <secondary>unstructured, parsing and</secondary></indexterm>

If you are not using a structured editor that can enforce the markup
as you type, validation with an external parser is a particularly
important step in the document creation process.  You cannot expect
to get rational results from subsequent processing (such as document
publishing) if your documents are not valid.
</para>
<para>
<indexterm><primary>SP nsgmls parser</primary><see>nsgmls parser</see></indexterm>
The most popular free &SGML; parser is <acronym>SP</acronym> by James Clark,
available at <ulink url="http://www.jclark.com/">http://www.jclark.com/</ulink>.
</para>
<para>
<indexterm><primary>nsgmls parser</primary></indexterm>
<indexterm><primary>parsers</primary>
  <secondary>free</secondary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>parsers, free</secondary></indexterm>
<indexterm><primary>xp parser</primary></indexterm>

<acronym>SP</acronym> includes <command>nsgmls</command>, a fast command-line
parser. In the world of free validating &XML; parsers,
James
Clark's <command>xp</command> is a popular choice.
</para>
<note>
<para>
<indexterm><primary>parsers</primary>
  <secondary>non-validating</secondary></indexterm>

Not all &XML; parsers are validating, and although a
non-validating parser may have many uses, it cannot ensure that your
documents are valid according to the &DTD;.</para>
</note>
<sect1 id="ch03-validate"><title>Validating Your Documents</title>
<para>
The exact way in which the parser is executed varies according to
the parser in use, naturally.  For information about your particular
parser, consult the documentation that came with it.
</para>

<sect2><title>Using nsgmls</title>
<para>
<indexterm><primary>nsgmls parser</primary>
  <secondary>SGML documents, validating</secondary></indexterm>

The <command>nsgmls</command> command from <acronym>SP</acronym> is a
validating &SGML; parser.  The options used in the example below
suppress the normal output (<option>-s</option>), except for error messages,
print the version number (<option>-v</option>), and specify the catalog file
that should be used to map public identifiers to system
identifiers. Printing the version number guarantees that you always
get <emphasis>some</emphasis> output, so that you know the command ran
successfully:
</para>
<screen>
[n:\dbtdg] nsgmls -sv -c \share\sgml\catalog test.sgm
m:\jade\nsgmls.exe:I: SP version "1.3.2"
</screen>
<para>
<indexterm><primary>error messages</primary>
  <secondary>nsgmls parser</secondary></indexterm>
<indexterm><primary>options</primary>
  <secondary>error messages (parser), directing to file</secondary></indexterm>

Because no error messages were printed, we know our document is valid.
If you're working with a document that you discover has many errors,
the <option>-f</option> option offers a handy way to direct the errors to a file
so they don't all scroll off your screen.
</para>
<para>
<indexterm><primary>nsgmls parser</primary>
  <secondary>XML documents, validating</secondary></indexterm>
<indexterm><primary>declarations</primary>
  <secondary>nsgmls parser</secondary></indexterm>
<indexterm><primary>xml.dcl declaration (nsgmls parser)</primary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>nsgmls parser</secondary></indexterm>

If you want to validate an &XML; document with <acronym>SP</acronym>,
you must make sure that <acronym>SP</acronym> uses the correct
declaration.  An &XML; declaration called <filename>xml.dcl</filename> is
included with <acronym>SP</acronym>.
</para>

<para>
The easiest way to make sure that <acronym>SP</acronym> uses <filename>xml.dcl</filename> is to
include the declaration explicitly on the command line when you run
<command>nsgmls</command> (or Jade, or other <acronym>SP</acronym> tools):
</para>
<screen>
[n:\dbtdg] nsgmls -sv -c \share\sgml\catalog m:\jade\xml.dcl test.xml
m:\jade\nsgmls.exe:I: SP version "1.3.2"
</screen>
</sect2>

<sect2><title>Using xp</title>
<para>
<indexterm><primary>xp parser</primary></indexterm>
<indexterm><primary>Time program (xp parser)</primary></indexterm>

The <application>xp</application> distribution includes several sample programs.
One of these programs, <command>Time</command>, performs a validating parse
of the document and prints the amount of time required to parse the
&DTD; and the document.  This program makes an excellent validity
checker:
</para>
<screen>
java com.jclark.xml.apps.Time examples\simple.xml
6.639
</screen>
<para>
The result states that it took 6.639 seconds to parse the &DTD; and
the document.  This indicates that the document is valid.  If the
document is invalid, additional error messages are displayed.
</para>
</sect2>
</sect1>
<sect1 id="ch03-parseerr"><title>Understanding Parse Errors</title>
<para>
<indexterm id="errorparsech4" class="startofrange"><primary>errors</primary>
  <secondary>parsing</secondary></indexterm>

<indexterm><primary>parsing</primary>
  <secondary>errors</secondary></indexterm>
<indexterm><primary>error messages</primary>
  <secondary>parsers</secondary></indexterm>

Every parser produces slightly different error messages, but most
indicate exactly (at least technically)<footnote>
<para>
It is often the case that you can correct an error in the document in
several ways.  The parser suggests one possible fix, but this is not
always the right fix.  For example, the parser may suggest that you
can correct out of context data by adding another element, when in
fact it's &ldquo;obvious&rdquo; to human eyes that the problem is a
missing end tag.
</para>
</footnote> what is wrong and where the error occurred.  With a little
experience, this information is all you'll need to quickly identify
what's wrong.
</para>
<para>

<indexterm><primary>Jade</primary>
  <secondary>SP parser, using</secondary></indexterm>

In the rest of this section, we'll look at a number of common errors
and the messages they produce in <acronym>SP</acronym>.  We've
chosen <acronym>SP</acronym> for the rest of these examples because
that is the same parser used by Jade, which we'll be discussing
further in <xref linkend="ch-publish"/>.
</para>
<sect2><title>&DTD; Cannot Be Found</title>
<para>
<indexterm><primary>cannot be found errors</primary></indexterm>
<indexterm><primary>DTDs</primary>
  <secondary>cannot be found errors</secondary></indexterm>
<indexterm><primary>public identifiers</primary>
  <secondary>errors</secondary></indexterm>

The telltale sign that SP could not find the &DTD;, or some module of
the &DTD;, is the error message: "cannot generate system identifier
for public text &hellip;".  Generally, the errors that occur after
this are spurious; if SP couldn't find some part of the &DTD;,
it's likely to think that <emphasis>everything</emphasis> is wrong.
</para>
<para>
Careful examination of the following document will show that we've
introduced a simple typographic error into the public identifier (the
word <quote>DocBook</quote> is misspelled with a lowercase <quote>b</quote>):
</para>
<programlisting>
<inlinegraphic format="linespecific" fileref="examples/errs/nodtd.sgm"/>
</programlisting>
<para>
SP responds dramatically to this error:
</para>
<screen>
hermes:/documents/books/tdg/examples/errs$ nsgmls -sv -c cat1 /usr/lib/sgml/declaration/xml.dcl nodtd.sgm
nsgmls:I: SP version "1.3.4"
nsgmls:nodtd.sgm:2:76:E: could not resolve host "www.oasis-open.org" (try again later)
nsgmls:nodtd.sgm:2:76:E: DTD did not contain element declaration for document type name
nsgmls:nodtd.sgm:3:8:E: element "chapter" undefined
nsgmls:nodtd.sgm:3:15:E: element "title" undefined
nsgmls:nodtd.sgm:4:5:E: element "para" undefined
nsgmls:nodtd.sgm:10:5:E: element "para" undefined
nsgmls:nodtd.sgm:11:15:E: there is no attribute "role"
nsgmls:nodtd.sgm:11:21:E: element "emphasis" undefined
nsgmls:nodtd.sgm:12:9:E: element "emphasis" undefined
nsgmls:nodtd.sgm:12:24:E: element "emphasis" undefined
nsgmls:nodtd.sgm:13:18:E: element "superscript" undefined
nsgmls:nodtd.sgm:14:16:E: element "subscript" undefined
nsgmls:nodtd.sgm:16:5:E: element "para" undefined
</screen>
<para>
<indexterm><primary>catalog files</primary>
  <secondary>errors</secondary></indexterm>

Other things to look for, if you haven't misspelled the public
identifier, are typos in the catalog or failure to specify a catalog
that resolves the public identifier that can't be found.
</para>
</sect2>
<sect2><title><acronym>ISO</acronym> Entity Set Missing</title>
<para>

<indexterm><primary>entity sets</primary>
  <secondary>missing</secondary></indexterm>

A missing entity set is another example of either a misspelled public
identifier, or a missing catalog or catalog entry.
</para>
<para>
In this case, there's nothing wrong with the document, but the catalog
that's been specified is missing the public identifiers for the
<acronym>ISO</acronym> entity sets:
</para>
<screen>
[n:\dbtdg]nsgmls -sv -c examples\errs\cat2 examples\simple.sgm
m:\jade\nsgmls.exe:I: SP version "1.3.2"
m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:53:65:W: cannot generate system identifier for public text "ISO 8879:1986//ENTITIES Added Math Symbols:Arrow Relations//EN"
m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:54:8:E: reference to entity "ISOamsa" for which no system identifier could be generated
m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:52:0: entity was defined here
m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:60:66:W: cannot generate system identifier for public text "ISO 8879:1986//ENTITIES Added Math Symbols:Binary Operators//EN"
m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:61:8:E: reference to entity "ISOamsb" for which no system identifier could be generated
m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:59:0: entity was defined here
m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:67:60:W: cannot generate system identifier for public text "ISO 8879:1986//ENTITIES Added Math Symbols:Delimiters//EN"
m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:68:8:E: reference to entity "ISOamsc" for which no system identifier could be generated
m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:66:0: entity was defined here
m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:74:67:W: cannot generate system identifier for public text "ISO 8879:1986//ENTITIES Added Math Symbols:Negated Relations//EN"
...
</screen>
<para>
<indexterm><primary>entity sets</primary>
  <secondary>locating</secondary></indexterm>

The <acronym>ISO</acronym> entity sets are required by the DocBook
&DTD;, but they are not distributed with it.  That's because they
aren't maintained by <acronym>OASIS</acronym>.<footnote>
<para>
If you need to locate the entity sets, consult <ulink url="http://www.oasis-open.org/cover/topics.html#entities">http://www.oasis-open.org/cover/topics.html#entities</ulink>.
</para>
</footnote>
</para>
</sect2>
<sect2><title>Character Data Not Allowed Here</title>
<para>
<indexterm><primary>error messages</primary>
  <secondary>character data out of context</secondary></indexterm>
<indexterm><primary>characters</primary>
  <secondary>errors (out of context)</secondary></indexterm>
<indexterm><primary>start tags</primary>
  <secondary>errors</secondary></indexterm>

Out of context character data is frequently caused by a missing start
tag, but sometimes it's just the result of typing in the wrong place!
</para>
<programlisting>
<inlinegraphic format="linespecific" fileref="examples/errs/badpcdata.sgm"/>
</programlisting>
<screen>
[n:\dbtdg] nsgmls -sv -c \share\sgml\catalog examples\errs\badpcdata.sgm
m:\jade\nsgmls.exe:I: SP version "1.3.2"
m:\jade\nsgmls.exe:examples\errs\badpcdata.sgm:9:0:E: character data is not allowed here
</screen>
<para>
<indexterm><primary>Chapter element</primary>
  <secondary>errors, character data</secondary></indexterm>

<sgmltag>Chapter</sgmltag>s aren't allowed to contain character data
directly. Here, a wrapper element, such as <sgmltag>Para</sgmltag>, is
missing around the sentence between the first two paragraphs.
</para>
</sect2>
<sect2><title>Misspelled Start Tag</title>
<para>
<indexterm><primary>start tags</primary>
  <secondary>errors</secondary>
    <tertiary>misspelling</tertiary></indexterm>

If you spell it wrong, the parser gets confused.
</para>
<programlisting>
<inlinegraphic format="linespecific" fileref="examples/errs/misspell.sgm"/>
</programlisting>
<screen>
[n:\documents\books\dbtdg]nsgmls -sv -c \share\sgml\catalog examples\errs\misspe
ll.sgm
m:\jade\nsgmls.exe:I: SP version "1.3.2"
m:\jade\nsgmls.exe:examples\errs\misspell.sgm:9:5:E: element "PAAR" undefined
m:\jade\nsgmls.exe:examples\errs\misspell.sgm:14:6:E: end tag for element "PARA" which is not open
m:\jade\nsgmls.exe:examples\errs\misspell.sgm:21:9:E: end tag for "PAAR" omitted, but OMITTAG NO was specified
m:\jade\nsgmls.exe:examples\errs\misspell.sgm:9:0: start tag was here
</screen>
<para>
Luckily, these are pretty easy to spot, unless you accidentally spell
the name of another element.  In that case, your error might appear to
be out of context.
</para>
</sect2>
<sect2><title>Misspelled End Tag</title>
<para>
<indexterm><primary>end tags</primary>
  <secondary>errors, misspelling</secondary></indexterm>

Spelling the end tag wrong is just as confusing.
</para>
<programlisting>
<inlinegraphic format="linespecific" fileref="examples/errs/misspell2.sgm"/>
</programlisting>
<screen>
[n:\dbtdg]nsgmls -sv -c \share\sgml\catalog examples\errs\misspell2.sgm
m:\jade\nsgmls.exe:I: SP version "1.3.2"
m:\jade\nsgmls.exe:examples\errs\misspell2.sgm:2:35:E: end tag for element "TITEL" which is not open
m:\jade\nsgmls.exe:examples\errs\misspell2.sgm:3:5:E: document type does not allow element "PARA" here; missing one of "FOOTNOTE", "MSGTEXT" start-tag
m:\jade\nsgmls.exe:examples\errs\misspell2.sgm:9:5:E: document type does not allow element "PARA" here; missing one of "FOOTNOTE", "MSGTEXT" start-tag
m:\jade\nsgmls.exe:examples\errs\misspell2.sgm:15:5:E: document type does not allow element "PARA" here; missing one of "FOOTNOTE", "MSGTEXT" start-tag
m:\jade\nsgmls.exe:examples\errs\misspell2.sgm:21:9:E: end tag for "TITLE" omitted, but OMITTAG NO was specified
m:\jade\nsgmls.exe:examples\errs\misspell2.sgm:2:9: start tag was here
m:\jade\nsgmls.exe:examples\errs\misspell2.sgm:21:9:E: end tag for "CHAPTER" which is not finished
</screen>
<para>
These are pretty easy to spot as well, but look at how confused the
parser became.  From the parser's point of view, failure to close the
open <sgmltag>Title</sgmltag> element means that all the following elements
appear out of context.
</para>
</sect2>
<sect2><title>Out of Context Start Tag</title>
<para>
<indexterm><primary>start tags</primary>
  <secondary>errors</secondary>
    <tertiary>out of context</tertiary></indexterm>
<indexterm><primary>tags</primary>
  <secondary>context errors</secondary></indexterm>

Sometimes the problem isn't spelling, but placing a tag in the wrong
context.  When this happens, the parser tries to figure out what it
can add to your document to make it valid.  Then it proceeds as if it
had seen what was added in order to recover from the error seen, which
can cause future errors.
</para>
<programlisting>
<inlinegraphic format="linespecific" fileref="examples/errs/badstarttag.sgm"/>
</programlisting>
<screen>
[n:\dbtdg]nsgmls -sv -c \share\sgml\catalog examples\errs\badstarttag.sgm
m:\jade\nsgmls.exe:I: SP version "1.3.2"
m:\jade\nsgmls.exe:examples\errs\badstarttag.sgm:9:12:E: document type does not allow element "TITLE" here; missing one of "CALLOUTLIST", "SEGMENTEDLIST", "VARIABLELIST", "CAUTION", "IMPORTANT", "NOTE", "TIP", "WARNING", "BLOCKQUOTE", "EQUATION", "EXAMPLE", "FIGURE", "TABLE" start-tag
</screen>
<para>
<indexterm><primary>titles</primary>
  <secondary>formal elements</secondary>
    <tertiary>errors</tertiary></indexterm>
<indexterm><primary>paragraphs</primary>
  <secondary>titles</secondary></indexterm>

In this example, we probably wanted a <sgmltag>FormalPara</sgmltag>, so that
we could have a title on the paragraph.  But note that the parser
didn't suggest this alternative.  The parser only tries to add
additional elements, rather than rename elements that it's already
seen.
</para>
</sect2>
<sect2><title>Missing End Tag</title>
<para>
<indexterm><primary>end tags</primary>
  <secondary>missing, errors</secondary></indexterm>

Leaving out an end tag is a lot like an out of context start tag.  In
fact, they're really the same error.  The problem is never caused by
the missing end tag per se, rather it's caused by the fact that
something following it is now out of context.
</para>
<programlisting>
<inlinegraphic format="linespecific" fileref="examples/errs/noendtag.sgm"/>
</programlisting>
<screen>
[n:\dbtdg]nsgmls -sv -c \share\sgml\catalog examples\errs\noendtag.sgm
m:\jade\nsgmls.exe:I: SP version "1.3.2"
m:\jade\nsgmls.exe:examples\errs\noendtag.sgm:14:5:E: document type does not allow element "PARA" here; missing one of "FOOTNOTE", "MSGTEXT", "CAUTION", "IMPORTANT", "NOTE", "TIP", "WARNING", "BLOCKQUOTE", "INFORMALEXAMPLE" start-tag
m:\jade\nsgmls.exe:examples\errs\noendtag.sgm:20:9:E: end tag for "PARA" omitted, but OMITTAG NO was specified
m:\jade\nsgmls.exe:examples\errs\noendtag.sgm:9:0: start tag was here
</screen>
<para>
In this case, the parser figured out that the best thing it could do
is end the paragraph.
</para>
</sect2>
<sect2><title>Bad Entity Reference</title>
<para>
<indexterm><primary>entities</primary>
  <secondary>errors, spelling</secondary></indexterm>

If you spell an entity name wrong, the parser will catch it.
</para>
<programlisting>
<inlinegraphic format="linespecific" fileref="examples/errs/badent.sgm"/>
</programlisting>
<screen>
[n:\dbtdg]nsgmls -sv -c \share\sgml\catalog examples\errs\badent.sgm
m:\jade\nsgmls.exe:I: SP version "1.3.2"
m:\jade\nsgmls.exe:examples\errs\badent.sgm:10:26:E: general entity "xyzzy" not defined and no default entity
</screen>
<para>
More often than not, you'll see this when you misspell a character
entity name.  For example, this happens when you type
<literal>&amp;ldqou;</literal> instead of
<literal>&amp;ldquo;</literal>.
</para>
</sect2>
<sect2><title>Invalid 8-Bit Character</title>
<para>
<indexterm><primary>characters</primary>
  <secondary>character sets</secondary>
    <tertiary>Unicode character set (SGML errors)</tertiary></indexterm>
<indexterm><primary>8-bit characters, errors (SGML)</primary></indexterm>
<indexterm><primary>errors</primary>
  <secondary>8-bit characters (SGML)</secondary></indexterm>

In &XML;, the entire range of Unicode characters is available to you,
but in &SGML;, the declaration indicates what characters are valid.
The distributed DocBook declaration doesn't allow a bunch of fairly
common 8-bit characters.
</para>
<programlisting>
<inlinegraphic format="linespecific" fileref="examples/errs/badchar.sgm"/>
</programlisting>
<screen>
[n:\dbtdg]nsgmls -sv -c \share\sgml\catalog examples\errs\badchar.sgm
m:\jade\nsgmls.exe:I: SP version "1.3.2"
m:\jade\nsgmls.exe:examples\errs\badchar.sgm:11:0:E: non SGML character number 147
m:\jade\nsgmls.exe:examples\errs\badchar.sgm:11:5:E: non SGML character number 148
</screen>
<para>
<indexterm><primary>declarations</primary>
  <secondary>character sets, errors</secondary></indexterm>
<indexterm><primary>entities</primary>
  <secondary>characters</secondary>
    <tertiary>errors</tertiary></indexterm>

In this example, the Windows code page values for
curly left and right quotes have been used, but they aren't in the
declared character set.  Fix this by converting them to character
entities.
</para>
<para>
<indexterm><primary>interchange partners</primary></indexterm>

You can also fix them by changing the declaration, but if you do that,
make sure all your interchange partners are aware of, and have a copy of,
the modified declaration. See <xref linkend="app-interchange"/>.
<indexterm startref="errorparsech4" class="endofrange"/>
<indexterm startref="parsDocch4" class="endofrange"/>
<indexterm startref="docDTDparsch4" class="endofrange"/>
</para>
</sect2>
</sect1>

<sect1 id="ch03-otherschema"><title>Considering Other Schema Languages</title>

<para>Historically, &DTD;s were the only way to describe the valid
stricture of SGML and XML documents, but that is no longer the case.
At the time of this writing (January, 2001), DocBook is experimentally
available in three other schema languages:</para>

<variablelist>
<varlistentry>
<term><ulink url="http://www.w3.org/XML/Schema">XML Schema</ulink></term>
<listitem>
<para>The schema language being defined by the
<ulink url="http://www.w3.org/">W3C</ulink> as the successor to &DTD;s
for describing the structure of &XML;. XML Schema are likely to become
a <ulink url="http://www.w3.org/">W3C</ulink> Recommendation in 2001.
</para></listitem>
</varlistentry>
<varlistentry>
<term><ulink url="http://www.xml.gr.jp/relax/">RELAX</ulink></term>
<listitem>
<para>RELAX, the Regular Language description for XML) is a less
complex alternative to XML Schemas. The RELAX Core module is defined by
ISO in <citetitle>ISO/IEC DTR 22250-1, Document Description and
Processing Languages -- Regular Language Description for XML (RELAX)
-- Part 1: RELAX Core, 2000</citetitle>. The RELAX Namespaces module
is currently under development.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><ulink url="http://www.thaiopensource.com/trex/">TREX</ulink></term>
<listitem>
<para>TREX, Tree Regular Expressions for XML, is another less complex
alternative to XML Schemas. It is concise, powerful, and datatype
neutral.</para>
</listitem>
</varlistentry>
</variablelist>

<sect2><title>Parsing and Validation</title>

<para>Before we look closer at these new schema languages, there's one
significant difference between &DTD;s and all of them that we should
get out of the way: &XML; parsers (which may understand &DTD;s) build an
&XML; information set out of a stream of characters, all of these other
schema languages begin with an information set and perform validation
on it.</para>

<para>What I mean by that is that an &XML; parser reads a stream of
bytes:

<screen>"&lt;" "?" "x" "m" "l" " " "v" "e" ...
"&lt;" "!" "D" "O" "C" "T" "Y" "P" "E" " " "b" "o" "o" "k" ...
"&lt;" "b" "o" "o" "k" " " "i" "d" "=" "'" "f" "o" "o" "'" ">"
...
"&lt;" "/" "b" "o" "o" "k" ">"</screen>

interprets them as a stream of characters (which may change the
interpretation of some sequences of bytes) and constructs some
representation of the &XML; document. This representation is the set
of all the &XML; information items encountered: the information
set of the document. The <ulink url="http://www.w3.org/">W3C</ulink>
<ulink url="http://www.w3.org/XML/">XML Core Working Group</ulink>
is in the process of defining what an
<ulink url="http://www.w3.org/TR/xml-infoset">&XML; Information Set</ulink>
contains.</para>

<para>The other schema languages are defined not in terms of the sequence
of characters in the file but in terms of the information set of the
&XML; document. They have to work this way because the
<ulink url="http://www.w3.org/TR/REC-xml">&XML; Recommendation</ulink>
says what an &XML; document is and they all want to work on top of
&XML;.</para>

<para>So what, you might ask? Well, it turns out that this has at least
one very significant implication: there's no way for these languages to
provide support for entity declarations.</para>

<para>An entity, like <quote><literal>&amp;ora;</literal></quote>
as a shortcut for <quote>O'Reilly &amp; Associates</quote> or
<quote><literal>&amp;eacute;</literal></quote> as a mnemonic for
<quote>&eacute;</quote>, is a feature of the character stream seen by
the &XML; parser, it doesn't exist in the information set of valid
&XML; documents. More importantly, this means that even if the schema
language had a syntax for declaring entities, it wouldn't help the &XML;
parser that needs to know the definitions long before the schema language
processor comes into play.</para>

<para>There are a couple of other &XML; features that are impacted,
though not necessarily as significantly: notations and default
attribute values.  One use for notations is on external entity
declarations, and as we've already seen, the schema language is too
late to be useful for anything entity related. Default attribute values
are also problematic since you would like them to be in the information
set produced by the parser so that the schema language sees them.</para>

</sect2>

<sect2><title>A Coarse Comparison of Three &XML; Schema Languages</title>

<para>FIXME: write a short synopsis of how these languages compare.</para>

</sect2>

</sect1>
</chapter>

<!--
Local Variables:
mode:sgml
sgml-parent-document: ("book.sgm" "chapter")
End:
-->
<chapter id="ch-publish">
<?dbhtml filename="ch04.html"?>
<chapterinfo>
<pubdate>$Date: 2005-11-13 00:36:21 +0300 (Вс, 13 ноя 2005) $</pubdate>
<releaseinfo>$Revision: 5449 $</releaseinfo>
</chapterinfo>
<title>Publishing DocBook Documents</title>
<para>
<indexterm id="publishDocBookch04" class="startofrange"><primary>DocBook DTD</primary>
  <secondary>publishing documents</secondary></indexterm>
<indexterm id="DocBookpublishch04" class="startofrange"><primary>publishing DocBook documents</primary></indexterm>
<indexterm><primary>stylesheets</primary>
  <secondary>publishing SGML/XML documents</secondary></indexterm>
<indexterm><primary>HTML</primary>
  <secondary>translating SGML/XML documents</secondary></indexterm>

Creating and editing &SGML;/&XML; documents is usually only half the
battle. After you've composed your document, you'll want to publish
it. Publishing, for our purposes, means either print or web
publishing. For &SGML; and &XML; documents, this is usually
accomplished with some kind of <glossterm>stylesheet</glossterm>.  In
some environments, it is now possible to publish an &XML;
document on the Web simply by putting it online with a stylesheet.
</para>
<para>
<indexterm><primary>Jade</primary>
  <secondary>Modular DocBook Stylesheets</secondary></indexterm>
<indexterm><primary>Modular DocBook Stylesheets</primary></indexterm>
<indexterm><primary>Linux Documentation Project</primary></indexterm>

There are many ways, using both free and commercial tools, to publish
&SGML; documents. In this chapter, we're going to survey a number of
possibilities, and then look at just one solution in detail: <ulink url="http://www.jclark.com/jade/">Jade</ulink> and the <ulink url="http://nwalsh.com/docbook/dsssl/">Modular DocBook
Stylesheets.</ulink> We used jade to produce this
book and to produce the online versions on the
<acronym>CD-ROM</acronym>; it is also being deployed in other projects
such as <ulink url="http://www.sgmltools.org/"><literal>&lt;SGML&gt;&amp;tools;</literal>,</ulink>
which originated with the Linux Documentation Project.
</para>
<para>
For a brief survey of other tools, see <xref linkend="app-resources"/>.
</para>

<section><title>The MIME Type for DocBook</title>
<para>When published on the web, documents must be identified with a MIME type.
The MIME type for SGML DocBook documents published directly on the web
is “<literal>application/sgml</literal>”.
The most appropriate MIME type for XML DocBook documents published directly on
the web is currently
“<literal>application/xml</literal>”, however the DocBook Technical Committee
may choose to register a more specific MIME type in the future.</para>
</section>

<section><title>A Survey of Stylesheet Languages</title>
<para>
<indexterm><primary>stylesheets</primary>
  <secondary>languages</secondary></indexterm>
<indexterm><primary>languages</primary>
  <secondary>stylesheets</secondary></indexterm>

Over the years, a number of attempts have been made to produce a
standard stylesheet language and, failing that, a large number of
proprietary languages have been developed.
</para>
<variablelist>
<varlistentry><term>FOSIs</term>
<listitem>
<para>
<indexterm><primary>FOSI stylesheets</primary></indexterm>
<indexterm><primary>Formatting Output Specification Instance</primary><see>FOSI stylesheets</see></indexterm>
<indexterm><primary>U.S. Department of Defense stylesheet standard</primary></indexterm>

First, the U.S. Department of Defense, in an attempt to
standardize stylesheets across military branches, created the
<citetitle>Output Specification</citetitle>, which is defined in
<acronym>MIL-PRF-28001C</acronym>, <citetitle>Markup Requirements and
Generic Style Specification for Electronic Printed Output and Exchange
of Text</citetitle>.<footnote>
<para>
See <citetitle><ulink url="http://www-cals.itsi.disa.mil/core/formal/fps.htm">Formally
Published CALS Standards</ulink></citetitle> for more information.
</para>
</footnote>
</para>
<para>
<indexterm><primary>ADEPT Publisher (Arbortext), FOSIs support</primary></indexterm>
<indexterm><primary>Arbortext ADEPT Publisher, FOSIs support</primary></indexterm>

Commonly called FOSIs (for Formatting Output Specification Instances),
they are supported by a few products including ADEPT Publisher by
<ulink url="http://www.arbortext.com/">Arbortext</ulink> and DL
Composer by <ulink url="http://www.datalogics.com/">Datalogics</ulink>.
</para>
</listitem>
</varlistentry>
<varlistentry><term>DSSSL</term>
<listitem>
<para>
<indexterm><primary>DSSSL</primary></indexterm>
<indexterm><primary>Document Style Semantics and Specification Language</primary><see>DSSSL</see></indexterm>
<indexterm><primary>ISO standards</primary>
  <secondary>DSSSL</secondary></indexterm>
<indexterm><primary>International Organization for Standardization</primary><see>ISO Entity Sets; ISO standards</see></indexterm>

Next, the International Organization for Standardization
(<acronym>ISO</acronym>) created <acronym>DSSSL</acronym>, the
Document Style Semantics and Specification Language. Subsets of
<acronym>DSSSL</acronym> are supported by Jade and a few other tools,
but it never achieved widespread support.
</para>
</listitem>
</varlistentry>
<varlistentry><term>CSS</term>
<listitem>
<para>
<indexterm><primary>CSS</primary></indexterm>
<indexterm><primary>HTML</primary>
  <secondary>CSS</secondary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>CSS</secondary></indexterm>

The <acronym>W3C</acronym> CSS Working Group created
<acronym>CSS</acronym> as a style attachment language for &HTML;, and,
more recently, &XML;.
</para>
</listitem>
</varlistentry>
<varlistentry><term>XSL</term>
<listitem>
<para>
<indexterm><primary>XSL</primary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>XSL</secondary></indexterm>
<indexterm><primary>Extensible Style Language</primary><see>XSL</see></indexterm>
Most recently, the &XML; effort has identified a standard Extensible Style
Language (<acronym>XSL</acronym>) as a requirement. The
<acronym>W3C</acronym> <acronym>XSL</acronym> Working Group is
currently pursuing that effort.
</para>
</listitem>
</varlistentry>
</variablelist>
<section><title>Stylesheet Examples</title>
<para>
<indexterm id="stylsheetsch04" class="startofrange"><primary>stylesheets</primary>
  <secondary>examples</secondary></indexterm>



By way of comparison, here's an example of each of the standard style
languages. In each case, the stylesheet fragment shown contains the
rules that reasonably formatted the following paragraph:
</para>
<screen>
<![CDATA[<para>
This is an example paragraph. It should be presented in a
reasonable body font. <emphasis>Emphasized</emphasis> words
should be printed in italics. A single level of 
<emphasis>Nested <emphasis>emphasis</emphasis> should also
be supported.</emphasis>
</para>
]]></screen>
<section>
<title><acronym>FOSI</acronym> stylesheet</title>
<para>
<indexterm><primary>FOSI stylesheets</primary>
  <secondary>example</secondary></indexterm>
<indexterm><primary>SGML</primary>
  <secondary>FOSIs</secondary></indexterm>
<indexterm><primary>e-i-c element</primary></indexterm>
<indexterm><primary>element in context (e-i-c)</primary></indexterm>

<acronym>FOSI</acronym>s are &SGML; documents. The element in the
<acronym>FOSI</acronym> that controls the presentation of specific
elements is the <sgmltag>e-i-c</sgmltag> (element in context) element.
A sample <acronym>FOSI</acronym> fragment is shown in <xref linkend="ex-fosi"/>.
</para>
<example id="ex-fosi">
<title>A Fragment of a <acronym>FOSI</acronym> Stylesheet</title>
<programlisting><inlinegraphic format='linespecific' fileref="examples/style-fosi.txt"/></programlisting>
</example>
</section>
<section><title><acronym>DSSSL</acronym> stylesheet</title>
<para>
<indexterm><primary>DSSSL</primary>
  <secondary>stylesheets</secondary>
    <tertiary>example</tertiary></indexterm>
<indexterm><primary>Scheme language</primary>
  <secondary>DSSSL stylesheets</secondary></indexterm>

<acronym>DSSSL</acronym> stylesheets are written in a Scheme-like
language (see <xref linkend="scheme"/> later in this chapter). It is the
<function>element</function> function that controls the presentation of
individual elements. See the example in <xref linkend="ex-dsssl"/>.
</para>
<example id="ex-dsssl">
<title>A Fragment of a <acronym>DSSSL</acronym> Stylesheet</title>
<programlisting><inlinegraphic format='linespecific' fileref="examples/style-dsssl.txt"/></programlisting>
</example>
</section>
<section><title><acronym>CSS</acronym> stylesheet</title>
<para>
<indexterm><primary>CSS stylesheets</primary>
  <secondary>example</secondary></indexterm>

<acronym>CSS</acronym> stylesheets consist of selectors and formatting
properties, as shown in <xref linkend="ex-css"/>.
</para>
<example id="ex-css">
<title>A Fragment of a <acronym>CSS</acronym> Stylesheet</title>
<programlisting><inlinegraphic format='linespecific' fileref="examples/style-css.txt"/></programlisting>
</example>
</section>
<section><title><acronym>XSL</acronym> stylesheet</title>
<para>
<indexterm><primary>XSL stylesheets</primary>
  <secondary>example</secondary></indexterm>

<acronym>XSL</acronym> stylesheets are &XML; documents, as shown in
<xref linkend="ex-xsl"/>. The element in the <acronym>XSL</acronym>
stylesheet that controls the presentation of specific elements is the
<sgmltag>xsl:template</sgmltag> element.
</para>
<example id="ex-xsl">
<title>A Fragment of an <acronym>XSL</acronym> Stylesheet</title>
<programlisting><inlinegraphic format='linespecific' fileref="examples/style-xsl.txt"/></programlisting>
</example>
</section>
</section>
</section>
<section id="jade"><title>Using Jade and <acronym>DSSSL</acronym> to Publish DocBook Documents</title>
<para>
<indexterm><primary>Jade</primary>
  <secondary>DSSSL, using (DocBook document)</secondary></indexterm>
<indexterm><primary>SGML</primary>
  <secondary>DSSSL stylesheets</secondary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>DSSSL stylesheets</secondary></indexterm>
<indexterm><primary>DSSSL</primary>
  <secondary>stylesheets</secondary>
    <tertiary>print and HTML output (DocBook)</tertiary></indexterm>
<indexterm><primary>HTML</primary>
  <secondary>DSSSL stylesheets</secondary></indexterm>

Jade is a free tool that applies <ulink url="http://www.jclark.com/dsssl/"> <acronym>DSSSL</acronym></ulink>
stylesheets to &SGML; and &XML; documents. As distributed, Jade can
output <acronym>RTF</acronym>, &TeX;, <acronym>MIF</acronym>, and
&SGML;. The &SGML; backend can be used for &SGML; to &SGML;
transformations (for example, DocBook to &HTML;).
</para>
<para>
A complete set of <acronym>DSSSL</acronym> stylesheets for creating
print and &HTML; output from DocBook is included on the
<acronym>CD-ROM</acronym>.  More information about obtaining and
installing Jade appears in <xref linkend="app-install"/>.
<indexterm startref="stylsheetsch04" class="endofrange"/>
</para>
</section>
<section id="dsssl"><title>A Brief Introduction to <acronym>DSSSL</acronym></title>
<para>
<acronym>DSSSL</acronym> is a stylesheet language for both print and
online rendering.  The acronym stands for <citetitle>Document Style
Semantics and Specification Language</citetitle>. It is defined by
<acronym>ISO</acronym>/<acronym>IEC</acronym> 10179:1996. For more
general information about <acronym>DSSSL</acronym>, see <ulink url="http://www.jclark.com/dsssl/">the <acronym>DSSSL</acronym>
Page</ulink>.
</para>
<section id="scheme"><title>Scheme</title>
<para>
<indexterm><primary>Scheme language</primary>
  <secondary>syntax</secondary></indexterm>
<indexterm><primary>LISP language, syntax</primary></indexterm>
<indexterm><primary>syntax</primary>
  <secondary>LISP language</secondary></indexterm>

The <acronym>DSSSL</acronym> expression language is Scheme, a variant
of Lisp. Lisp is a functional programming language with a remarkably
regular syntax. Every expression looks like this:
<screen>
(<replaceable>operator</replaceable> <optional>arg1</optional> <optional>arg2</optional> ... <optional>arg<replaceable>n</replaceable></optional> )
</screen>
<indexterm><primary>syntax</primary>
  <secondary>Scheme language</secondary></indexterm>
This is called <quote>prefix</quote> syntax because the operator comes
before its arguments.</para> <para>In Scheme, the expression that
subtracts 2 from 3, is <literal>(- 3 2)</literal>. And <literal>(+ (-
3 2) (* 2 4))</literal> is 9. While the prefix syntax and the
parentheses may take a bit of getting used to, Scheme is not hard to
learn, in part because there are no exceptions to the syntax.
</para>
</section>
<section><title><acronym>DSSSL</acronym> Stylesheets</title>
<para>
<indexterm><primary>DSSSL</primary>
  <secondary>stylesheets</secondary></indexterm>
<indexterm><primary>formatting</primary>
  <secondary>DSSSL stylesheets, elements</secondary></indexterm>

A complete <acronym>DSSSL</acronym> stylesheet is shown in <xref linkend="dsssl.stylesheet"/>.  After only a brief examination of the
stylesheet, you'll probably begin to have a feel for how it works. For
each element in the document, there is an element rule that describes
how you should format that element. The goal of the rest of this
chapter is to make it possible for you to read, understand, and even
write stylesheets at this level of complexity.
</para>
<example id="dsssl.stylesheet">
<title>A Complete <acronym>DSSSL</acronym> Stylesheet</title>
<programlisting><inlinegraphic format='linespecific' fileref="examples/simple.dsl"/></programlisting>
</example>
<para>
<indexterm><primary>DocBook DTD</primary>
  <secondary>documents</secondary>
    <tertiary>DSSSL stylesheets</tertiary></indexterm>

This stylesheet is capable of formatting simple DocBook documents like
the one shown in <xref linkend="simple.document"/>.
</para>
<example id="simple.document">
<title>A Simple DocBook Document</title>
<programlisting><inlinegraphic format='linespecific' fileref="examples/simple.sgm"/></programlisting>
</example>
<para>
The result of formatting a simple document with this stylesheet can be
seen in <xref linkend="simple.document.formatted"/>.
</para>
<figure id="simple.document.formatted">
<title>The formatted simple document</title>
<graphic fileref="figures/simple-page.png"></graphic>
</figure>
<para>
We'll take a closer look at this stylesheet after you've learned a
little more <acronym>DSSSL</acronym>.
</para>
</section>
<section><title><acronym>DSSSL</acronym> Stylesheets Are &SGML; Documents</title>
<para>
<indexterm><primary>SGML</primary>
  <secondary>DSSSL stylesheets</secondary></indexterm>
<indexterm><primary>entities</primary>
  <secondary>DSSSL stylesheets</secondary></indexterm>
<indexterm><primary>marked sections</primary>
  <secondary>DSSSL stylesheets</secondary></indexterm>

One of the first things that may strike you about
<acronym>DSSSL</acronym> stylesheets (aside from all the parentheses),
is the fact that the stylesheet itself is an &SGML; document! This
means that you have all the power of &SGML; documents at your disposal
in <acronym>DSSSL</acronym> stylesheets. In particular, you can use
entities and marked sections to build a modular stylesheet.
</para>
<para>
<indexterm><primary>architecture</primary>
  <secondary>DSSSL</secondary></indexterm>
<indexterm><primary>DTDs</primary>
  <secondary>DSSSL stylesheets, changing</secondary></indexterm>

In fact, <acronym>DSSSL</acronym> stylesheets are defined so that they
correspond to a particular <glossterm>architecture</glossterm>. This
means that you can change the &DTD; used by stylesheets within the
bounds of the architecture. A complete discussion of document
architectures is beyond the scope of this book, but we'll show you one
way to take advantage of them in your <acronym>DSSSL</acronym>
stylesheets in <xref linkend="dsssl.arch"/> later in the
chapter.
</para>
</section>
<section><title><acronym>DSSSL</acronym> Processing Model</title>
<para>
<indexterm><primary>processing model (DSSSL)</primary></indexterm>
<indexterm><primary>trees (DSSSL)</primary></indexterm>
<indexterm><primary>nodes (DSSSL)</primary></indexterm>

A <acronym>DSSSL</acronym> processor builds a tree out of the source
document. Each element in the source document becomes a node in the
tree (processing instructions and other constructs become nodes as
well). Processing the source tree begins with the root rule and
continues until there are no more nodes to process.
</para>
</section>
<section><title>Global Variables and Side Effects</title>
<para>
<indexterm><primary>variables (DSSSL)</primary>
  <secondary>global</secondary></indexterm>
<indexterm><primary>side effects (DSSSL)</primary></indexterm>

There aren't any global variables or side effects. It can be difficult
to come to grips with this, especially if you're just starting out.
</para>
<para>
<indexterm><primary>functions</primary>
  <secondary>DSSSL</secondary></indexterm>
<indexterm><primary>constants (DSSSL)</primary></indexterm>

It is possible to <link linkend="dsssl.expr.define">define constants
and functions</link> and to create local variables with <link linkend="dsssl.expr.let"> <literal>let</literal> expressions</link>,
but you can't create any global variables or change anything after
you've defined it.
</para>
</section>
<section><title><acronym>DSSSL</acronym> Expressions</title>
<para>
<indexterm><primary>expressions (DSSSL)</primary></indexterm>

<acronym>DSSSL</acronym> has a rich vocabulary of expressions for
dealing with all of the intricacies of formatting. Many, but by no
means all of them, are supported by Jade. In this introduction, we'll
cover only a few of the most common.
</para>
<section id="dsssl.expr.element"><title>Element expressions</title>
<para>
<indexterm><primary>DSSSL</primary>
  <secondary>stylesheets</secondary>
    <tertiary>element expressions</tertiary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>element expressions (DSSSL)</secondary></indexterm>
<indexterm><primary>paragraphs</primary>
  <secondary>DSSSL stylesheets, formattting</secondary></indexterm>

Element expressions, which define the rules for formatting particular
elements, make up the bulk of most <acronym>DSSSL</acronym>
stylesheets. A simple element rule can be seen in <xref linkend="ex.d.simple"/>. This rule says that a <sgmltag> para</sgmltag>
element should be formatted by making a paragraph (see <xref linkend="dsssl.expr.make"/>).
</para>
<example id="ex.d.simple">
<title>A Simple <acronym>DSSSL</acronym> Rule</title>
<screen>
(element para
  (make paragraph
    space-before: 8pt
    (process-children)))</screen>
</example>
<para>
<indexterm><primary>ancestors (elements), DSSSL</primary></indexterm>

An element expression can be made more specific by specifying an
element and its ancestors instead of just specifying an element. The
rule <literal>(element title ...)</literal> applies to all
<sgmltag>Title</sgmltag> elements, but a rule that begins
<literal>(element (figure title) ...)</literal> applies only to
<sgmltag>Title</sgmltag> elements that are immediate children of
<sgmltag>Figure</sgmltag> elements.
</para>
<para>
If several rules apply, the most specific rule is used.
</para>
<para>
When a rule is used, the node in the source tree that was matched
becomes the <quote>current node</quote> while that element expression
is being processed.
</para>
</section>
<section id="dsssl.expr.make"><title>Make expressions</title>
<para>
<indexterm><primary>flow objects (DSSSL)</primary></indexterm>
<indexterm><primary>content</primary>
  <secondary>flow objects (DSSSL)</secondary></indexterm>

A make expression specifies the characteristics of a <quote>flow
object.</quote> Flow objects are abstract representations of content
(paragraphs, rules, tables, and so on). The expression:
<screen>
(make paragraph
  font-size: 12pt
  line-spacing: 14pt ...)
</screen>
specifies that the content that goes <quote>here</quote> is to be
placed into a paragraph flow object with a font-size of 12pt and a
line-spacing of 14pt (all of the unspecified characteristics of the
flow object are defaulted in the appropriate way).
</para>
<para>
They're called flow objects because <acronym>DSSSL</acronym>, in its
full generality, allows you to specify the characteristics of a
sequence of flow objects and a set of areas on the physical page where
you can place content. The content of the flow objects is then
<quote>poured on to</quote> (or flows in to) the areas on the page(s).
</para>
<para>
<indexterm><primary>sosofo (DSSSL)</primary></indexterm>
<indexterm><primary>make expressions (DSSSL)</primary></indexterm>

In most cases, it's sufficient to think of the make expressions as
constructing the flow objects, but they really only specify the
<emphasis>characteristics</emphasis> of the flow objects. This detail
is apparent in one of the most common and initially confusing pieces
of <acronym>DSSSL</acronym> jargon: the
<firstterm>sosofo</firstterm>. Sosofo stands for a
<quote>specification of a sequence of flow objects.</quote> All this
means is that processing a document may result in a nested set of 
<literal>make</literal> expressions (in other words, the paragraph may contain a table that
contains rows that contain cells that contain paragraphs, and so on).
</para>
<para>
The general form of a <literal>make</literal> expression is:
<screen>
(make <replaceable>flow-object-name</replaceable>
  <replaceable>keyword1:</replaceable> <replaceable>value1</replaceable>
  <replaceable>keyword2:</replaceable> <replaceable>value2</replaceable>
  ...
  <replaceable>keywordn:</replaceable> <replaceable>valuen</replaceable>
  (<replaceable>content-expression</replaceable>))
</screen>
</para>
<para>
<indexterm><primary>keywords</primary>
  <secondary>flow objects (DSSSL), defining</secondary></indexterm>

Keyword arguments specify the characteristics of the flow object. The
specific characteristics you use depends on the flow object. The
<replaceable>content-expression</replaceable> can vary; it is usually
another make expression or one of the <link linkend="dsssl.expr.proc">processing expressions</link>.
</para>
<para>
<indexterm><primary>flow objects (DSSSL)</primary></indexterm>

Some common flow objects in the print stylesheet are:
</para>
<variablelist>
<varlistentry><term><literal>simple-page-sequence</literal></term>
<listitem>
<para>
<indexterm><primary>simple-page-sequence (DSSSL)</primary>
  <secondary>flow object</secondary></indexterm>
Contains a sequence of pages. The keyword arguments of this flow
object let you specify margins, headers and footers, and other
page-related characteristics.  Print stylesheets should always produce
one or more <literal>simple-page-sequence </literal> flow objects.
</para>
<para>
Nesting <literal>simple-page-sequence</literal> does not
work. Characteristics on the inner sequences are ignored.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>paragraph</literal></term>
<listitem>
<para>
<indexterm><primary>paragraphs</primary>
  <secondary>DSSSL flow objects</secondary></indexterm>
<indexterm><primary>nesting</primary>
  <secondary>paragraphs (DSSSL)</secondary></indexterm>

A paragraph is used for any block of text. This may include not only
paragraphs in the source document, but also titles, the terms in a
definition list, glossary entries, and so on. Paragraphs in
<acronym>DSSSL</acronym> can be nested.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>sequence</literal></term>
<listitem>
<para>
<indexterm><primary>sequences</primary>
  <secondary>DSSSL flow objects</secondary></indexterm>

A sequence is a wrapper. It is most frequently used to change
inherited characteristics (like font style) of a set of flow objects
without introducing other semantics (such as line breaks).
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>score</literal></term>
<listitem>
<para>
<indexterm><primary>score (DSSSL flow object)</primary></indexterm>

A score flow object creates underlining, strike-throughs, or
overlining.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>table</literal></term>
<listitem>
<para>
<indexterm><primary>tables</primary>
  <secondary>DSSSL flow objects</secondary></indexterm>

A table flow object creates a table of rows and cells.</para>
</listitem>
</varlistentry>
</variablelist>
<para>
<indexterm><primary>HTML</primary>
  <secondary>DSSSL flow objects</secondary></indexterm>

The &HTML; stylesheet uses the &SGML; backend, which has a different
selection of flow objects.
</para>
<variablelist>
<varlistentry><term><literal>element</literal></term>
<listitem>
<para>
<indexterm><primary>make expressions (DSSSL)</primary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>creating</secondary></indexterm>

Creates an element. The content of this <literal>make</literal>
expression will appear between the start and end tags. The expression:
</para>
<screen>
(make element gi: "H1" 
	    (literal "Title"))
</screen>
<para>produces <literal>&lt;H1>Title&lt;/H1></literal>.</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>empty-element</literal></term>
<listitem>
<para>
<indexterm><primary>empty elements</primary>
  <secondary>creating</secondary></indexterm>
Creates an empty element that may not have content. The expression:</para>
<screen>
(make empty-element gi: "BR"
     attributes: '(("CLEAR" "ALL")))
</screen>
<para>produces <literal>&lt;BR CLEAR="ALL"></literal>.</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>sequence</literal></term>
<listitem>
<para>
<indexterm><primary>wrappers</primary>
  <secondary>sequences (DSSSL)</secondary></indexterm>

Produces no output in of itself as a wrapper, but is still
required in <acronym>DSSSL</acronym> contexts in which you want to
output several flow objects but only one object top-level object may
be returned.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>entity-ref</literal></term>
<listitem>
<para>
<indexterm><primary>entities</primary>
  <secondary>entity-ref (DSSSL)</secondary></indexterm>
<indexterm><primary>references</primary>
  <secondary>entities (DSSSL)</secondary></indexterm>
<indexterm><primary>entity-ref (DSSSL flow objects)</primary></indexterm>

Inserts an entity reference. The expression:</para>
<screen>(make entity-ref name: "nbsp")</screen>
<para>produces <literal>&amp;nbsp;</literal>.</para>
</listitem>
</varlistentry>
</variablelist>
<para>
<indexterm><primary>DSSSL</primary>
  <secondary>stylesheets</secondary>
    <tertiary>flow objects, empty</tertiary></indexterm>
<indexterm><primary>empty flow objects (DSSSL)</primary></indexterm>
<indexterm><primary>flow objects (DSSSL)</primary>
  <secondary>empty</secondary></indexterm>

In both stylesheets, a completely empty flow object is constructed
with <literal>(empty-sosofo)</literal>.
</para>
</section>
<section id="dsssl.expr.data"><title>Selecting data</title>
<para>
<indexterm><primary>data, selecting (DSSSL)</primary></indexterm>
<indexterm><primary>selecting data (DSSSL)</primary></indexterm>

Extracting parts of the source document can be accomplished with these
functions:
</para>
<variablelist>
<varlistentry><term><literal>(data <replaceable>nd</replaceable>)</literal></term>
<listitem>
<para>
Returns all of the character data from <replaceable>nd</replaceable> as a
string.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>(attribute-string "<replaceable>attr</replaceable>" <replaceable>nd</replaceable>)</literal></term>
<listitem>
<para>
Returns the value of the <replaceable>attr</replaceable> attribute of <replaceable>nd</replaceable>.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>(inherited-attribute-string "<replaceable>attr</replaceable>" <replaceable>nd</replaceable>)</literal></term>
<listitem>
<para>
Returns the value of the <replaceable>attr</replaceable> attribute of
<replaceable>nd</replaceable>.  If that attribute is not specified on
<replaceable>nd</replaceable>, it searches up the hierarchy for the first
ancestor element that does set the attribute, and returns its value.
</para>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="dsssl.expr.nodes"><title>Selecting elements</title>
<para>
<indexterm><primary>elements</primary>
  <secondary>selecting</secondary></indexterm>
<indexterm><primary>selecting elements (DSSSL)</primary></indexterm>
<indexterm><primary>content</primary>
  <secondary>reordering, DSSSL</secondary></indexterm>
<indexterm><primary>functions</primary>
  <secondary>DSSSL</secondary>
    <tertiary>elements, selecting</tertiary></indexterm>
<indexterm><primary>nodes (DSSSL)</primary></indexterm>

A common requirement of formatting is the ability to reorder content.
In order to do this, you must be able to select other elements in the
tree for processing. <acronym>DSSSL</acronym> provides a number of
functions that select other elements.  These functions all return a
list of nodes.
</para>
<variablelist>
<varlistentry><term><literal>(current-node)</literal></term>
<listitem>
<para>Returns the current node.</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>(children <replaceable>nd</replaceable>)</literal></term>
<listitem>
<para>Returns the children of <replaceable>nd</replaceable>.</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>(descendants <replaceable>nd</replaceable>)</literal></term>
<listitem>
<para>
Returns the descendants of <replaceable>nd</replaceable> (the children of
<replaceable>nd</replaceable> and all their children's children, and so on).
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>(parent <replaceable>nd</replaceable>)</literal></term>
<listitem>
<para>Returns the parent of <replaceable>nd</replaceable>.</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>(ancestor "<replaceable>name</replaceable>" <replaceable>nd</replaceable>)</literal></term>
<listitem>
<para>
Returns the first ancestor of <replaceable>nd</replaceable> named
<replaceable>name</replaceable>.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>(element-with-id "<replaceable>id</replaceable>")</literal></term>
<listitem>
<para>
Returns the element in the document with the <acronym>ID</acronym>
<replaceable>id</replaceable>, if such an element exists.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>(select-elements <replaceable>node-list</replaceable> "<replaceable>name</replaceable>")</literal></term>
<listitem>
<para>
Returns all of the elements of the <replaceable>node-list</replaceable> that have
the name <replaceable>name</replaceable>. For example, <literal>(select-elements
(descendants (current-node)) "para")</literal> returns a list of all
the paragraphs that are descendants of the current node.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>(empty-node-list)</literal></term>
<listitem>
<para>
Returns a node list that contains no nodes.</para>
</listitem>
</varlistentry>
</variablelist>
<para>
Other functions allow you to manipulate node lists.
</para>
<variablelist>
<varlistentry><term><literal>(node-list-empty? <replaceable>nl</replaceable>)</literal></term>
<listitem>
<para>
Returns true if (and only if) <replaceable>nl</replaceable> is an empty node
list.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>(node-list-length <replaceable>nl</replaceable>)</literal></term>
<listitem>
<para>Returns the number of nodes in <replaceable>nl</replaceable>.</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>(node-list-first <replaceable>nl</replaceable>)</literal></term>
<listitem>
<para>
Returns a node list that consists of the single node that is the first
node in <replaceable>nl</replaceable>.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>(node-list-rest <replaceable>nl</replaceable>)</literal></term>
<listitem>
<para>
Returns a node list that contains all of the nodes in
<replaceable>nl</replaceable> except the first node.
</para>
</listitem>
</varlistentry>
</variablelist>
<para>
<indexterm><primary>expressions (DSSSL)</primary>
  <secondary>nodes and node lists, manipulating</secondary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>element expressions (DSSSL)</secondary></indexterm>
<indexterm><primary>lists</primary>
  <secondary>nodes, manipulating</secondary></indexterm>

There are many other expressions for manipulating nodes and node
lists.
</para>
</section>
<section id="dsssl.expr.proc"><title>Processing expressions</title>
<para>
<indexterm><primary>processing expressions (DSSSL)</primary></indexterm>

Processing expressions control which elements in the document will be
processed and in what order. Processing an element is performed by
finding a matching element rule and using that rule.
</para>
<variablelist>
<varlistentry><term><literal>(process-children)</literal></term>
<listitem>
<para>
Processes all of the children of the current node. In most cases, if
no process expression is given, processing the children is the default
behavior.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>(process-node-list <replaceable>nl</replaceable>)</literal></term>
<listitem>
<para>Processes each of the elements in <replaceable>nl</replaceable>.</para>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="dsssl.expr.define">
<title>Define expressions</title>
<para>
<indexterm><primary>functions</primary>
  <secondary>declaring your own (DSSSL)</secondary></indexterm>
<indexterm><primary>constants (DSSSL)</primary></indexterm>
<indexterm><primary>declarations</primary>
  <secondary>functions and constants (DSSSL)</secondary></indexterm>

You can declare your own functions and constants in
<acronym>DSSSL</acronym>. The general form of a function declaration
is:
<screen>
(define (<replaceable>function</replaceable> <replaceable>args</replaceable>)
  <replaceable>function-body</replaceable>)
</screen>
A constant declaration is:
<screen>(define <replaceable>constant</replaceable>
  <replaceable>constant-function-body</replaceable>)
</screen>
</para>
<para>
The distinction between constants and functions is that the body of a
constant is evaluated when the definition occurs, while functions are
evaluated when they are used.
</para>
</section>
<section id="dsssl.expr.conditional"><title>Conditionals</title>
<para>
<indexterm><primary>conditionals (DSSSL)</primary></indexterm>
<indexterm><primary>false, testing for (DSSSL)</primary></indexterm>
<indexterm><primary>true, testing for (DSSSL)</primary></indexterm>
<indexterm><primary>expressions (DSSSL)</primary>
  <secondary>conditionals</secondary></indexterm>

In <acronym>DSSSL</acronym>, the constant <literal>#t</literal>
represents true and <literal>#f</literal> false. There are several
ways to test conditions and take action in <acronym>DSSSL</acronym>.
</para>
<variablelist>
<varlistentry><term><literal>if</literal></term>
<listitem>
<para>
<indexterm><primary>if expressions (DSSSL)</primary></indexterm>

The form of an <literal>if</literal> expression is:
<screen>
(if <replaceable>condition</replaceable>
  <replaceable>true-expression</replaceable>
  <replaceable>false-expression</replaceable>)
</screen>
</para>
<para>
If the condition is true, the
<replaceable>true-expression</replaceable> is evaluated, otherwise the
<replaceable>false-expression</replaceable> is evaluated. You must
always provide an expression to be evaluated when the condition is not
met. If you want to produce nothing, use
<literal>(empty-sosofo)</literal>.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>case</literal></term>
<listitem>
<para>
<indexterm><primary>case expression (DSSSL)</primary></indexterm>

<literal>case</literal> selects from among several alternatives:
<screen>
(case <replaceable>expression</replaceable>
  ((<replaceable>constant1</replaceable>) (<replaceable>expression1</replaceable>)
  ((<replaceable>constant2</replaceable>) (<replaceable>expression2</replaceable>)
  ((<replaceable>constant3</replaceable>) (<replaceable>expression3</replaceable>)
  (else <replaceable>else-expression</replaceable>))
</screen>
</para>
<para>
The value of the expression is compared against each of the constants
in turn and the expression associated with the first matching constant
is evaulated.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>cond</literal></term>
<listitem>
<para>
<indexterm><primary>conditionals (DSSSL)</primary></indexterm>

<literal>cond</literal> also selects from among several alternatives,
but the selection is performed by evaluating each expression:
<screen>
(cond
  ((<replaceable>condition1</replaceable>) (<replaceable>expression1</replaceable>)
  ((<replaceable>condition2</replaceable>) (<replaceable>expression2</replaceable>)
  ((<replaceable>condition3</replaceable>) (<replaceable>expression3</replaceable>)
  (else <replaceable>else-expression</replaceable>))
</screen>
</para>
<para>
The value of each conditional is calculated in turn. The expression
associated with the first condition that is true is evaluated.
</para>
</listitem>
</varlistentry>
</variablelist>
<para>
<indexterm><primary>empty sets (DSSSL)</primary></indexterm>

Any expression that returns <literal>#f</literal> is false; all other
expressions are true. This can be somewhat counterintuitive.  In many
programming languages, it's common to assume that <quote>empty</quote>
things are false (0 is false, a null pointer is false, an empty set is
false, for example.) In <acronym>DSSSL</acronym>, this isn't the case;
note, for example, that an empty node list is not
<literal>#f</literal> and is therefore true.  To avoid these
difficulties, always use functions that return true or false in
conditionals. To test for an empty node list, use
<literal>(node-list-empty?)</literal>.
</para>
</section>
<section id="dsssl.expr.let"><title>Let expressions</title>
<para>
<indexterm><primary>let expressions (DSSSL)</primary></indexterm>

The way to create local variables in <acronym>DSSSL</acronym> is with
<literal>(let)</literal>. The general form of a <literal>let</literal>
expression is:
<screen>
(let ((<replaceable>var1</replaceable> <abbrev>expression1</abbrev>)
      (<replaceable>var2</replaceable> <abbrev>expression2</abbrev>)
      ...
      (<replaceable>varn</replaceable> <abbrev>expressionn</abbrev>))
  <replaceable>let-body</replaceable>)
</screen>
</para>
<para>
<indexterm><primary>variables (DSSSL)</primary>
  <secondary>let expressions</secondary></indexterm>
In a <literal>let</literal>; expression, all of the variables are
defined <quote>simultaneously.</quote> The expression that defines
<replaceable> var2</replaceable> cannot contain any references to any
other variables defined in the same <literal>let</literal>
expression. A <literal>let*</literal> expression allows variables to
refer to each other, but runs slightly slower.
</para>
<para>
<indexterm><primary>define expresssions (DSSSL)</primary></indexterm>
Variables are available only within the
<replaceable>let-body</replaceable>.  A common use of
<literal>let</literal> is within a <literal>define</literal>
expression:
<screen>
(define (cals-rule-default nd)
   (let* ((table (ancestor "table" nd))
          (frame (if (attribute-string "frame" table)
                     (attribute-string "frame" table)
                     "all")))
    (equal? frame "all")))
</screen>
</para>
<para>
This function creates two local variables <literal>table</literal> and
<literal>frame</literal>. <literal>let</literal> returns the value of
the last expression in the body, so this function returns true if the
<sgmltag class="attribute">frame</sgmltag> attribute on the table is
<literal> all</literal> or if no <sgmltag class="attribute">frame</sgmltag> attribute is present.
</para>
</section>
<section id="dsssl.expr.loop"><title>Loops</title>
<para>
<indexterm><primary>for loop, DSSSL and</primary></indexterm>
<indexterm><primary>loops, implementing (DSSSL)</primary></indexterm>
<indexterm><primary>tail recursion (DSSSL)</primary></indexterm>

<acronym>DSSSL</acronym> doesn't have any construct that resembles the
<quote>for loop</quote> that occurs in most imperative languages like C
and Java. Instead, <acronym>DSSSL</acronym> employs a common trick in
functional languages for implementing a loop: tail recursion.
</para>
<para>
Loops in <acronym>DSSSL</acronym> use a special form of
<literal>let</literal>. This loop counts from 1 to 10:
<screen>
(let <co id="dl1"/>loopvar <co id="dl2"/>((count 1))
  <co id="dl3"/>(if (> count 10)
    <co id="dl4"/>#t
    (<co id="dl5"/>loopvar <co id="dl6"/>(+ count 1))))</screen></para>
<calloutlist>
<callout arearefs="dl1">
<para>This variable controls the loop. It is declared without an
initial value, immediately after the <literal>let</literal>
operand.</para>
</callout>
<callout arearefs="dl2">
<para>
<indexterm><primary>variables (DSSSL)</primary>
  <secondary>local, defining after loop variable</secondary></indexterm>

Any number of additional local variables can be defined after
the loop variable, just as they can in any other
<literal>let</literal> expression.</para>
</callout>
<callout arearefs="dl3">
<para>If you ever want the loop to end, you have to put some sort of a
test in it.</para>
</callout>
<callout arearefs="dl4">
<para>This is the value that will be returned.</para>
</callout>
<callout arearefs="dl5">
<para>Note that you iterate the loop by using the loop variable as if
it was a function name.</para>
</callout>
<callout arearefs="dl6">
<para>The arguments to this <quote>function</quote> are the values that
you want the local variables declared in <xref linkend="dl2"/> to have
in the next iteration.</para>
</callout>
</calloutlist>
</section>
</section>
<section><title>A Closer Look at <xref linkend="dsssl.stylesheet"/></title>
<para>
<indexterm><primary>DSSSL</primary>
  <secondary>stylesheets</secondary>
    <tertiary>style specifications</tertiary></indexterm>
<xref linkend="dsssl.stylesheet"/> is a style sheet that contains a
style specification. Stylesheets may consist of multiple
specifications, as we'll see in <xref linkend="dsssl.twostylesheets"/>.
</para>
<para>
The actual <acronym>DSSSL</acronym> code goes in the style
specification body, within the style specification.  Each construction
rule processes different elements from the source document.
</para>
<section><title>Processing chapters</title>
<para>
<indexterm><primary>chapters, processing (DSSSL)</primary></indexterm>
<indexterm><primary>simple-page-sequence (DSSSL)</primary>
  <secondary>chapters, constructing</secondary></indexterm>
<indexterm><primary>printing</primary>
  <secondary>stylesheets</secondary></indexterm>

<sgmltag>Chapter</sgmltag>s are processed by the <literal>chapter</literal>
construction rule. Each <sgmltag>Chapter</sgmltag> is formatted as a
<literal>simple-page-sequence</literal>. Every print stylesheet should format
a document as one or more simple page sequences.  Characteristics on
the simple page sequence can specify headers and footers as well as
margins and other page parameters.
</para>
<para>
<indexterm><primary>nesting</primary>
  <secondary>simple page sequences (DSSSL), not allowed</secondary></indexterm>

One important note about simple page sequences: they cannot nest.
This means that you cannot blindly process divisions
(<sgmltag>Part</sgmltag>s, <sgmltag>Reference</sgmltag>) and the elements they
contain (<sgmltag>Chapter</sgmltag>s, <sgmltag>RefEntry</sgmltag>s) as simple page
sequences. This sometimes involves a little creativity.
</para>
</section>
<section><title>Processing titles</title>
<para>
<indexterm><primary>titles</primary>
  <secondary>processing, DSSSL</secondary></indexterm>

The <literal>make</literal> expression in the <literal>title</literal> element rule
ensures that <sgmltag>Title</sgmltag>s are formatted in large, bold print.
</para>
<para>
This construction rule applies equally to <sgmltag>Chapter</sgmltag> titles,
<sgmltag>Figure</sgmltag> titles, and <sgmltag>Book</sgmltag> titles.  It's unlikely
that you'd want all of these titles to be presented in the same way,
so a more robust stylesheet would have to arrange the processing of
titles with more context.  This might be achieved in the way that
nested <sgmltag>Emphasis</sgmltag> elements are handled in <xref linkend="dsssl.nestedemph"/>.
</para>
</section>
<section><title>Processing paragraphs</title>
<para>
<sgmltag>Para</sgmltag> elements are simply formatted as paragraphs.
<indexterm><primary>Para element</primary>
  <secondary>DSSSL, processing</secondary></indexterm>

</para>
</section>
<section id="dsssl.nestedemph"><title>Processing emphasis</title>
<para>
<indexterm><primary>Emphasis element</primary>
  <secondary>DSSSL, processing</secondary></indexterm>
<indexterm><primary>nesting</primary>
  <secondary>emphasis elements, DSSSL processing</secondary></indexterm>

Processing <sgmltag>Emphasis</sgmltag> elements is made a little more
interesting because we want to consider an attribute value and the
possibility that <sgmltag>Emphasis</sgmltag> elements can be nested.
</para>
<para>
In the simple case, in which we're processing an <sgmltag>Emphasis</sgmltag>
element that is not nested, we begin by testing the value of the
<sgmltag class='attribute'>role</sgmltag> attribute.  If the content of that
attribute is the string <literal>strong</literal>, it is formatted
in bold; otherwise, it is formatted in italic.
</para>
<para>
The nested case is handled by the <literal>(emphasis emphasis)</literal>
rule. This rule simply formats the content using an upright
(nonitalic) font.  This rule, like the rule for <sgmltag>Title</sgmltag>s, is
not robust. <sgmltag>Emphasis</sgmltag> nested inside
<literal>strong</literal> <sgmltag>Emphasis</sgmltag> won't be distinguished,
for example, and nestings more than two elements deep will be handled
just as nestings that are two deep.
</para>
</section>
<section><title>Processing subscripts and superscripts</title>
<para>
<indexterm><primary>Subscript element</primary>
  <secondary>DSSSL, processing</secondary></indexterm>
<indexterm><primary>Superscript element</primary>
  <secondary>DSSSL, processing</secondary></indexterm>

Processing <sgmltag>Subscript</sgmltag> and <sgmltag>Superscript</sgmltag> elements
is really handled by the <literal>super-sub-script</literal> function.
There are several interesting things about this function:
</para>
<variablelist>
<varlistentry><term>The <literal>plus-or-minus</literal> argument</term>
<listitem>
<para>
<indexterm><primary>Scheme language</primary>
  <secondary>function, passing as argument</secondary></indexterm>
<indexterm><primary>functions</primary>
  <secondary>Scheme, passing as argument</secondary></indexterm>

You might ordinarily think of passing a keyword or boolean argument to
the <function>super-sub-script</function> function to indicate whether
subscripts or superscripts are desired.  But with Scheme, it's
possible to pass the actual function as an argument!
</para>
<para>
Note that in the element construction rules for
<sgmltag>Superscript</sgmltag> and <sgmltag>Subscript</sgmltag>, we pass the actual
functions <literal>+</literal> and <literal>-</literal>. In the body of
<function>super-sub-script</function>, we use the
<literal>plus-or-minus</literal> argument as a function name (it
appears immediately after an open parenthesis).
</para>
</listitem></varlistentry>
<varlistentry><term>The optional argument</term>
<listitem>
<para>
<indexterm><primary>optional arguments (DSSSL functions)</primary></indexterm>

<literal>optional</literal> arguments are indicated by
<literal>#!optional</literal> in the function declaration.  Any number of
<literal>optional</literal> arguments may be given, but each must
specify a default value.  This is accomplished by listing each
argument and default value (an expression) as a pair.
</para>
<para>
In <function>super-sub-script</function>, the optional argument
<literal>sosofo</literal> is initialized to <literal>process-children</literal>.
This means that at the point where the function is
<emphasis>called</emphasis>, <literal>process-children</literal> is evaluated and the
resulting <literal>sosofo</literal> is passed to the function.
</para>
</listitem></varlistentry>
<varlistentry><term>Use of inherited characteristics</term>
<listitem>
<para>
<indexterm><primary>inherited characteristics, calculating new values with</primary></indexterm>

It is possible to use the <quote>current</quote> value of an inherited
characteristic to calculate a new value.  Using this technique,
superscripts and subscripts will be presented at 80 percent of the
current font size.
</para>
</listitem></varlistentry>
</variablelist>
</section>
</section>
<section><title>Customizing the Stylesheets</title>
<para>
<indexterm><primary>DSSSL</primary>
  <secondary>stylesheets</secondary>
    <tertiary>customizing</tertiary></indexterm>
<indexterm><primary>customizing</primary>
  <secondary>DSSSL stylesheets</secondary></indexterm>
<indexterm><primary>driver files</primary>
  <secondary>DSSSL stylsheets, customizing</secondary></indexterm>

The best way to customize the stylesheets is to write your own
<quote>driver</quote> file; this is a stylesheet that contains your
local modifications and then includes the appropriate stylesheet from
the standard distribution by reference.  This allows you to make local
changes and extensions without modifying the distributed files, which
makes upgrading to the next release much simpler.
</para>
<section id="dsssl.driver"><title>Writing Your Own Driver</title>
<para>
A basic driver file looks like this:
<screen>
<![CDATA[<!DOCTYPE style-sheet PUBLIC "-//James Clark//DTD DSSSL Style Sheet//EN" [
<!ENTITY dbstyle PUBLIC "-//Norman Walsh//DOCUMENT DocBook Print Stylesheet//EN" CDATA DSSSL>
]>

<style-sheet>
<style-specification use="docbook">
<style-specification-body>

;; your changes go here...

</style-specification-body>
</style-specification>
<external-specification id="docbook" document="dbstyle">
</style-sheet>
]]></screen>
</para>
<para>
<indexterm><primary>public identifiers</primary>
  <secondary>Modular DocBook Stylesheets</secondary></indexterm>
<indexterm><primary>Modular DocBook Stylesheets</primary>
  <secondary>public identifiers</secondary></indexterm>

There are two public identifiers associated with the Modular DocBook
Stylesheets:
<itemizedlist>
<listitem><para><literal>-//Norman Walsh//DOCUMENT DocBook Print Stylesheet//EN</literal></para>
</listitem>
<listitem><para><literal>-//Norman Walsh//DOCUMENT DocBook HTML Stylesheet//EN</literal></para>
</listitem>
</itemizedlist>
<indexterm><primary>printing</primary>
  <secondary>stylesheets</secondary></indexterm>
<indexterm><primary>HTML</primary>
  <secondary>stylesheets</secondary>
    <tertiary>selecting</tertiary></indexterm>
<indexterm><primary>catalog files</primary>
  <secondary>Open (SGML)</secondary></indexterm>

The former selects the print stylesheet and the latter selects the
&HTML; stylesheet. There is an &SGML; Open catalog file in the
distribution that maps these public identifiers to the stylesheet
files.</para> <para>You can add your own definitions, or
redefinitions, of stylesheet rules and parameters so that
<screen>
;; your changes go here...
</screen>
occurs in the previous example.
</para>
<para>
<indexterm><primary>driver files</primary>
  <secondary>example</secondary></indexterm>

For a concrete example of a driver file, see
<filename>plain.dsl</filename> in the
<filename>docbook/print</filename> directory in the stylesheet
distribution (or on the <link linkend="app-cdrom"><acronym>CD-ROM</acronym></link>).  This is a
customization of the print stylesheet, which turns off title page and
<acronym>TOC</acronym> generation.
</para>
</section>
<section><title>Changing the Localization</title>
<para>
<indexterm><primary>DocBook DTD</primary>
  <secondary>stylesheets</secondary>
    <tertiary>languages</tertiary></indexterm>
<indexterm><primary>languages</primary>
  <secondary>DocBook stylesheets</secondary></indexterm>

As distributed, the stylesheets use English for all generated text,
but other localization files are also provided. The languages supported
at the time of this writing are summarized in
<xref linkend="tbl.lang"/>.
(If you can write a localization for another language,
<emphasis>please</emphasis> contribute it.)
</para>
<para>
<indexterm><primary>Lang attribute</primary></indexterm>
<indexterm><primary>customizing</primary>
  <secondary>DSSSL stylesheets</secondary>
    <tertiary>language, changing</tertiary></indexterm>

There are two ways to switch languages: by specifying a <sgmltag class="attribute">lang</sgmltag> attribute, or by changing the
default language in a customization.
</para>
<section><title>Using the <sgmltag class="attribute">lang</sgmltag> attribute</title>
<para>
<indexterm><primary>DocBook DTD</primary>
  <secondary>Lang attribute</secondary></indexterm>
<indexterm><primary>languages</primary>
  <secondary>codes</secondary></indexterm>

One of the DocBook common attributes is <sgmltag class="attribute">
lang</sgmltag>. If you specify a language, the DocBook stylesheets
will use that language (and all its descendants, if no other language
is specified) for generated text within that element.
</para>
<para>
<xref linkend="tbl.lang"/> summarizes the language codes for the
supported languages.<footnote>
<para>
Language codes should conform to <acronym>IETF</acronym>
<acronym>RFC</acronym> 3066.
</para>
</footnote>
<indexterm><primary>French language chapter, example</primary></indexterm>

The following chapter uses text generated in French:
<screen><![CDATA[
<chapter lang="fr"><title>B]]>&ecirc;<![CDATA[tises</title>
<para>Pierre qui roule n'amasse pas de mousse.</para>
</chapter>
]]></screen>
</para>

<table id="tbl.lang">
<title>DocBook Stylesheet Language Codes</title>
<tgroup cols="2">
<?dbhtml cellpadding="2px"?>
<colspec colname="COLSPEC0" colwidth="2in" colsep="1"/>
<colspec colname="COLSPEC1"/>
<thead>
<row rowsep="1">
<entry colname="COLSPEC0" rowsep="1" align="left" char="">Language Code</entry>
<entry colname="COLSPEC1" rowsep="1" align="left" char="">Language</entry>
</row>
</thead>
<tbody>
<row>
<entry colname="COLSPEC0"><literal>af</literal></entry>
<entry colname="COLSPEC1">Afrikaans</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>ca</literal></entry>
<entry colname="COLSPEC1">Catalan</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>cs</literal></entry>
<entry colname="COLSPEC1">Czech</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>da</literal></entry>
<entry colname="COLSPEC1">Danish</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>de</literal></entry>
<entry colname="COLSPEC1">German</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>el</literal></entry>
<entry colname="COLSPEC1">Greek</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>en</literal></entry>
<entry colname="COLSPEC1">English</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>es</literal></entry>
<entry colname="COLSPEC1">Spanish</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>et</literal></entry>
<entry colname="COLSPEC1">Estonian</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>eu</literal></entry>
<entry colname="COLSPEC1">Basque</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>fi</literal></entry>
<entry colname="COLSPEC1">Finnish</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>fr</literal></entry>
<entry colname="COLSPEC1">French</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>he</literal></entry>
<entry colname="COLSPEC1">Hebrew</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>hu</literal></entry>
<entry colname="COLSPEC1">Hungarian</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>id</literal></entry>
<entry colname="COLSPEC1">Indonesian</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>it</literal></entry>
<entry colname="COLSPEC1">Italian</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>ja</literal></entry>
<entry colname="COLSPEC1">Japanese</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>ko</literal></entry>
<entry colname="COLSPEC1">Korean</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>nl</literal></entry>
<entry colname="COLSPEC1">Dutch</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>nn</literal></entry>
<entry colname="COLSPEC1">Nyorsk</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>no</literal></entry>
<entry colname="COLSPEC1">Norwegian</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>pl</literal></entry>
<entry colname="COLSPEC1">Polish</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>pt</literal></entry>
<entry colname="COLSPEC1">Portuguese</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>pt-br</literal></entry>
<entry colname="COLSPEC1">Portuguese (Brazil)</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>ro</literal></entry>
<entry colname="COLSPEC1">Romanian</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>ru</literal></entry>
<entry colname="COLSPEC1">Russian</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>sk</literal></entry>
<entry colname="COLSPEC1">Slovak</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>sl</literal></entry>
<entry colname="COLSPEC1">Slovenian</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>sv</literal></entry>
<entry colname="COLSPEC1">Swedish</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>th</literal></entry>
<entry colname="COLSPEC1">Thai</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>tr</literal></entry>
<entry colname="COLSPEC1">Turkish</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>uk</literal></entry>
<entry colname="COLSPEC1">Ukranian</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>xh</literal></entry>
<entry colname="COLSPEC1">Xhosa</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>zh-cn</literal></entry>
<entry colname="COLSPEC1">Chinese (Continental)</entry>
</row>
<row>
<entry colname="COLSPEC0"><literal>zh-tw</literal></entry>
<entry colname="COLSPEC1">Chinese (Traditional)</entry>
</row>
</tbody>
</tgroup>
</table>
</section>
<section><title>Changing the default language</title>
<para>
<indexterm><primary>languages</primary>
  <secondary>default, changing</secondary></indexterm>
<indexterm><primary>driver files</primary>
  <secondary>language, changing default</secondary></indexterm>

If no <sgmltag class="attribute">lang</sgmltag> attribute is
specified, the default language is used. You can change the default
language with a <link linkend="dsssl.driver">driver</link>.
</para>
<para>
In the driver, define the default language. <xref linkend="tbl.lang"/>
summarizes the language codes for the supported languages. The
following driver makes German the default language:
<screen><![CDATA[
<!DOCTYPE style-sheet PUBLIC "-//James Clark//DTD DSSSL Style Sheet//EN" [
<!ENTITY dbstyle PUBLIC "-//Norman Walsh//DOCUMENT DocBook Print Stylesheet//EN" CDATA DSSSL>
]>

<style-sheet>
<style-specification use="docbook">
<style-specification-body>

(define %default-language% "dege")

</style-specification-body>
</style-specification>
<external-specification id="docbook" document="dbstyle">
</style-sheet>
]]></screen>
</para>
<para>
<indexterm><primary>%gentext-language%</primary></indexterm>

There are two other settings that can be changed only in a driver. Both
of these settings are turned off in the distributed stylesheet:
<variablelist>
<varlistentry><term><literal>%gentext-language%</literal></term>
<listitem>
<para>
If a language code is specified in
<literal>%gentext-language%</literal>, then that language will be used
for all generated text, regardless of any <sgmltag class="attribute">lang</sgmltag> attribute settings in the
document.
</para>
</listitem>
</varlistentry>
<varlistentry><term><literal>%gentext-use-xref-language%</literal></term>
<listitem>
<para>
<indexterm><primary>%gentext-use-xref-language%</primary></indexterm>
<indexterm><primary>cross references</primary>
  <secondary>languages, changing (stylesheets)</secondary></indexterm>

If turned on (defined as <literal>#t</literal>), then the stylesheets
will generate the text associated with a cross reference using the
language of the target, not the current language. Consider the
following book:
</para>
<screen><![CDATA[
<book><title>A Test Book</title>
<preface>
<para>There are three chapters in this book: <xref linkend="c1">, 
<xref linkend="c2">, and <xref linkend="c3">.
</para>
</preface>
<chapter lang="usen"><title>English</title> ... </chapter>
<chapter lang="fr"><title>French</title> ... </chapter>
<chapter lang="dege"><title>Deutsch</title> ... </chapter>
</book>
]]></screen>
<para>
The standard stylesheets render the Preface as something like this:
</para>
<blockquote>
<para>There are three chapters in this book: Chapter 1, Chapter 2, and Chapter
3.</para>
</blockquote>
<para>
With <literal>%gentext-use-xref-language%</literal> turned on, it
would render like this:
</para>
<blockquote>
<para>There are are three chapters in this book: Chapter 1, Chapitre 2, and
Kapitel 3.</para>
</blockquote>
</listitem>
</varlistentry>
</variablelist></para>
</section>
</section>
<section id="dsssl.twostylesheets"><title>A Single Stylesheet for Both Print and &HTML;</title>
<para>
<indexterm><primary>stylesheets</primary>
  <secondary>HTML and print, using single</secondary></indexterm>
<indexterm><primary>printing</primary>
  <secondary>stylesheets</secondary></indexterm>
<indexterm><primary>HTML</primary>
  <secondary>stylesheets</secondary></indexterm>

A <acronym>DSSSL</acronym> stylesheet consists of one or more
<quote>style specifications.</quote> Using more than one style
specification allows you to build a single stylesheet file that can
format with either the print or &SGML; backends.  <xref linkend="ex-twostyles"/> shows a stylesheet with two style
specifications.
<indexterm><primary>DSSSL</primary>
  <secondary>stylesheets</secondary>
    <tertiary>style specifications, multiple</tertiary></indexterm>
</para>
<example id="ex-twostyles">
<title><filename>both.dsl</filename>: A Stylesheet with Two Style Specifications</title>
<screen>
<inlinegraphic format="linespecific" fileref="examples/dsssl.twostyles"/>
</screen>
</example>
<para>
<indexterm><primary>Jade</primary>
  <secondary>style specifications, indicating selected</secondary></indexterm>

Once you have stylesheets with more than one style specification, you
have to be able to indicate which style specification you want to
use. In Jade, you indicate this by providing the <acronym>ID</acronym>
of the style specification after the stylesheet filename, separated
with a hash mark: <literal>#</literal>.
</para>
<para>
Using the code from <xref linkend="ex-twostyles"/>, you can format a
document using the print stylesheet by running:
</para>
<screen>
jade -t rtf -d both.dsl#print file.sgm
</screen>
<para>
and using the &HTML; stylesheet by running:
</para>
<screen>
jade -t sgml -d both.dsl#html file.sgm
</screen>
</section>
</section>
<section id="jademultdecl"><title>Dealing with Multiple Declarations</title>
<para>
<indexterm><primary>declarations</primary>
  <secondary>multiple, using</secondary></indexterm>

The DocBook &SGML; &DTD; and the DocBook <acronym>DSSSL</acronym>
Stylesheets happen to use the same &SGML; declaration. This makes it
very easy to run Jade with DocBook.  However, you may sometimes wish
to use Jade with other document types, for example the DocBook &XML;
&DTD;, which has a different declaration. There are a couple of ways
to do this.
</para>
<section><title>Pass the Declaration Explicitly</title>
<para>

If your stylesheets parse fine with the default declaration, but you
want to use an alternate declaration with a particular document, just
pass the declaration on the command line:
<screen>
jade <replaceable>options</replaceable> the-declaration the-document
</screen>
Note that there's no option required before the declaration; it simply
occurs before the first filename.  Jade concatenates all of the files
that you give it together, and parses them as if they were one
document.
</para>
</section>
<section><title>Use the Catalogs</title>
<para>
The other way to fix this is with a little catalog trickery.
</para>
<para>
<indexterm><primary>catalog files</primary>
  <secondary>multiple declarations, using</secondary></indexterm>

First, note that Jade always looks in the file called
<filename>catalog</filename> in the same directory as the document
that it is loading, and uses settings in that file in preference to
settings in other catalogs.
</para>
<para>
With this fact, we can employ the following trick:
</para>
<itemizedlist>
<listitem>
<para>Put a <filename>catalog</filename> file in the directory that
contains your stylesheets, which contain an
<literal>SGMLDECL</literal> directive.  Jade understands the
directive, which points to the &SGML; declaration that you should use
when parsing the stylesheets. For the DocBook stylesheets, the DocBook
declaration works fine.</para>
</listitem>
<listitem>
<para>In the directory that contains the document you want to process,
create a <filename>catalog</filename> file that contains an
<literal>SGMLDECL</literal> directive that points to the &SGML;
declaration that should be used when parsing the document.</para>
</listitem>
</itemizedlist>
<para>
There's no easy way to have both the stylesheet and the document in
the same directory if they must be processed with different
declarations.  But this is usually not too inconvenient.
</para>
</section>
</section>
<section id="dsssl.arch"><title>The <acronym>DSSSL</acronym> Architecture</title>
<para>
<indexterm><primary>architecture</primary>
  <secondary>DSSSL</secondary></indexterm>
<indexterm><primary>DSSSL</primary>
  <secondary>architecture</secondary></indexterm>
<indexterm><primary>attributes</primary>
  <secondary>DSSSL architecture</secondary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>DSSSL architecture and</secondary></indexterm>

The concept of an architecture was promoted by HyTime. In some ways,
it takes the standard &SGML;/&XML; notions of the role of elements and
attributes and inverts them. Instead of relying on the name of an
element to assign its primary semantics, it uses the values of a small
set of fixed attributes.
</para>
<para>
While this may be counterintuitive initially, it has an interesting
benefit. An architecture-aware processor can work transparently with
many different &DTD;s. A small example will help illustrate this
point.
</para>
<note>
<para>The following example demonstrates the concept behind
architectures, but for the sake of simplicity, it does not properly
implement an architecture as defined in HyTime.</para>
</note>
<para>
Imagine that you wrote an application that can read an &SGML;/&XML;
document containing a letter (conforming to some letter &DTD;), and
automatically print an envelope for the letter. It's easy to envision
how this works.  The application reads the content of the letter,
extracts the address and return address elements from the source, and
uses them to generate an envelope:
</para>
<screen><![CDATA[<?xml version='1.0'>
<!DOCTYPE letter "/share/sgml/letter/letter.dtd" [
<!ENTITY myaddress "/share/sgml/entities/myaddress.xml">
]>
<letter>
<returnaddress>&myaddress;</returnaddress>
<address>
<name>Leonard Muellner</name>
<company>O'Reilly &amp; Associates</company>
<street>90 Sherman Street</street>
<city>Cambridge</city><state>MA</state><zip>02140</zip>
</address>
<body>
<salutation>Hi Lenny</salutation>
...
</body>]]></screen>
<para>
The processor extracts the <sgmltag>Returnaddress</sgmltag> and
<sgmltag role="nolink">Address</sgmltag> elements and their children
and prints the envelope accordingly.
</para>
<para>
Now suppose that a colleague from payroll comes by and asks you to
adapt the application to print envelopes for mailing checks, using the
information in the payroll database, which has a different &DTD;. And
a week later, someone from sales comes by and asks if you can modify
the application to use the contact information &DTD;. After a while,
you would have 11 versions of this program to maintain.
</para>
<para>
<indexterm><primary>fixed attributes</primary></indexterm>

Suppose that instead of using the actual element names to locate the addresses
in the documents, you asked each person to add a few attributes to their &DTD;.
By forcing the attributes to have fixed values, they'd automatically be present
in each document, but authors would never have to worry about them.
</para>
<para>
For example, the address part of the letter &DTD; might look like
this:
</para>
<screen>
<inlinegraphic format="linespecific" fileref="examples/arch-letter.dtd"/>
</screen>
<para>
Effectively, each address in a letter would look like this:
</para>
<screen>
<inlinegraphic format="linespecific" fileref="examples/arch-letter.xml"/>
</screen>
<para>
In practice, the author would not include the <sgmltag class="attribute">ADDRESS</sgmltag> attributes; they are automatically
provided by the &DTD; because they are
<literal>#FIXED</literal>.<footnote>
<para>
The use of uppercase names here is intentional. These are not
attributes that an author is ever expected to type. In &XML;, which is
case-sensitive, using uppercase for things like this reduces the
likelihood of collision with <quote>real</quote> attribute names in the
&DTD;.
</para>
</footnote>
</para>
<para>
Now the address portion of the payroll &DTD; might look like this:
</para>
<screen>
<inlinegraphic format="linespecific" fileref="examples/arch-payroll.dtd"/>
</screen>
<para>
The employee records will look like this:
</para>
<screen>
<inlinegraphic format="linespecific" fileref="examples/arch-payroll.xml"/>
</screen>
<para>
Your application no longer cares about the actual element names.  It
simply looks for the elements with the correct attributes and uses
them. This is the power of an architecture: it provides a level of
abstraction that processing applications can use to their
advantage. In practice, architectural forms are a bit more complex to
set up because they have facilities for dealing with attribute name
conflicts, among other things.
</para>
<para>
Why have we told you all this? Because <acronym>DSSSL</acronym> is an
architecture. This means you can modify the stylesheet &DTD; and still
run your stylesheets through Jade.
</para>
<para>
Consider the case presented earlier in <xref linkend="ex-twostyles"/>.
In order to use this stylesheet, you must specify three things: the
backend you want to use, the stylesheet you want to use, and the
style specification you want to use.  If you mismatch any of the
parameters, you'll get the wrong results.  In practice, the problem is
compounded further:
</para>
<itemizedlist>
<listitem>
<para>Some stylesheets support several backends
(<acronym>RTF</acronym>, &TeX;, and &SGML;).
<indexterm><primary>backends, stylesheet support</primary></indexterm>
<indexterm><primary>stylesheets</primary>
  <secondary>backends, supporting</secondary></indexterm>

</para>
</listitem>
<listitem>
<para>Some stylesheets support only some backends
(<acronym>RTF</acronym> and &SGML;, but not &TeX; or
<acronym>MIF</acronym>).</para>
</listitem>
<listitem>
<para>Some stylesheets support multiple outputs using the same
backend (several kinds of &HTML; output, for example, using the
&SGML; backend: &HTML;, &HTML;Help, JavaHelp, and so on).</para>
</listitem>
<listitem>
<para>If you have complex stylesheets, some backends may require
additional options to define parameter entities or stylesheet
options.</para>
</listitem>
</itemizedlist>
<para>
None of this complexity is really necessary, after all, the options
don't change&mdash;you just have to use the correct combinations. The
mental model is really something like this: <quote>I want a certain
kind of output, &TeX; say, so I have to use this combination of
parameters.</quote>
</para>
<para>
You can summarize this information in a table to help keep track of
it:
</para>

<informaltable>
<tgroup cols='5' colsep="1">
<colspec/>
<colspec align="center"/>
<colspec/>
<colspec/>
<colspec align="center"/>
<thead>
<row rowsep="1">
  <entry>Desired Output</entry>
  <entry>Backend</entry>
  <entry>Style specification</entry>
  <entry>Options</entry>
  <entry>Supported?</entry>
</row>
</thead>
<tbody>
<row>
  <entry>rtf</entry>
  <entry>rtf</entry>
  <entry>print</entry>
  <entry>-V rtf-backend</entry>
  <entry>yes</entry>
</row>
<row>
  <entry>tex</entry>
  <entry>tex</entry>
  <entry>print</entry>
  <entry>-V tex-backend -i tex</entry>
  <entry>yes</entry>
</row>
<row>
  <entry>html</entry>
  <entry>sgml</entry>
  <entry>htmlweb</entry>
  <entry>-i html</entry>
  <entry>yes</entry>
</row>
<row>
  <entry>javahelp</entry>
  <entry>sgml</entry>
  <entry>help</entry>
  <entry>-i help</entry>
  <entry>yes</entry>
</row>
<row>
  <entry>htmlhelp</entry>
  <entry></entry>
  <entry></entry>
  <entry></entry>
  <entry>no</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<para>
Putting this information in a table will help you keep track of it,
but it's not the best solution. The ideal solution is to keep this
information on your system, and let the software figure it all
out. You'd like to be able to run a command, tell it what output you
want from what stylesheet, what file you want to process, and then let
it figure everything else out.  For example:
</para>
<screen>
format html mybook.dsl mydoc.sgm
</screen>
<para>
<indexterm><primary>stylesheets</primary>
  <secondary>configuration data, storing within</secondary></indexterm>
<indexterm><primary>configuration data, storing in stylesheet</primary></indexterm>

One way to do this is to put the configuration data in a separate
file, and have the <command>format</command> command load it out of this other
file.  The disadvantage of this solution is that it introduces another
file that you have to maintain and it's independent from the stylesheet so
it isn't easy to keep it up-to-date.
</para>
<para>
In the <acronym>DSSSL</acronym> case, a better alternative is to
modify the stylesheet &DTD; so you can store the configuration
data <emphasis>in the stylesheet</emphasis>. Using this alternate &DTD;, your
<filename>mybook.dsl</filename> stylesheets might look like this:
</para>
<screen>
<inlinegraphic format="linespecific" fileref="examples/dsssl.annot"/>
</screen>
<para>
In this example, the stylesheet has been annotated with a title, a
list of the public <acronym>ID</acronym>s to which it is applicable,
and a table that provides information about the output formats that it
supports.
</para>
<para>
Using this information, the <command>format</command> command can get all the
information it needs to construct the appropriate call to Jade.  To
make <acronym>HTML</acronym> from <filename>myfile.sgm</filename>,
<command>format</command> would run the following:
</para>
<screen>
jade -t sgml -d mybook.dsl#htmlweb -i html myfile.sgm
</screen>
<para>
The additional information, titles and public <acronym>ID</acronym>s,
can be used as part of a <acronym>GUI</acronym> interface to simplify
the selection of stylesheets for an author.
</para>
<para>
The complete annotated stylesheet &DTD;, and an example of the
<command>format</command> command script, are provided on <link linkend="app-cdrom">the <acronym>CD-ROM</acronym></link>.
<indexterm startref="DocBookpublishch04" class="endofrange"/>
<indexterm startref="publishDocBookch04" class="endofrange"/>
</para>
</section>
</section>
<section id="xsl">
<sectioninfo>
<author><surname>Stayton</surname>
<firstname>Bob</firstname></author>
<copyright><year>2000</year><holder>Bob Stayton</holder>
</copyright>
</sectioninfo>
<title>A Brief Introduction to XSL</title>
 <section>
  <title>Using XSL tools to publish DocBook
   documents</title>
  <para>There is a growing list of tools to process DocBook
   documents using XSL stylesheets. Each tool implements parts
   or all of the XSL standard, which actually has several
   components:
   <variablelist>
    <varlistentry>
     <term>Extensible Stylesheet Language (XSL)</term>
     <listitem>
      <para>A language for expressing stylesheets written
       in &XML;. It includes the formatting object language, but
       refers to separate documents for the transformation
       language and the path language.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
   <term>XSL Transformation (XSLT)</term>
   <listitem>
    <para>The part of XSL for transforming &XML; documents
       into other &XML; documents, HTML, or text. It can be used to
       rearrange the content and generate new content.</para>
  </listitem>
 </varlistentry>
 <varlistentry>
  <term>XML Path Language (XPath)</term>
  <listitem>
   <para>A language for addressing parts of an &XML;
       document. It is used to find the parts of your document to
       apply different styles to. All XSL processors use this
       component.</para>
 </listitem>
</varlistentry>
</variablelist></para>
<para>To publish HTML from your &XML; documents, you just
   need an XSLT engine. To get to print, you need an XSLT
   engine to produce formatting objects (FO), which then must
   be processed with a formatting object processor to produce
   PostScript or PDF output.</para>
<para>James Clark's XT was the first useful XSLT engine,
   and it is still in wide use. It is written in Java, so it
   runs on many platforms, and it is free (
   <ulink url="http://www.jclark.com">http://www.jclark.com</ulink>).
   XT comes with James Clark's nonvalidating parser XP, but
   you can substitute a different Java parser. Here is a
   simple example of using XT from the Unix command line to
   produce HTML: You'll need to alter your
   <parameter>CLASSPATH</parameter> environment variable to
   include the path to where you put the
   <filename>.jar</filename> files from the XT
   distribution.</para>
<screen>CLASSPATH=xt.jar:xp.jar:sax.jar
export CLASSPATH
java  com.jclark.xsl.sax.Driver <replaceable>filename.xml</replaceable> <replaceable>docbook/html/docbook.xsl</replaceable> &gt; <replaceable>output.html</replaceable></screen>
<para>If you replace the HTML stylesheet with a
   formatting object stylesheet, XT will produce a formatting
   object file. Then you can convert that to PDF using FOP, a
   formatting object processor available for free from the
   Apache &XML; Project (
   <ulink url="http://xml.apache.org">http://xml.apache.org</ulink>).
   Here is an example of that two stage processing:</para>
<screen>CLASSPATH=xt.jar:xp.jar:sax.jar:fop.jar
export CLASSPATH
java  com.jclark.xsl.sax.Driver <replaceable>filename.xml</replaceable> <replaceable>docbook/fo/docbook.xsl</replaceable> &gt; <replaceable>output.fo</replaceable>
java  org.apache.fop.apps.CommandLine <replaceable>output.fo</replaceable> <replaceable>output.pdf</replaceable></screen>
<para>As of this writing, some other XSLT processors to
   choose from include:</para>
<itemizedlist>
<listitem>
 <para>4XSLT, written in Python, from FourThought LLC (
     <ulink url="http://www.fourthought.com">http://www.fourthought.com</ulink>)</para>
</listitem>
<listitem>
<para>Sablotron, written in C++, from Ginger Alliance (

     <ulink url="http://www.gingerall.com">http://www.gingerall.com</ulink>)</para>
</listitem>
<listitem>
<para>Saxon, written in Java, from Michael Kay (
     <ulink url="http://users.iclway.co.uk/mhkay/saxon">http://users.iclway.co.uk/mhkay/saxon</ulink>)</para>
</listitem>
<listitem>
<para>Xalan, written in Java, from the Apache &XML;
     Project (
     <ulink url="http://xml.apache.org">http://xml.apache.org</ulink>)</para>
</listitem>
<listitem>
<para>XML::XSLT,written in Perl, from Geert Josten and
     Egon Willighagen (
     <ulink url="http://www.cpan.org">http://www.cpan.org</ulink>)</para>
</listitem>
</itemizedlist>
<para>For print output, these additional tools are available for processing formatting objects:</para>
<itemizedlist><listitem><para>XEP (written in Java) from
   RenderX (
  <ulink url="http://www.renderx.com">http://www.renderx.com</ulink>).</para></listitem><listitem><para>PassiveTeX from Sebastian Rahtz (<ulink url="http://users.ox.ac.uk/~rahtz/passivetex/">http://users.ox.ac.uk/~rahtz/passivetex/</ulink>).</para></listitem></itemizedlist></section>
<section>
<title>A brief introduction to XSL</title>
<para>XSL is both a transformation language and a
 formatting language. The XSLT transformation part lets you
 scan through a document's structure and rearrange its
 content any way you like. You can write out the content
 using a different set of &XML; tags, and generate text as
 needed. For example, you can scan through a document to
 locate all headings and then insert a generated table of
 contents at the beginning of the document, at the same time
 writing out the content marked up as HTML. XSL is also a
 rich formatting language, letting you apply typesetting
 controls to all components of your output. With a good
 formatting backend, it is capable of producing high quality
 printed pages.</para>
<para>An XSL stylesheet is written using &XML; syntax, and is
 itself a well-formed &XML; document. That makes the basic
 syntax familiar, and enables an &XML; processor to check for
 basic syntax errors. The stylesheet instructions use
 special element names, which typically begin with
 <sgmltag role="namespace">xsl:</sgmltag> to distinguish them from any &XML;
 tags you want to appear in the output. The XSL namespace is
 identified at the top of the stylesheet file. As with other
 &XML;, any XSL elements that are not empty will require a
 closing tag. And some XSL elements have specific attributes
 that control their behavior. It helps to keep a good XSL
 reference book handy.</para>
<para>Here is an example of a simple XSL stylesheet applied
 to a simple &XML; file to generate HTML output.</para>
<example>
<title>Simple &XML; file</title>
<programlisting><![CDATA[<?xml version="1.0"?>
<document>
<title>Using a mouse</title>
<para>It's easy to use a mouse. Just roll it
around and click the buttons.</para>
</document>]]></programlisting>
</example>
<example>
<title>Simple XSL stylesheet</title>
<programlisting><![CDATA[<?xml version='1.0'?>
<xsl:stylesheet
          xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version='1.0'>
<xsl:output method="html"/>

<xsl:template match="document">
  <HTML><HEAD><TITLE>
    <xsl:value-of select="./title"/>
  </TITLE>
  </HEAD>
  <BODY>
    <xsl:apply-templates/>
  </BODY>
  </HTML>
</xsl:template>

<xsl:template match="title">
  <H1><xsl:apply-templates/></H1>
</xsl:template>

<xsl:template match="para">
  <P><xsl:apply-templates/></P>
</xsl:template>

</xsl:stylesheet>
]]></programlisting>
</example>
<example>
<title>HTML output</title>
<programlisting><![CDATA[<HTML>
<HEAD>
<TITLE>Using a mouse</TITLE>
</HEAD>
<BODY>
<H1>Using a mouse</H1>
<P>It's easy to use a mouse. Just roll it
around and click the buttons.</P>
</BODY>
</HTML>
]]></programlisting>
</example>
</section>
<section>
<title>XSL processing model</title>
<para>XSL is a template language, not a procedural
language. That means a stylesheet specifies a sample of the
output, not a sequence of programming steps to generate it.
A stylesheet consists of a mixture of output samples with
instructions of what to put in each sample. Each bit of
output sample and instructions is called
a  <emphasis>template</emphasis>.</para>
<para>In general, you write a template for each element
type in your document. That lets you concentrate on
handling just one element at a time, and keeps a stylesheet
modular. The power of XSL comes from processing the
templates recursively. That is, each template handles the
processing of its own element, and then calls other
templates to process its children, and so on. Since an &XML;
document is always a single root element at the top level
that contains all of the nested descendent elements, the
XSL templates also start at the top and work their way down
through the hierarchy of elements.</para>
<para>Take the
DocBook <sgmltag class="element">&lt;para&gt;</sgmltag> paragraph element as
an example. To convert this to HTML, you want to wrap the
paragraph content with the HTML
tags <sgmltag class="starttag">p</sgmltag> and <sgmltag class="endtag">/p</sgmltag>.
But a DocBook <sgmltag class="element">&lt;para&gt;</sgmltag>  can contain
any number of in-line DocBook elements marking up the text.
Fortunately, you can let other templates take care of those
elements, so your XSL template
for <sgmltag class="element">&lt;para&gt;</sgmltag> can be quite
simple:</para>
<programlisting><![CDATA[<xsl:template match="para">
  <p>
    <xsl:apply-templates/>
  </p>
</xsl:template>
]]></programlisting>
<para>The <sgmltag class="element">&lt;xsl:template&gt;</sgmltag> element
starts a new template, and
its <sgmltag class="attribute">match</sgmltag> attribute indicates where to
apply the template, in this case to
any <sgmltag class="element">&lt;para&gt;</sgmltag> elements. The template
says to output a literal <sgmltag class="starttag">p</sgmltag> string
and then execute
the <sgmltag class="element">&lt;xsl:apply-templates/&gt;</sgmltag> instruction.
This tells the XSL processor to look among all the
templates in the stylesheet for any that should be applied
to the content of the paragraph. If each template in the
stylesheet includes
an <sgmltag class="element">&lt;xsl:apply-templates/&gt;</sgmltag> instruction,
then all descendents will eventually be processed. When it
is through recursively applying templates to the paragraph
content, it outputs the <sgmltag class="endtag">/p</sgmltag> closing
tag.</para>
<section>
<title>Context is important</title>
<para>Since you aren't writing a linear procedure to
process your document, the context of where and how to
apply each modular template is important.
The <sgmltag class="attribute">match</sgmltag> attribute
of <sgmltag class="element">&lt;xsl:template&gt;</sgmltag> provides that
context for most templates. There is an entire expression
language, XPath, for identifying what parts of your
document should be handled by each template. The simplest
context is just an element name, as in the example above.
But you can also specify elements as children of other
elements, elements with certain attribute values, the first
or last elements in a sequence, and so on. Here is how the
DocBook <sgmltag class="element">&lt;formalpara&gt;</sgmltag> element is
handled:</para>
<programlisting><![CDATA[<xsl:template match="formalpara">
  <p>
    <xsl:apply-templates/>
  </p>
</xsl:template>

<xsl:template match="formalpara/title">
  <b><xsl:apply-templates/></b>
  <xsl:text> </xsl:text>
</xsl:template>

<xsl:template match="formalpara/para">
  <xsl:apply-templates/>
</xsl:template>
]]></programlisting>
<para>There are three templates defined, one for
the <sgmltag class="element">&lt;formalpara&gt;</sgmltag> element itself,
 and one for each of its children elements. The <sgmltag class="attribute">match</sgmltag> attribute
value <literal>formalpara/title</literal>    in the second
template is an XPath expression indicating
a <sgmltag class="element">&lt;title&gt;</sgmltag> element that is an
immediate child of
a <sgmltag class="element">&lt;formalpara&gt;</sgmltag> element. This
distinguishes such titles from
other <sgmltag class="element">&lt;title&gt;</sgmltag> elements used in
DocBook. XPath expressions are the key to controlling how
your templates are applied.</para>
<para>In general, the XSL processor has internal rules that
apply templates that are more specific before templates
that are less specific. That lets you control the details,
but also provides a fallback mechanism to a less specific
template when you don't supply the full context for every
combination of elements. This feature is illustrated by the
third template, for <literal>formalpara/para</literal>. By
including this template, the stylesheet processes a <sgmltag class="element">&lt;para&gt;</sgmltag> within <sgmltag class="element">&lt;formalpara&gt;</sgmltag> in
a special way, in this case by not outputting the HTML <sgmltag class="element">&lt;p&gt;</sgmltag> tags already output by its parent. If this template had not been included, then the processor would have fallen back to the template
specified by <sgmltag class="attribute">match="para"</sgmltag> described
above, which would have output a second set of <sgmltag class="element">&lt;p&gt;</sgmltag> tags.</para>
<para>You can also control template context with
XSL <emphasis>modes</emphasis>, which are used extensively
in the DocBook stylesheets. Modes let you process the same
input more than once in different ways.
A <sgmltag class="attribute">mode</sgmltag> attribute in
an <sgmltag class="element">&lt;xsl:template&gt;</sgmltag> definition adds a
specific mode name to that template. When the same mode
name is used
in <sgmltag class="element">&lt;xsl:apply-templates/&gt;</sgmltag>, it acts
as a filter to narrow the selection of templates to only
those selected by
the <sgmltag class="attribute">match</sgmltag> expression <emphasis>and</emphasis> that
have that mode name. This lets you define two different
templates for the same element match that are applied under
different contexts. For example, there are two templates
defined for
DocBook <sgmltag class="element">&lt;listitem&gt;</sgmltag>  elements:</para>
<programlisting><![CDATA[<xsl:template match="listitem">
  <li><xsl:apply-templates/></li>
</xsl:template>

<xsl:template match="listitem" mode="xref">
  <xsl:number format="1"/>
</xsl:template>
]]></programlisting>
<para>The first template is for the normal list item
context where you want to output the
HTML <sgmltag class="element">&lt;li&gt;</sgmltag> tags. The second template
is called with <sgmltag class="element">&lt;xsl:apply-templates
select="$target" mode="xref"/&gt;</sgmltag> in the context
of processing <sgmltag class="element">&lt;xref&gt;</sgmltag> elements. In
this case the <sgmltag class="attribute">select</sgmltag> attribute locates
the ID of the specific list item and
the <sgmltag class="attribute">mode</sgmltag> attribute selects the second
template, whose effect is to output its item number when it
is in an ordered list. Because there are many such special
needs when
processing <sgmltag class="element">&lt;xref&gt;</sgmltag> elements, it is
convenient to define a mode name <literal>xref</literal> to
handle them all. Keep in mind that mode settings
do <emphasis>not</emphasis> automatically get passed down to
other templates
through <sgmltag class="element">&lt;xsl:apply-templates/&gt;</sgmltag>.</para>
</section>
<section>
<title>Programming features</title>
<para>Although XSL is template-driven, it also has some
features of traditional programming languages. Here are
some examples from the DocBook stylesheets. </para>
<programlisting><lineannotation>Assign a value to a variable:</lineannotation>
<![CDATA[<xsl:variable name="refelem" select="name($target)"/>
]]>
<lineannotation>If statement:</lineannotation>
<![CDATA[<xsl:if test="$show.comments">
    <i><xsl:call-template name="inline.charseq"/></i>
</xsl:if>
]]>
<lineannotation>Case statement:</lineannotation>
<![CDATA[<xsl:choose>
    <xsl:when test="@columns">
        <xsl:value-of select="@columns"/>
    </xsl:when>
    <xsl:otherwise>1</xsl:otherwise>
</xsl:choose>
]]>
<lineannotation>Call a template by name like a subroutine, passing parameter values and accepting a return value:</lineannotation>
<![CDATA[<xsl:call-template name="xref.xreflabel">
   <xsl:with-param name="target" select="$target"/>
</xsl:call-template>
]]></programlisting>
<para>However, you can't always use these constructs as you
do in other programming languages. Variables in particular
have very different behavior.</para>
<section>
<title>Using variables and parameters</title>
<para>XSL provides two elements that let you assign a value
to a
name: <sgmltag class="element">&lt;xsl:variable&gt;</sgmltag> and <sgmltag class="element">&lt;xsl:param&gt;</sgmltag>.
These share the same name space and syntax for assigning
names and values. Both can be referred to using
the <literal>$name</literal> syntax. The main difference
between these two elements is that a param's value acts as
a default value that can be overridden when a template is
called using
a <sgmltag class="element">&lt;xsl:with-param&gt;</sgmltag> element as in the
last example above.</para>
<para>Here are two examples from DocBook:</para>
<programlisting><![CDATA[<xsl:param name="cols">1</xsl:param>
<xsl:variable name="segnum" select="position()"/>
]]></programlisting>
<para>In both elements, the name of the parameter or
variable is specified with
the <sgmltag class="attribute">name</sgmltag> attribute. So the name of
the <sgmltag class="element">param</sgmltag> here
is <sgmltag class="attvalue">cols</sgmltag> and the name of
the <sgmltag class="element">variable</sgmltag> is <sgmltag class="attvalue">segnum</sgmltag>.
The value of either can be supplied in two ways. The value
of the first example is the text node "1" and is supplied
as the content of the element. The value of the second
example is supplied as the result of the expression in
its <sgmltag class="attribute">select</sgmltag> attribute, and the element
itself has no content.</para>
<para>The feature of XSL variables that is odd to new users
is that once you assign a value to a variable, you cannot
assign a new value within the same scope. Doing so will
generate an error. So variables are not used as dynamic
storage bins they way they are in other languages. They
hold a fixed value within their scope of application, and
then disappear when the scope is exited. This feature is a
result of the design of XSL, which is template-driven and
not procedural. This means there is no definite order of
processing, so you can't rely on the values of changing
variables. To use variables in XSL, you need to understand
how their scope is defined.</para>
<para>Variables defined outside of all templates are
considered global variables, and they are readable within
all templates. The value of a global variable is fixed, and
its global value can't be altered from within any template.
However, a template can create a local variable of the same
name and give it a different value. That local value
remains in effect only within the scope of the local
variable.</para>
<para>Variables defined within a template remain in effect
only within their permitted scope, which is defined as all
following siblings and their descendants. To understand
such a scope, you have to remember that XSL instructions
are true &XML; elements that are embedded in an &XML; family
hierarchy of XSL elements, often referred to as parents,
children, siblings, ancestors and descendants. Taking the
family analogy a step further, think of a variable
assignment as a piece of advice that you are allowed to
give to certain family members. You can give your advice
only to your younger siblings (those that follow you) and
their descendents. Your older siblings won't listen,
neither will your parents or any of your ancestors. To
stretch the analogy a bit, it is an error to try to give
different advice under the same name to the same group of
listeners (in other words, to redefine the variable). Keep
in mind that this family is not the elements of your
document, but just the XSL instructions in your stylesheet.
To help you keep track of such scopes in hand-written
stylesheets, it helps to indent nested XSL elements. Here
is an edited snippet from the DocBook stylesheet
file <filename>pi.xsl</filename> that illustrates different
scopes for two variables:</para>
<programlisting><![CDATA[
 1 <xsl:template name="dbhtml-attribute">
 2 ...
 3    <xsl:choose>
 4       <xsl:when test="$count>count($pis)">
 5          <!-- not found -->
 6       </xsl:when>
 7       <xsl:otherwise>
 8          <xsl:variable name="pi">
 9             <xsl:value-of select="$pis[$count]"/>
10          </xsl:variable>
11          <xsl:choose>
12             <xsl:when test="contains($pi,concat($attribute, '='))">
13                <xsl:variable name="rest" select="substring-after($pi,concat($attribute,'='))"/>
14                <xsl:variable name="quote" select="substring($rest,1,1)"/>
15                <xsl:value-of select="substring-before(substring($rest,2),$quote)"/>
16             </xsl:when>
17             <xsl:otherwise>
18             ...
19             </xsl:otherwise>
20          </xsl:choose>
21       </xsl:otherwise>
22    </xsl:choose>
23 </xsl:template>

]]></programlisting>
<para>The scope of the variable <varname>pi</varname> begins
on line 8 where it is defined in this template, and ends on
line 20 when its last sibling ends.<footnote><para>Technically, the scope extends to the end tag of the parent of the <sgmltag class="element">&lt;xsl:variable&gt;</sgmltag> element. That is effectively the last sibling.</para></footnote>     The scope of the
variable <varname>rest</varname> begins on line 13 and ends
on line 15. Fortunately, line 15 outputs an expression
using the value before it goes out of scope.</para>
<para>What happens when
an <sgmltag class="element">&lt;xsl:apply-templates/&gt;</sgmltag> element
is used within the scope of a local variable? Do the
templates that are applied to the document children get the
variable? The answer is no. The templates that are applied
are not actually within the scope of the variable. They
exist elsewhere in the stylesheet and are not following
siblings or their descendants. </para>
<para>To pass a value to another template, you pass a
parameter using
the <sgmltag class="element">&lt;xsl:with-param&gt;</sgmltag> element. This
parameter passing is usually done with calls to a specific
named template
using <sgmltag class="element">&lt;xsl:call-template&gt;</sgmltag>, although
it works
with <sgmltag class="element">&lt;xsl:apply-templates&gt;</sgmltag> too.
That's because the called template must be expecting the
parameter by defining it using
a <sgmltag class="element">&lt;xsl:param&gt;</sgmltag> element with the same
parameter name. Any passed parameters whose names are not
defined in the called template are ignored.</para>
<para>Here is an example of parameter passing
from <filename>docbook.xsl</filename>:</para>
<programlisting><![CDATA[<xsl:call-template name="head.content">
   <xsl:with-param name="node" select="$doc"/>
</xsl:call-template>
]]></programlisting>
<para>Here a template
named <literal>head.content</literal> is being called and
passed a parameter named <parameter>node</parameter> whose
content is the value of the <varname>$doc</varname> variable
in the current context. The top of that template looks like
this:</para>
<programlisting><![CDATA[<xsl:template name="head.content">
   <xsl:param name="node" select="."/>
]]></programlisting>
<para>The template is expecting the parameter because it
has a <sgmltag class="element">&lt;xsl:param&gt;</sgmltag> defined with the
same name. The value in this definition is the default
value. This would be the parameter value used in the
template if the template was called without passing that
parameter.</para>
</section>
</section>
<section>
<title>Generating HTML output.</title>
<para>You generate HTML from your DocBook &XML; files by
applying the HTML version of the stylesheets. This is done
by using the HTML driver
file <filename>docbook/html/docbook.xsl</filename> as your
stylesheet. That is the master stylesheet file that
uses <sgmltag class="element">&lt;xsl:include&gt;</sgmltag> to pull in the
component files it needs to assemble a complete stylesheet
for producing HTML. </para>
<para>The way the DocBook stylesheet generates HTML is to
apply templates that output a mix of text content and HTML
elements. Starting at the top level in the main
file <filename>docbook.xsl</filename>:</para>
<programlisting><![CDATA[<xsl:template match="/">
  <xsl:variable name="doc" select="*[1]"/>
  <html>
  <head>
    <xsl:call-template name="head.content">
      <xsl:with-param name="node" select="$doc"/>
    </xsl:call-template>
  </head>
  <body>
    <xsl:apply-templates/>
  </body>
  </html>
</xsl:template>
]]></programlisting>
<para>This template matches the root element of your input
document, and starts the process of recursively applying
templates. It first defines a variable
named <varname>doc</varname> and then outputs two literal
HTML elements <sgmltag class="element">&lt;html&gt;</sgmltag> and <sgmltag class="element">&lt;head&gt;</sgmltag>.
Then it calls a named
template <literal>head.content</literal> to process the
content of the HTML <sgmltag class="element">&lt;head&gt;</sgmltag>, closes
the <sgmltag class="element">&lt;head&gt;</sgmltag> and starts
the <sgmltag class="element">&lt;body&gt;</sgmltag>. There it
uses <sgmltag class="emptytag">&lt;xsl:apply-templates/&gt;</sgmltag> to
recursively process the entire input document. Then it just
closes out the HTML file.</para>
<para>Simple HTML elements can generated as literal
elements as shown here. But if the HTML being output
depends on the context, you need something more powerful to
select the element name and possibly add attributes and
their values. Here is a fragment
from <filename>sections.xsl</filename> that shows how a
heading tag is generated using
the <sgmltag class="element">&lt;xsl:element&gt;</sgmltag> and <sgmltag class="element">&lt;xsl:attribute&gt;</sgmltag> elements:</para>
<programlisting><![CDATA[
 1 <xsl:element name="h{$level}">
 2   <xsl:attribute name="class">title</xsl:attribute>
 3   <xsl:if test="$level<3">
 4     <xsl:attribute name="style">clear: all</xsl:attribute>
 5   </xsl:if>
 6   <a>
 7     <xsl:attribute name="name">
 8       <xsl:call-template name="object.id"/>
 9     </xsl:attribute>
10     <b><xsl:copy-of select="$title"/></b>
11   </a>
12 </xsl:element>
]]></programlisting>
<para>This whole example is generating a single HTML
heading element. Line 1 begins the HTML element definition
by identifying the name of the element. In this case, the
name is an expression that includes the
variable <parameter>$level</parameter> passed as a parameter to
this template. Thus a single template can
generate <sgmltag class="element">&lt;h1&gt;</sgmltag>, <sgmltag class="element">&lt;h2&gt;</sgmltag>,
etc. depending on the context in which it is called. Line 2
defines a <sgmltag class="attribute">class="title"</sgmltag> attribute that is
added to this element. Lines 3 to 5 add
a <sgmltag class="attribute">style="clear all"</sgmltag> attribute, but only
if the heading level is less than 3. Line 6 opens
an <sgmltag class="element">&lt;a&gt;</sgmltag> anchor element. Although this
looks like a literal output string, it is actually modified
by lines 7 to 9 that insert
the <sgmltag class="attribute">name</sgmltag> attribute into
the <sgmltag class="element">&lt;a&gt;</sgmltag> element. This illustrates
that XSL is managing output elements as active element
nodes, not just text strings. Line 10 outputs the text of
the heading title, also passed as a parameter to the
template, enclosed in HTML boldface tags. Line 11 closes
the anchor tag with the
literal <sgmltag class="endtag">/a</sgmltag> syntax, while line 12
closes the heading tag by closing the element definition.
Since the actual element name is a variable, it couldn't
use the literal syntax.</para>
<para>As you follow the sequence of nested templates
processing elements, you might be wondering how the
ordinary text of your input document gets to the output. In
the file <filename>docbook.xsl</filename> you will find
this template that handles any text not processed by any
other template:</para>
<programlisting><![CDATA[<xsl:template match="text()">
  <xsl:value-of select="."/>
</xsl:template>
]]></programlisting>
<para>This template's body consists of the "value" of the text node,
which is just its text. In general, all XSL processors have
some built-in templates to handle any content for which
your stylesheet doesn't supply a matching template. This
template serves the same function but appears explicitly in
the stylesheet.</para>
</section>
<section>
<title>Generating formatting objects.</title>
<para>You generate formatting objects from your DocBook &XML;
files by applying the fo version of the stylesheets. This
is done by using the fo driver
file <filename>docbook/fo/docbook.xsl</filename> as your
stylesheet. That is the master stylesheet file that
uses <sgmltag class="element">&lt;xsl:include&gt;</sgmltag> to pull in the
component files it needs to assemble a complete stylesheet
for producing formatting objects. Generating a formatting
objects file is only half the process of producing typeset
output. You also need a formatting object processor such as
the Apache &XML; Project's FOP as described in an earlier
section.</para>
<para>The DocBook fo stylesheet works in a similar manner
to the HTML stylesheet. Instead of outputting HTML tags, it
outputs text marked up
with <sgmltag class="element">&lt;fo:<replaceable>something</replaceable>&gt;</sgmltag> tags.
For example, to indicate that some text should be kept
in-line and typeset with a monospace font, it might look
like this:</para>
<programlisting><![CDATA[<fo:inline-sequence font-family="monospace">/usr/man</fo:inline-sequence>]]></programlisting>
<para>The templates
in <filename>docbook/fo/inline.xsl</filename>      that produce
this output for a
DocBook   <sgmltag class="element">&lt;filename&gt;</sgmltag>     element look
like this:</para>
<programlisting><![CDATA[<xsl:template match="filename">
  <xsl:call-template name="inline.monoseq"/>
</xsl:template>

<xsl:template name="inline.monoseq">
  <xsl:param name="content">
    <xsl:apply-templates/>
  </xsl:param>
  <fo:inline-sequence font-family="monospace">
    <xsl:copy-of select="$content"/>
  </fo:inline-sequence>
</xsl:template>
]]></programlisting>
<para>There are dozens of fo tags and attributes specified
in the XSL standard. It is beyond the scope of this
document to cover how all of them are used in the DocBook
stylesheets. Fortunately, this is only an intermediate
format that you probably won't have to deal with very much
directly unless you are writing your own
stylesheets.</para>
</section>
</section>
<section>
<title>Customizing DocBook XSL stylesheets</title>
<para>The DocBook XSL stylesheets are written in a modular
fashion. Each of the HTML and FO stylesheets starts with a
driver file that assembles a collection of component files
into a complete stylesheet. This modular design puts similar things together into smaller files that are easier to write and maintain than one big stylesheet. The modular stylesheet files
are distributed among four directories:</para>

<variablelist>
<varlistentry><term>common/</term>
<listitem>
<para>contains code common to both stylesheets, including localization data
</para>
</listitem>
</varlistentry>
<varlistentry><term>fo/</term>
<listitem>
<para>a stylesheet that produces XSL FO result trees
</para>
</listitem>
</varlistentry>
<varlistentry><term>html/</term>
<listitem>
<para>a stylesheet that produces HTML/XHTML result trees
</para>
</listitem>
</varlistentry>
<varlistentry><term>lib/</term>
<listitem>
<para>contains schema-independent functions
</para>
</listitem>
</varlistentry>
</variablelist>

<para>The driver files for each of HTML and FO stylesheets
are <filename>html/docbook.xsl</filename> and <filename>fo/docbook.xsl</filename>,
respectively. A driver file consists mostly of a bunch
of <sgmltag class="element">&lt;xsl:include&gt;</sgmltag> instructions to
pull in the component templates, and then defines some
top-level templates. For example:</para>
<programlisting><![CDATA[<xsl:include href="../VERSION"/>
<xsl:include href="../lib/lib.xsl"/>
<xsl:include href="../common/l10n.xsl"/>
<xsl:include href="../common/common.xsl"/>
<xsl:include href="autotoc.xsl"/>
<xsl:include href="lists.xsl"/>
<xsl:include href="callout.xsl"/>
...
<xsl:include href="param.xsl"/>
<xsl:include href="pi.xsl"/>
]]></programlisting>
<para>The first four modules are shared with the FO
stylesheet and are referenced using relative pathnames to
the common directories. Then the long list of component
stylesheets starts. Pathnames in include statements are
always taken to be relative to the including file. Each
included file must be a valid XSL stylesheet, which means
its root element must
be <sgmltag class="element">&lt;xsl:stylesheet&gt;</sgmltag>.</para>
<section>
<title>Stylesheet inclusion vs. importing</title>
<para>XSL actually provides two inclusion
mechanisms: <sgmltag class="element">&lt;xsl:include&gt;</sgmltag> and <sgmltag class="element">&lt;xsl:import&gt;</sgmltag>.
Of the two, <sgmltag class="element">&lt;xsl:include&gt;</sgmltag> is
the simpler. It treats the included content as if it were
actually typed into the file at that point, and doesn't
give it any more or less precedence relative to the
surrounding text. It is best used when assembling
dissimilar templates that don't overlap what they match.
The DocBook driver files use this instruction to assemble a
set of modules into a stylesheet.</para>
<para>In contrast, <sgmltag class="element">&lt;xsl:import&gt;</sgmltag> lets
you manage the precedence of templates and variables. It is
the preferred mode of customizing another stylesheet because
it lets you override definitions in the distributed
stylesheet with your own, without altering the distribution
files at all. You simply import the whole stylesheet and
add whatever changes you want.</para>
<para>The precedence rules for import are detailed and
rigorously defined in the XSL standard. The basic rule is
that any templates and variables in the importing
stylesheet have precedence over equivalent templates and
variables in the imported stylesheet. Think of the imported stylesheet elements as a fallback collection, to be used only if a match is not found in the current stylesheet. You can customize the templates you want to change in your stylesheet file, and let the imported stylesheet handle the rest.</para>
<note>
<para>Customizing a DocBook XSL stylesheet is the opposite
of customizing a DocBook DTD. When you customize a DocBook
DTD, the rules of &XML; and &SGML; dictate that
the <emphasis>first</emphasis> of any duplicate declarations
wins. Any subsequent declarations of the same element or
entity are ignored. The architecture of the DTD provides
slots for inserting your own custom declarations early
enough in the DTD for them to override the standard
declarations. In contrast, customizing an XSL stylesheet is
simpler because your definitions have precedence over imported ones.</para>
</note>
<para>You can carry modularization to deeper levels because
module files can also include or import other modules.
You'll need to be careful to maintain the precedence that
you want as the modules get rolled up into a complete
stylesheet. </para>
</section>
<section>
<title>Customizing
with <sgmltag class="element">&lt;xsl:import&gt;</sgmltag></title>
<para>There is currently one example of customizing
with <sgmltag class="element">&lt;xsl:import&gt;</sgmltag> in the HTML
version of the DocBook stylesheets.
The <filename>xtchunk.xsl</filename> stylesheet modifies the
HTML processing to output many smaller HTML files rather
than a single large file per input document. It uses XSL
extensions defined only in the XSL
processor <command>XT</command>. In the driver
file <filename>xtchunk.xsl</filename>, the first instruction
is <sgmltag class="element">&lt;xsl:import
href="docbook.xsl"/&gt;</sgmltag>. That instruction imports
the original driver file, which in turn uses
many <sgmltag class="element">&lt;xsl:include&gt;</sgmltag> instructions to
include all the modules. That single import instruction
gives the new stylesheet the complete set of DocBook
templates to start with.</para>
<para>After the
import, <filename>xtchunk.xsl</filename> redefines some of
the templates and adds some new ones. Here is one example
of a redefined template:</para>
<programlisting><lineannotation>Original template in autotoc.xsl</lineannotation>
<![CDATA[<xsl:template name="href.target">
  <xsl:param name="object" select="."/>
  <xsl:text>#</xsl:text>
  <xsl:call-template name="object.id">
    <xsl:with-param name="object" select="$object"/>
  </xsl:call-template>
</xsl:template>]]>

<lineannotation>New template in xtchunk.xsl</lineannotation>
<![CDATA[<xsl:template name="href.target">
  <xsl:param name="object" select="."/>
  <xsl:variable name="ischunk">
    <xsl:call-template name="chunk">
      <xsl:with-param name="node" select="$object"/>
    </xsl:call-template>
  </xsl:variable>

  <xsl:apply-templates mode="chunk-filename" select="$object"/>

  <xsl:if test="$ischunk='0'">
    <xsl:text>#</xsl:text>
    <xsl:call-template name="object.id">
      <xsl:with-param name="object" select="$object"/>
    </xsl:call-template>
  </xsl:if>
</xsl:template>]]>
</programlisting>
<para>The new template handles the more complex processing
of HREFs when the output is split into many HTML files.
Where the old template could simply
output <literal>#<replaceable>object.id</replaceable></literal>,
the new one outputs <literal><replaceable>filename</replaceable>#<replaceable>object.id</replaceable></literal>.</para>
</section>
<section>
<title>Setting stylesheet variables</title>
<para>You may not have to define any new templates,
however. The DocBook stylesheets are parameterized using
XSL variables rather than hard-coded values for many of the
formatting features. Since
the <sgmltag class="element">&lt;xsl:import&gt;</sgmltag> mechanism also
lets you redefine global variables, this gives you an easy
way to customize many features of the DocBook
stylesheets. Over time, more features will be parameterized to permit customization. If you find hardcoded values in the stylesheets that would be useful to customize, please let the maintainer know.</para>
<para>Near the end of the list of includes in the main
DocBook driver file is the
instruction <sgmltag class="element">&lt;xsl:include
href="param.xsl"/&gt;</sgmltag>.
The <filename>param.xsl</filename> file is the most
important module for customizing a DocBook XSL stylesheet.
This module contains no templates, only definitions of
stylesheet variables. Since these variables are defined
outside of any template, they are global variables and
apply to the entire stylesheet. By redefining these
variables in an importing stylesheet, you can change the
behavior of the stylesheet.</para>
<para>To create a customized DocBook stylesheet, you simply
create a new stylesheet file such
as <filename>mystyle.xsl</filename> that imports the standard
stylesheet and adds your own new variable definitions. Here
is an example of a complete custom stylesheet that changes
the depth of sections listed in the table of contents from
two to three:</para>
<programlisting><![CDATA[<?xml version='1.0'?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                version='1.0'
                xmlns="http://www.w3.org/TR/xhtml1/transitional"
                exclude-result-prefixes="#default">

<xsl:import href="docbook.xsl"/>

<xsl:variable name="toc.section.depth">3</xsl:variable>
<!-- Add other variable definitions here -->

</xsl:stylesheet>
]]></programlisting>
<para>Following the opening stylesheet element are the
import instruction and one variable definition. The
variable <varname>toc.section.depth</varname> was defined
in <filename>param.xsl</filename> with value "2", and here
it is defined as "3". Since the importing stylesheet takes
precedence, this new value is used. Thus documents
processed with <filename>mystyle.xsl</filename> instead
of <filename>docbook.xsl</filename> will have three levels
of sections in the tables of contents, and all other
processing will be the same.</para>
<para>Use the list of variables
in <filename>param.xsl</filename> as your guide for creating
a custom stylesheet. If the changes you want are controlled
by a variable there, then customizing is easy. </para>

</section>
<section>
<title>Writing your own templates</title>
<para>If the changes you want are more extensive than what
is supported by variables, you can write new templates. You
can put your new templates directly in your importing
stylesheet, or you can modularize your importing stylesheet
as well. You can write your own stylesheet module
containing a collection of templates for processing lists,
for example, and put them in a file
named <filename>mylists.xsl</filename>. Then your importing
stylesheet can pull in your list templates with
a <sgmltag class="element">&lt;xsl:include
href="mylists.xsl"/&gt;</sgmltag> instruction. Since your
included template definitions appear after the main import
instruction, your templates will take precedence.</para>
<para>You'll need to make sure your new templates are
compatible with the remaining modules, which means:</para>
<itemizedlist>
<listitem>
<para>Any named templates should use the same name so
calling templates in other modules can find them.</para>
</listitem>
<listitem>
<para>Your template set should process the same elements
matched by templates in the original module, to ensure
complete coverage.</para>
</listitem>
<listitem>
<para>Include the same set
of <sgmltag class="element">&lt;xsl:param&gt;</sgmltag> elements in each
template to interface properly with any calling templates,
although you can set different values for your
parameters.</para>
</listitem>
<listitem>
<para>Any templates that are used like subroutines to
return a value should return the same data type.</para>
</listitem>
</itemizedlist>
</section>
<section>
<title>Writing your own driver</title>
<para>Another approach to customizing the stylesheets is to
write your own driver file. Instead of
using <sgmltag class="element">&lt;xsl:import
href="docbook.xsl"/&gt;</sgmltag>, you copy that file to a
new name and rewrite any of
the <sgmltag class="element">&lt;xsl:include/&gt;</sgmltag> instructions to
assemble a custom collection of stylesheet modules. One
reason to do this is to speed up processing by reducing the
size of the stylesheet. If you are using a customized
DocBook DTD that omits many elements you never use, you
might be able to omit those modules of the
stylesheet.</para>
</section>
<section>
<title>Localization</title>
<para>The DocBook stylesheets include features for
localizing generated text, that is, printing any generated
text in a language other than the default English. In
general, the stylesheets will switch to the language
identified by a <sgmltag class="attribute">lang</sgmltag> attribute when
processing elements in your documents. If your documents
use the <sgmltag class="attribute">lang</sgmltag> attribute, then you don't
need to customize the stylesheets at all for
localization.</para>
<para>As far as the stylesheets go,
a <sgmltag class="attribute">lang</sgmltag> attribute is inherited by the
descendents of a document element. The stylesheet searches
for a <sgmltag class="attribute">lang</sgmltag> attribute using this XPath
expression:</para>
<programlisting><![CDATA[<xsl:variable name="lang-attr"
         select="($target/ancestor-or-self::*/@lang
                  |$target/ancestor-or-self::*/@xml:lang)[last()]"/>]]></programlisting>

<para>This locates the attribute on the current element or
its most recent ancestor. Thus
a <sgmltag class="attribute">lang</sgmltag> attribute is in effect for an
element and all of its descendents, unless it is reset in
one of those descendents. If you define it in only your
document root element, then it applies to the whole
document:</para>
<programlisting><![CDATA[<?xml version="1.0"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.0//EN" "docbook.dtd">
<book lang="fr">
...
</book>]]></programlisting>
<para>When text is being generated, the stylesheet checks
the most recent <sgmltag class="attribute">lang</sgmltag> attribute and looks
up the generated text strings for that language in a
localization &XML; file. These are located in
the <filename>common</filename> directory of the
stylesheets, one file per language. Here is the top of the
file <filename>fr.xml</filename>:</para>
<programlisting><![CDATA[<localization language="fr">

<gentext key="abstract"                 text="R]]>&amp;#x00E9;sum&amp;#x00E9;<![CDATA["/>
<gentext key="answer"                   text="R:"/>
<gentext key="appendix"                 text="Annexe"/>
<gentext key="article"                  text="Article"/>
<gentext key="bibliography"             text="Bibliographie"/>
...
]]></programlisting>
<para>The stylesheet templates use the gentext key names,
and then the stylesheet looks up the associated text value
when the document is processed with that lang setting. The
file <filename>l10n.xml</filename> (note
the <filename>.xml</filename> suffix) lists the filenames of
all the supported languages.</para>
<para>You can also create a custom stylesheet that sets the
language. That might be useful if your documents don't make
appropriate use of the <sgmltag class="attribute">lang</sgmltag> attribute.
The module <filename>l10n.xsl</filename> defines two global
variables that can be overridden with an importing
stylesheet as described above. Here are their default
definitions:</para>
<programlisting><![CDATA[<xsl:variable name="l10n.gentext.language"></xsl:variable>
<xsl:variable name="l10n.gentext.default.language">en</xsl:variable>
]]></programlisting>
<para>The first one sets the language for all elements,
regardless of an element's <sgmltag class="attribute">lang</sgmltag> attribute
value. The second just sets a default language for any
elements that haven't got a <sgmltag class="attribute">lang</sgmltag> setting
of their own (or their ancestors).</para>
</section>
</section>
</section>
</chapter>

<!--
Local Variables:
mode: xml
sgml-parent-document: ("book.xml" "chapter")
End:
-->
<chapter id="app-customizing">
<?dbhtml filename="ch05.html"?>
<chapterinfo>
<pubdate>$Date: 2009-01-05 12:25:13 +0300 (Пн, 05 янв 2009) $</pubdate>
<releaseinfo>$Revision: 8201 $</releaseinfo>
</chapterinfo>
<title>Customizing DocBook</title> 
<para>
<indexterm id="customDocBookch05" class="startofrange"><primary>customizing</primary>
  <secondary>DocBook DTD</secondary></indexterm>
<indexterm id="DocBookcustomch05" class="startofrange"><primary>DocBook DTD</primary>
  <secondary>customizing</secondary></indexterm>

For the applications you have in mind, DocBook <quote>out of the
box</quote> may not be exactly what you need. Perhaps you need
additional inline elements or perhaps you want to remove elements that
you never want your authors to use. By design, DocBook makes this sort
of customization easy.
</para>
<para>
<indexterm><primary>attributes</primary>
  <secondary>DocBook DTD, customizing</secondary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>DocBook DTD, customizing</secondary></indexterm>

This chapter explains how to make your own <firstterm>customization
layer</firstterm>. You might do this in order to:
<itemizedlist>
<listitem><para>Add new elements</para></listitem>
<listitem><para>Remove elements</para></listitem>
<listitem><para>Change the structure of existing elements</para></listitem>
<listitem><para>Add new attributes</para></listitem>
<listitem><para>Remove attributes</para></listitem>
<listitem><para>Broaden the range of values allowed in an attribute</para></listitem>
<listitem><para>Narrow the range of values in an attribute to a specific list or a fixed value</para></listitem>
</itemizedlist>
</para>
<para>
<indexterm><primary>extensions, DocBook DTD</primary></indexterm>
<indexterm><primary>environment</primary>
  <secondary>DocBook extensions, affecting</secondary></indexterm>

You can use customization layers to extend DocBook or subset
it. Creating a &DTD; that is a strict subset of DocBook means that all
of your instances are still completely valid DocBook instances, which
may be important to your tools and stylesheets, and to other people
with whom you share documents.  An <firstterm>extension</firstterm> adds new
structures, or changes the &DTD; in a way that is not compatible with
DocBook. Extensions can be very useful, but might have a great impact
on your environment.
</para>
<para>
Customization layers can be as small as restricting an attribute value
or as large as adding an entirely different hierarchy on top of the
inline elements.
</para>
<sect1 id="ch05-shouldi"><title>Should You Do This?</title>
<para>
<indexterm><primary>stylesheets</primary>
  <secondary>DTD extension, effects</secondary></indexterm>

Changing a &DTD; can have a wide-ranging impact on the tools and
stylesheets that you use. It can have an impact on your authors and on
your legacy documents.  This is especially true if you make an
extension. If you rely on your support staff to install and maintain
your authoring and publishing tools, check with them before you invest
a lot of time modifying the &DTD;. There may be additional issues that
are outside your immediate control. Proceed with caution.
</para>
<para>
That said, DocBook is designed to be easy to modify. This chapter
assumes that you are comfortable with &SGML;/&XML; &DTD; syntax, but
the examples presented should be a good springboard to learning the
syntax if it's not already familiar to you.
</para>
</sect1>
<sect1 id="s-notdocbook"><title>If You Change DocBook, It's Not DocBook Anymore!</title>
<para>
<indexterm>
  <primary>public identifiers</primary>
  <secondary>DocBook DTD</secondary>
  <tertiary>altering</tertiary>
</indexterm>The DocBook &DTD; is usually referenced by its public identifier:
</para>
<screen>  -//OASIS//DTD DocBook V3.1//EN</screen>
<para>
Previous versions of DocBook, V3.0 and the V2 variants, used the owner
identifier Davenport, rather than OASIS.
</para>
<para>
If you make any changes to the structure of the &DTD;, it is
imperative that you alter the public identifier that you use for the
&DTD; and the modules you changed.  The license agreement under which
DocBook is distributed gives you complete freedom to change, modify,
reuse, and generally hack the &DTD; in any way you want, except that
you must not call your alterations <quote>DocBook.</quote>
</para>
<para>
<indexterm><primary>owner-identifiers</primary>
  <secondary>changing (DocBook customization)</secondary></indexterm>
<indexterm><primary>description, changing (DocBook customization)</primary></indexterm>

You should change both the owner identifier and the description. The
original DocBook formal public identifiers use the following syntax:
<screen>
-//OASIS//<replaceable>text-class</replaceable> DocBook <replaceable>description</replaceable> V<replaceable>version</replaceable>//EN
</screen>
</para>
<para>
Your own formal public identifiers should use the following syntax in
order to record their DocBook derivation:
<screen>
-//<replaceable>your-owner-ID</replaceable>//<replaceable>text-class</replaceable> DocBook V<replaceable>version</replaceable>-Based <optional>Subset|Extension|Variant</optional> <replaceable>your-descrip-and-version</replaceable>//<replaceable>lang</replaceable>
</screen>
</para>
<para>For example:
<screen>
-//O'Reilly//DTD DocBook V3.0-Based Subset V1.1//EN
</screen>
</para>
<para>
<indexterm><primary>subsets (DocBook DTD)</primary></indexterm>
If your &DTD; is a proper subset, you can advertise this status by
using the <literal>Subset</literal> keyword in the description. If
your &DTD; contains any markup model extensions, you can advertise
this status by using the <literal>Extension</literal> keyword. If
you'd rather not characterize your variant specifically as a subset or
an extension, you can leave out this field entirely, or, if you
prefer, use the <literal>Variant</literal> keyword.
</para>
<para>
<indexterm><primary>dbgenent.mod file</primary></indexterm>
<indexterm><primary>public identifiers</primary>
  <secondary>dbgenent.mod file, changing</secondary></indexterm>

There is only one file that you may change without changing the public
identifier: <filename>dbgenent.mod</filename>. And you can add only
entity and notation declarations to that file. (You can add anything
you want, naturally, but if you add anything other than entity and
notation declarations, you must change the public identifier!)
</para>
</sect1>
<sect1 id="ch05-layers"><title>Customization Layers</title>
<para>
<indexterm><primary>customizing</primary>
  <secondary>DocBook DTD</secondary>
    <tertiary>customization layers</tertiary></indexterm>
<indexterm><primary>layers, customization (DocBook DTD)</primary></indexterm>
<indexterm><primary>parameter entities</primary>
  <secondary>customization layers</secondary></indexterm>
<indexterm><primary>declarations</primary>
  <secondary>SGML and XML DTDs</secondary></indexterm>

&SGML; and &XML; &DTD;s are really just collections of
declarations. These declarations are stored in one or more files. A
complete &DTD; is formed by combining these files together
logically. Parameter entities are used for this purpose. Consider the
following fragment:
</para>
<screen>
&lt;!ENTITY % dbpool SYSTEM "dbpool.mod"> <co id="cl-dbpooldcl"/>
&lt;!ENTITY % dbhier SYSTEM "dbhier.mod"> <co id="cl-dbhierdcl"/>
%dbpool;                               <co id="cl-dbpooluse"/>
%dbhier;                               <co id="cl-dbhieruse"/>
</screen>
<calloutlist>
<callout arearefs="cl-dbpooldcl"><para>This line declares the
parameter entity <literal>dbpool</literal> and associates it with the
file <filename> dbpool.mod</filename>.</para>
</callout>
<callout arearefs="cl-dbhierdcl"><para>This line declares the
parameter entity <literal>dbhier</literal> and associates it with the
file <filename> dbhier.mod</filename>.</para>
</callout>
<callout arearefs="cl-dbpooluse"><para>This line references <literal>
dbpool</literal>, which loads the file <filename>dbpool.mod</filename>
and inserts its content here.</para>
</callout>
<callout arearefs="cl-dbhieruse"><para>Similarly, this line loads
<filename> dbhier.mod</filename>.</para> </callout></calloutlist>
<para>
<indexterm><primary>parsing</primary>
  <secondary>DTDs, entity declarations (repeated)</secondary></indexterm>

It is an important feature of &DTD; parsing that entity
declarations can be repeated. If an entity is declared more than once,
then the <emphasis> first</emphasis> declaration is used. Given this
fragment:
</para>
<screen>
&lt;!ENTITY foo "Lenny">
&lt;!ENTITY foo "Norm">
</screen>
<para>
The replacement text for <sgmltag class="genentity">foo</sgmltag> is
<quote>Lenny.</quote>
</para>
<para>
<indexterm><primary>modules</primary>
  <secondary>DTDs, customizing</secondary></indexterm>
<indexterm><primary>parameter entities</primary>
  <secondary>DTD modules, referencing</secondary></indexterm>

These two notions, that you can break a &DTD; into modules referenced
with parameter entities and that the first entity declaration is the
one that counts, are used to build <quote>customization layers.</quote>
With customization layers you can write a &DTD; that references some
or all of DocBook, but adds your own modifications. Modifying the
&DTD; this way means that you never have to edit the DocBook modules
directly, which is a tremendous boon to maintaining your modules. When
the next release of DocBook comes out, you usually only have to make
changes to your customization layer and your modification will be back
in sync with the new version.
</para>
<para>
Customization layers work particularly well in DocBook because the
base &DTD; makes extensive use of parameter entities that can be
redefined.
</para>
</sect1>
<sect1 id="s-dbstruct"><title>Understanding DocBook Structure</title>
<para>
DocBook is a large and, at first glance, fairly complex &DTD;. Much of
the apparent complexity is caused by the prolific use of parameter
entities.  This was an intentional choice on the part of the
maintainers, who traded <quote>raw readability</quote> for customizability.
This section provides a general overview of the structure of the
&DTD;. After you understand it, DocBook will probably seem much less
complicated.
</para>
<sect2 id="db-modules"><title>DocBook Modules</title>
<para>
<indexterm><primary>modules</primary>
  <secondary>DocBook</secondary></indexterm>
<indexterm><primary>DocBook DTD</primary>
  <secondary>modules</secondary></indexterm>

DocBook is composed of seven primary modules. These modules decompose
the &DTD; into large, related chunks. Most modifications are
restricted to a single chunk.
</para>
<para>
<xref linkend="fg-docbook-flowchart"/> shows the module structure of
DocBook as a flowchart.
</para>
<figure id="fg-docbook-flowchart">
<title>Structure of the DocBook &DTD;</title>
<graphic fileref="figures/docbook-module-flowchart.png"></graphic>
</figure>
<para>
The modules are:
</para>
<variablelist>
<varlistentry><term><filename>docbook.dtd</filename></term>
<listitem>
<para>
<indexterm><primary>driver files</primary></indexterm>

The main driver file. This module declares and references the
other top-level modules.
</para>
</listitem>
</varlistentry>
<varlistentry><term><filename>dbhier.mod</filename></term>
<listitem>
<para>
<indexterm><primary>dbhier.mod file</primary></indexterm>
<indexterm><primary>hierarchical structure</primary>
  <secondary>DocBook DTD</secondary></indexterm>

The hierarchy. This module declares the elements that provide
the hierarchical structure of DocBook (sets, books, chapters,
articles, and so on).
</para>
<para>Changes to this module alter the top-level structure of the
&DTD;. If you want to write a DocBook-derived &DTD; with a different
structure (something other than a book), but with the same paragraph
and inline-level elements, you make most of your changes in this
module.
</para>
</listitem>
</varlistentry>
<varlistentry><term><filename>dbpool.mod</filename></term>
<listitem>
<para>
<indexterm><primary>dbpool.mod file</primary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>dbpool.mod file, declaring</secondary></indexterm>
<indexterm><primary>inline elements</primary>
  <secondary>changing (dbpool.mod file)</secondary></indexterm>

The information pool. This module declares the elements that
describe content (inline elements, bibliographic data, block quotes,
sidebars, and so on) but are not part of the large-scale hierarchy of
a document. You can incorporate these elements into an entirely
different element hierarchy.
</para>
<para>The most common reason for changing this module is to add or
remove inline elements.
</para>
</listitem>
</varlistentry>
<varlistentry><term><filename>dbnotn.mod</filename></term>
<listitem>
<para>
<indexterm><primary>dbnotn.mod file</primary></indexterm>
<indexterm><primary>notation declarations (DocBook)</primary></indexterm>

The notation declarations. This module declares the notations
used by DocBook.
</para>
<para>This module can be changed to add or remove notations.
</para>
</listitem>
</varlistentry>
<varlistentry><term><filename>dbcent.mod</filename></term>
<listitem>
<para>
<indexterm><primary>dbcent.mod file</primary></indexterm>
<indexterm><primary>characters</primary>
  <secondary>entities</secondary>
    <tertiary>declaration</tertiary></indexterm>
<indexterm><primary>entities</primary>
  <secondary>characters</secondary>
    <tertiary>declaration</tertiary></indexterm>
<indexterm><primary>declarations</primary>
  <secondary>entities</secondary>
    <tertiary>entity sets</tertiary></indexterm>

The character entities. This module declares and references the
<acronym>ISO</acronym> entity sets used by DocBook.
</para>
<para>Changes to this module can add or remove entity sets.
</para>
</listitem>
</varlistentry>
<varlistentry><term><filename>dbgenent.mod</filename></term>
<listitem>
<para>
<indexterm><primary>dbgenent.mod file</primary></indexterm>
<indexterm><primary>entities</primary>
  <secondary>general</secondary>
    <tertiary>customizing</tertiary></indexterm>
<indexterm><primary>DocBook DTD</primary>
  <secondary>general entities, customizing</secondary></indexterm>
<indexterm><primary>customizing</primary>
  <secondary>DocBook DTD</secondary>
    <tertiary>general entities</tertiary></indexterm>
<indexterm><primary>general entities</primary>
  <secondary>customizing</secondary></indexterm>

The general entities. This is a place where you can customize
the general entities available in DocBook instances.
</para>
<para>This is the place to add, for example, boiler plate text, logos
for institutional identity, or additional notations understood by your
local processing system.
</para>
</listitem>
</varlistentry>
<varlistentry><term><filename>cals-tbl.dtd</filename></term>
<listitem>
<para>
<indexterm><primary>cals-tbl.dtd file</primary></indexterm>
<indexterm><primary>CALS; Table Model. CALS</primary></indexterm>
<indexterm><primary>table models</primary></indexterm>

The &CALS; Table Model. &CALS; is an initiative by the United
States Department of Defense to standardize the document types used
across branches of the military. The &CALS; table model, published in
<acronym>MIL-HDBK-28001</acronym>, was for a long time the most widely
supported &SGML; table model (one might now argue that the &HTML;
table model is more widely supported by some definitions of
<quote>widely supported</quote>). In any event, it is the table model
used by DocBook.
</para>
<para>
<indexterm><primary>OASIS</primary>
  <secondary>table model</secondary></indexterm>
<indexterm><primary>DocBook DTD</primary>
  <secondary>table model</secondary></indexterm>

DocBook predates the publication of the <ulink url="http://www.oasis-open.org/html/a503.htm">
<acronym>OASIS</acronym> Technical Resolution <acronym>TR</acronym>
9503:1995</ulink>, which defines an industry standard exchange table
model and thus incorporates the <emphasis>full</emphasis> &CALS; Table
Model.
</para>
<para>
<indexterm><primary>parameter entities</primary>
  <secondary>table model (CALS), modifying</secondary></indexterm>

Most changes to the &CALS; table model can be accomplished by
modifying parameter entities in <filename>dbpool.mod</filename>;
changing this &DTD; fragment is strongly discouraged. If you want to
use a different table model, remove this one and add your own.
</para>
</listitem>
</varlistentry>
<varlistentry><term><filename>*.gml</filename></term>
<listitem>
<para>
<indexterm><primary sortas="gml ISO standard character entity sets">*.gml (ISO standard character entity sets)</primary></indexterm>
<indexterm><primary>ISO standards</primary>
  <secondary>entity sets</secondary>
    <tertiary>characters</tertiary></indexterm>
The <acronym>ISO</acronym> standard character entity sets.
These entity sets are not actually part of the official DocBook
distribution, but are referenced by default.
</para>
</listitem>
</varlistentry>
</variablelist>
<para>
There are some additional modules, initially undefined, that can be
inserted at several places for <quote>redeclaration.</quote> This is
described in more detail in <xref linkend="s2-remvadmon"/>.
</para>
</sect2>
<sect2 id="dbparam"><title>DocBook Parameterization</title>
<para>
<indexterm><primary>parameter entities</primary>
  <secondary>customization layers</secondary></indexterm>

Customization layers are possible because DocBook has been extensively
parameterized so that it is possible to make any changes that might be
desired without ever editing the actual distributed modules. The
parameter entities come in several flavors:
</para>
<variablelist>
<varlistentry><term><sgmltag class="paramentity">*.class</sgmltag></term>
<listitem>
<para>
<indexterm><primary sortas="class parameter entities">*.class parameter entities</primary></indexterm>
<indexterm><primary>classes</primary>
  <secondary>elements</secondary></indexterm>

Classes group elements of a similar type: for example all the
lists are in the <sgmltag class="paramentity">list.class</sgmltag>.
</para>
<para>If you want to add a new kind of something (a new kind of list
or a new kind of verbatim environment, for example), you generally
want to add the name of the new element to the appropriate class.
</para>
</listitem>
</varlistentry>
<varlistentry><term><sgmltag class="paramentity">*.mix</sgmltag></term>
<listitem>
<para>
<indexterm><primary sortas="mix mixture classes">.mix parameter entities</primary></indexterm>
<indexterm><primary>classes</primary>
  <secondary>mixtures</secondary></indexterm>

Mixtures are collections of classes that appear in content
models. For example, the content model of the
<sgmltag>Example</sgmltag> element includes <sgmltag class="paramentity">example.mix</sgmltag>. Not every element's content
model is a single mixture, but elements in the same class tend to have
the same mixture in their content model.
</para>
<para>If you want to change the content model of some class of
elements (lists or admonitions, perhaps), you generally want to change
the definition of the appropriate mixture.
</para>
</listitem>
</varlistentry>
<varlistentry><term><sgmltag class="paramentity">*.module</sgmltag></term>
<listitem>
<para>
<indexterm><primary>parameter entities</primary>
  <secondary>*.module</secondary></indexterm>

<indexterm><primary sortas="module files">*.module parameter entities</primary></indexterm>
<indexterm><primary>marked sections</primary>
  <secondary>parameter entities, controlling</secondary></indexterm>

The <sgmltag class="paramentity">*.module</sgmltag> parameter
entities control <link linkend="s-ms">marked sections</link> around
individual elements and their attribute lists.  For example, the
element and attribute declarations for <sgmltag>Abbrev</sgmltag> occur
within a marked section delimited by <sgmltag class="paramentity">abbrev.module</sgmltag>.
</para>
<para>
If you want to remove or redefine an element or its attribute
list, you generally want to change its module marked section to
<literal>IGNORE</literal> and possibly add a new definition for it in
your customization layer.
</para>
</listitem>
</varlistentry>
<varlistentry><term><sgmltag class="paramentity">*.element</sgmltag></term>
<listitem>
<para>
<indexterm><primary sortas="element parameter entity">*.element parameter entities</primary></indexterm>
<indexterm><primary>parameter entities</primary>
  <secondary>*.element</secondary></indexterm>
The <sgmltag class="paramentity">*.element</sgmltag> parameter
entities were introduced in DocBook <acronym>V3.1</acronym>; they
control marked sections around individual element declarations.
</para>
</listitem>
</varlistentry>
<varlistentry><term><sgmltag class="paramentity">*.attlist</sgmltag></term>
<listitem>
<para>
<indexterm><primary>parameter entities</primary>
  <secondary>*.attlist</secondary></indexterm>
<indexterm><primary sortas="attlist parameter entities">*.attlist parameter entities</primary></indexterm>
<indexterm><primary>attributes</primary>
  <secondary>parameter entities, controlling</secondary></indexterm>

The <sgmltag class="paramentity">*.attlist</sgmltag> parameter
entities were introduced in DocBook <acronym>V3.1</acronym>; they
control marked sections around individual attribute list declarations.
</para>
</listitem>
</varlistentry>
<varlistentry><term><sgmltag class="paramentity">*.inclusion</sgmltag></term>
<term><sgmltag class="paramentity">*.exclusion</sgmltag></term>
<listitem>
<para>
<indexterm><primary>elements</primary>
  <secondary>declarations</secondary>
    <tertiary>parameter entities, controlling</tertiary></indexterm>
<indexterm><primary>parameter entities</primary>
  <secondary>*.inclusion</secondary></indexterm>
<indexterm><primary>parameter entities</primary>
  <secondary>*.exclusion</secondary></indexterm>
<indexterm><primary sortas="inclusion parameter entity">*.inclusion parameter entities</primary></indexterm>
<indexterm><primary sortas="exclusion parameter entity">*.exclusion parameter entities</primary></indexterm>

These parameter entities control the inclusion and exclusion
markup in element declarations.
</para>
<para>Changing these declarations allows you to make global changes to
the inclusions and exclusions in the &DTD;.
</para>
</listitem>
</varlistentry>
<varlistentry><term><sgmltag class="paramentity">local.*</sgmltag></term>
<listitem>
<para>
<indexterm><primary>local parameter entities</primary></indexterm>

The <sgmltag class="paramentity">local.*</sgmltag> parameter
entities are a local extension mechanism.  You can add markup to most
entity declarations simply by declaring the appropriate local
parameter entity.
</para>
</listitem>
</varlistentry>
</variablelist>
</sect2>
</sect1>
<sect1 id="ch05-genstruct"><title>The General Structure of<?lb?>Customization Layers</title>
<para>
<indexterm><primary>customizing</primary>
  <secondary>DocBook DTD</secondary>
    <tertiary>structure (customization layers)</tertiary></indexterm>
Although customization layers vary in complexity, most of them 
have the same general structure as other customization layers of
similar complexity.
</para>
<para>
In the most common case, you probably want to include the entire &DTD;, but you
want to make some small changes.  These customization layers tend
to look like this:
</para>
<screenco>
<areaspec>
<area id="gs-o1" coords="1 1" units="linecolumn"/>
<area id="gs-d1" coords="3 1" units="linecolumn"/>
<area id="gs-n1" coords="6 1" units="linecolumn"/>
</areaspec>
<screen>
 <replaceable>Overrides of Entity Declarations Here</replaceable>

 &lt;!ENTITY % orig-docbook "-//OASIS//DTD DocBook V3.1//EN">
 %orig-docbook;

 <replaceable>New/Modified Element and Attribute Declarations Here</replaceable>
</screen>
<calloutlist>
<callout arearefs="gs-o1"><para>
Declare new values for parameter entities
(<sgmltag class='paramentity'>local.*</sgmltag>,
<sgmltag class='paramentity'>*.element</sgmltag>, 
<sgmltag class='paramentity'>*.attlist</sgmltag>)
that you wish to modify.
</para></callout>
<callout arearefs="gs-d1"><para>
Include the entire DocBook &DTD; by parameter entity reference.
<indexterm><primary>parameter entities</primary>
  <secondary>DocBook DTD, including by reference</secondary></indexterm>

</para></callout>
<callout arearefs="gs-n1"><para>
Add new element and attribute declarations for any elements that you
added to the &DTD;.
<indexterm><primary>elements</primary>
  <secondary>declarations</secondary>
    <tertiary>adding for new</tertiary></indexterm>
<indexterm><primary>attributes</primary>
  <secondary>declarations</secondary>
    <tertiary>adding for new</tertiary></indexterm>
</para></callout>
</calloutlist>
</screenco>
<para>
<indexterm><primary>modules</primary>
  <secondary>DocBook customization</secondary></indexterm>

In slightly more complex customization layers, the changes that you
want to make are influenced by the interactions between modules. In
these cases, rather than including the whole &DTD; at once, you
include each of the modules separately, perhaps with entity or element
declarations between them:
</para>
<screen>
<replaceable>Overrides of Most Entity Declarations Here</replaceable>

&lt;!ENTITY % orig-pool "-//OASIS//ELEMENTS DocBook Information Pool V3.1//EN">
%orig-pool;

<replaceable>Overrides of Document Hierarchy Entities Here</replaceable>

&lt;!ENTITY % orig-hier "-//OASIS//ELEMENTS DocBook Document Hierarchy V3.1//EN">
%orig-hier;

<replaceable>New/Modified Element and Attribute Declarations Here</replaceable>

&lt;!ENTITY % orig-notn "-//OASIS//ENTITIES DocBook Notations V3.1//EN">
%orig-notn;

&lt;!ENTITY % orig-cent "-//OASIS//ENTITIES DocBook Character Entities V3.1//EN">
%orig-cent;

&lt;!ENTITY % orig-gen  "-//OASIS//ENTITIES DocBook Additional General Entities V3.1//EN">
%orig-gen;
</screen>
<para>
<indexterm><primary>one-off customizations</primary></indexterm>

Finally, it's worth noting that in the rare case in which you
need certain kinds of very simple, <quote>one-off</quote>
customizations, you can do them in the document subset:
</para>
<screen>
&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V3.1//EN" [
<replaceable>Overrides of Entity Declarations Here</replaceable>
<replaceable>New/Modified Element and Attribute Declarations Here</replaceable>
]>
&lt;book>...&lt;/book>
</screen>
</sect1>
<sect1 id="ch05-write"><title>Writing, Testing, and Using a Customization Layer</title>
<para>
<indexterm><primary>DocBook DTD</primary>
  <secondary>customizing</secondary>
    <tertiary>customization layers, writing, testing, and using</tertiary></indexterm>
<indexterm><primary>customizing</primary>
  <secondary>DocBook DTD</secondary>
    <tertiary>writing, testing and using customization layers</tertiary></indexterm>
The procedure for creating, testing, and using a customization layer
is always about the same. In this section, we'll go through the
process in some detail. The rest of the sections in this chapter
describe a range of useful customization layers.
</para>
<sect2><title>Deciding What to Change</title>
<para>
If you're considering writing a customization layer, there must be
something that you want to change. Perhaps you want to add an element
or attribute, remove one, or change some other aspect of the &DTD;.
</para>
<para>
<indexterm><primary>inline elements</primary>
  <secondary>adding</secondary></indexterm>

Adding an element, particularly an inline element, is one possibility.
If you're writing documentation about an object-oriented system, you
may have noticed that DocBook provides <sgmltag>ClassName</sgmltag> but not
<sgmltag>MethodName</sgmltag>. Suppose you want to add
<sgmltag>MethodName</sgmltag>?
</para>
</sect2>
<sect2><title>Deciding How to Change a Customization Layer</title>
<para>
<indexterm><primary>customizing</primary>
  <secondary>DocBook DTD</secondary>
    <tertiary>changing customization layers</tertiary></indexterm>
Figuring out what to change may be the hardest part of the process.
The organization of the parameter entities is quite logical, and,
bearing in mind the organization described in <xref linkend="s-dbstruct"/>, finding something similar usually
provides a good model for new changes.
</para>

<para condition="online">
<indexterm><primary>parameter entities</primary>
  <secondary>reference (online)</secondary></indexterm>

Two online resources may be useful. First, the 
<link linkend="ref-parement">parameter entity reference section</link> of the
online book provides more detail than the print version. Second, there
is an alternate version of the book online that shows all of the element
content models in terms of the parameter entities that define them, 
rather than the <quote>flattened</quote> versions shown here.
</para>

<para condition="online">
<indexterm><primary>elements</primary>
  <secondary>content models (online reference)</secondary></indexterm>
One resource that may be useful is the alternate version of this
book that shows all of the element content models in
terms of the parameter entities which define them, rather than
the <quote>flattened</quote> versions shown here. The alternate version
is on the <acronym>CD-ROM</acronym> and online at the book web site:
<ulink url="http://docbook.org/">http://docbook.org/</ulink>.
</para>

<para>
<sgmltag>MethodName</sgmltag> is similar to <sgmltag>ClassName</sgmltag>, so
<sgmltag>ClassName</sgmltag> is probably a good model.  <sgmltag>ClassName</sgmltag>
is an inline element, not a hierarchy element, so it's in
<filename>dbpool.mod</filename>. Searching for <quote>classname</quote> in
<filename>dbpool.mod</filename> reveals:
</para>
<screen>
&lt;!ENTITY % local.tech.char.class "">
&lt;!ENTITY % tech.char.class
        "Action|Application|<emphasis role="bold">ClassName</emphasis>|Command|ComputerOutput
        |Database|Email|EnVar|ErrorCode|ErrorName|ErrorType|Filename
        |Function|GUIButton|GUIIcon|GUILabel|GUIMenu|GUIMenuItem
        |GUISubmenu|Hardware|Interface|InterfaceDefinition|KeyCap
        |KeyCode|KeyCombo|KeySym|Literal|Constant|Markup|MediaLabel
        |MenuChoice|MouseButton|MsgText|Option|Optional|Parameter
        |Prompt|Property|Replaceable|ReturnValue|SGMLTag|StructField
        |StructName|Symbol|SystemItem|Token|Type|UserInput|VarName
        %local.tech.char.class;">
</screen>
<para>
Searching further reveals the element and attribute declarations for
<sgmltag>ClassName</sgmltag>.
</para>
<para>
<indexterm><primary>local.tech.char.class parameter entity</primary></indexterm>
<indexterm><primary>tech.char.class parameter entity</primary></indexterm>
It would seem (and, in fact, it is the case) that adding
<sgmltag>MethodName</sgmltag> can be accomplished by adding it to the local
extension mechanism for <sgmltag class="paramentity">tech.char.class</sgmltag>, namely <sgmltag class="paramentity">local.tech.char.class</sgmltag>, and adding element and
attribute declarations for it. A customization layer that does this
can be seen in <xref linkend="ex-addmethodname"/>.
<indexterm><primary>MethodName, adding with customization layer</primary></indexterm>

</para>
<example id="ex-addmethodname">
<title>Adding MethodName with a Customization Layer</title>
<programlisting>
&lt;!ENTITY % local.tech.char.class "|MethodName">     <co id="add.methname.1"/>

&lt;!-- load DocBook -->                               <co id="add.methname.2"/>
&lt;!ENTITY % DocBookDTD PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
%DocBookDTD;

&lt;!ELEMENT MethodName - - ((%smallcptr.char.mix;)+)  <co id="add.methname.3"/>>
&lt;!ATTLIST MethodName                                <co id="add.methname.4"/>
        %common.attrib;
        %classname.role.attrib;
        %local.classname.attrib;
>
</programlisting>
<calloutlist>
<callout arearefs="add.methname.1"><para>Declare the appropriate
parameter entity (these are described in <xref linkend="dbparam"/>).
The declaration in your customization layer is encountered first, so
it overrides the definition in the DocBook &DTD; (all the local
classes are defined as empty in the &DTD;).</para>
</callout>
<callout arearefs="add.methname.2"><para>Use a parameter entity to
load the entire DocBook &DTD;.</para>
</callout>
<callout arearefs="add.methname.3"><para>Add an element declaration
for the new element. The content model for this element is taken
directly from the content model of <sgmltag>ClassName</sgmltag>.</para>
</callout>
<callout arearefs="add.methname.4"><para>Add an attribute list
declaration for the new element. These are the same attributes as
<sgmltag>ClassName</sgmltag>.
</para>
</callout></calloutlist>
</example>
</sect2>
<sect2><title>Using Your Customization Layer</title>
<para>
<indexterm><primary>customizing</primary>
  <secondary>DocBook DTD</secondary>
    <tertiary>writing, testing, and using customization layers</tertiary></indexterm>
<indexterm><primary>DocBook DTD</primary>
  <secondary>customizing</secondary>
    <tertiary>using customization layer</tertiary></indexterm>

In order to use the new customization layer, you must save it in a
file, for example <filename>mydocbk.dtd</filename>, and then you must use the
new &DTD; in your document.
</para>
<para>
The simplest way to use the new &DTD; is to point to it with a system
identifier:
<indexterm><primary>Java Math class</primary></indexterm>
<indexterm><primary>absolute value (numbers), computing</primary></indexterm>
</para>
<screen>
<![CDATA[
<!DOCTYPE chapter SYSTEM "/path/to/mydocbk.dtd">
<chapter><title>My Chapter</title>
<para>
The Java <classname>Math</classname> class provides a 
<methodname>abs</methodname> method to compute absolute value of a number.
</para>
</chapter>
]]>
</screen>
<para>
<indexterm><primary>public identifiers</primary>
  <secondary>DocBook DTD</secondary>
    <tertiary>customization layer</tertiary></indexterm>
If you plan to use your customization layer in many documents, or
exchange it with interchange partners, consider giving your &DTD; its
own public identifier, as described in <xref linkend="s-notdocbook"/>
</para>
<para>
<indexterm><primary>catalog files</primary>
  <secondary>public identifier, adding</secondary></indexterm>

In order to use the new public identifier, you must add it to your
catalog:
<screen>
PUBLIC "-//Your Organization//DTD DocBook V3.1-Based Extension V1.0//EN"
       "/share/sgml/mydocbk.dtd"
</screen>
and use that public identifier in your documents:
</para>
<screen>
<![CDATA[
<!DOCTYPE chapter 
  PUBLIC "-//Your Organization//DTD DocBook V3.1-Based Extension V1.0//EN">
<chapter><title>My Chapter</title>
<para>
The Java <classname>Math</classname> class provides a 
<methodname>abs</methodname> method to compute absolute value of a number.
</para>
</chapter>
]]>
</screen>
<para>
<indexterm><primary>XML</primary>
  <secondary>system identifiers</secondary>
    <tertiary>URI requirements</tertiary></indexterm>
<indexterm><primary>URI</primary>
  <secondary>XML system identifiers</secondary></indexterm>
If you're using &XML;, remember that you must provide a system
identifier that satisfies the requirements of a Uniform Resource
Identifier (<acronym>URI</acronym>).
</para>
</sect2>
</sect1>
<sect1 id="cust.test"><title>Testing Your Work</title>
<para>
<indexterm><primary>customizing</primary>
  <secondary>DocBook DTD</secondary>
    <tertiary>writing, testing, and using customization layers</tertiary></indexterm>
<indexterm><primary>testing</primary>
  <secondary>customization layers (DocBook DTD)</secondary></indexterm>
<indexterm><primary>validation</primary>
  <secondary>customization layers</secondary></indexterm>

&DTD;s, by their nature, contain many complex, interrelated elements.
Whenever you make a change to the &DTD;, it's always wise to use a
validating parser to double-check your work. A parser like
<command>nsgmls</command> from James Clark's
<application><acronym>SP</acronym></application> can identify elements
(attributes, parameter entities) that are declared but unused, as well
as ones that are used but undeclared.
</para>
<para>

A comprehensive test can be accomplished with
<command>nsgmls</command> using the <option>-wall</option>
option. Create a simple test document and run:
</para>
<screen>
nsgmls <co id="nsgmls.opt.1"/>-sv <co id="nsgmls.opt.2"/>-wall test.sgm
</screen>
<calloutlist>
<callout arearefs="nsgmls.opt.1"><para>

<indexterm><primary>suppressing output (parser)</primary></indexterm>
<indexterm><primary>versions</primary>
  <secondary>nsgmls parser, printing number</secondary></indexterm>

The <option>-s</option> option
tells <command>nsgmls</command> to suppress its normal output (it will
still show errors, if there are any). The <option>-v</option> option
tells <command>nsgmls</command> to print its version number; this
ensures that you always get <emphasis>some</emphasis> output, even if
there are no errors.</para>
</callout>
<callout arearefs="nsgmls.opt.2"><para>
<indexterm><primary>errors</primary>
  <secondary>listing, comprehensive</secondary></indexterm>
<indexterm><primary>warnings, listing</primary></indexterm>
<indexterm><primary>nsgmls parser</primary>
  <secondary>warning types</secondary></indexterm>

The <option>-wall</option>
option tells <command>nsgmls</command> to provide a comprehensive list
of all errors and warnings.  You can use less verbose, and more
specific options instead; for example, <option>-wundefined</option> to
flag undefined elements or <option>-wunused-param</option> to warn you
about unused parameter entities. The <command>nsgmls</command>
documentation provides a complete list of warning types.</para>
</callout>
</calloutlist>
<sect2><title>DocBook <acronym>V3.1</acronym> Warnings</title>
<para>
<indexterm><primary>DocBook DTD</primary>
  <secondary>warnings</secondary></indexterm>
If you run the preceding command over DocBook <acronym>V3.1</acronym>,
you'll discover one warning generated by the &DTD;:
</para>
<screen>
nsgmls:I: SP version "1.3"
nsgmls:cals-tbl.dtd:314:37:W: content model is mixed but does not allow #PCDATA everywhere
</screen>
<para>
<indexterm><primary>Entry element</primary></indexterm>

This is not truly an error in the &DTD;, and can safely be ignored.
The warning is caused by <quote>pernicious mixed content</quote> in
the content model of DocBook's <sgmltag>Entry</sgmltag> element.  See
the <sgmltag>Entry</sgmltag> reference page for a complete discussion.
</para>
</sect2>
</sect1>
<sect1 id="ch05-remvelem"><title>Removing Elements</title>
<para>
<indexterm><primary>elements</primary>
  <secondary>removing</secondary></indexterm>

DocBook has a large number of elements. In some authoring
environments, it may be useful or necessary to remove some of these
elements.
</para>
<sect2><title>Removing MsgSet</title>
<para>
<indexterm><primary>MsgSet element</primary>
  <secondary>removing</secondary></indexterm>
<sgmltag>MsgSet</sgmltag> is a favorite target. It has a complex
internal structure designed for describing interrelated error
messages, especially on systems that may exhibit messages from several
different components. Many technical documents can do without it, and
removing it leaves one less complexity to explain to your authors.
</para>
<para>
<xref linkend="ex.remvmsgset"/> shows a customization layer that removes the
<sgmltag>MsgSet</sgmltag> element from DocBook:
</para>
<example id="ex.remvmsgset">
<title>Removing MsgSet</title>
<programlisting>
&lt;!ENTITY % compound.class "Procedure|SideBar"> <co id="rmv.msgset.1"/>
&lt;!ENTITY % msgset.content.module "IGNORE">     <co id="rmv.msgset.2"/>
&lt;!-- load DocBook -->
&lt;!ENTITY % DocBookDTD PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
%DocBookDTD;
</programlisting>
<calloutlist>
<callout arearefs="rmv.msgset.1"><para>Remove
<sgmltag>MsgSet</sgmltag> from the <sgmltag class="paramentity">compound.class</sgmltag>. This is the only place
in the &DTD; where <sgmltag>MsgSet</sgmltag> is referenced.</para>
</callout>
<callout arearefs="rmv.msgset.2"><para>Exclude the definition of
<sgmltag> MsgSet</sgmltag> and all of its subelements from the
&DTD;.</para>
</callout>
</calloutlist>
</example>
</sect2>
<sect2><title>Removing Computer Inlines</title>
<para>
<indexterm><primary>inline elements</primary>
  <secondary>computer inlines, removing</secondary></indexterm>
<indexterm><primary>parameter entities</primary>
  <secondary>tech.char.class, redefining</secondary></indexterm>
<indexterm><primary>tech.char.class parameter entity</primary>
  <secondary>redefining</secondary></indexterm>

DocBook contains a large number of computer inlines. The DocBook
inlines define a domain-specific vocabulary.  If you're working in
another domain, many of them may be unnecessary. You can remove a
bunch of them by redefining the <sgmltag class="paramentity">tech.char.class</sgmltag> parameter entity and
then excluding the declarations for the elements removed. The initial
definition of <sgmltag class="paramentity">tech.char.class</sgmltag> is:
</para>
<screen>
&lt;!ENTITY % tech.char.class
    "Action|Application|ClassName|Command|ComputerOutput
    |Database|Email|EnVar|ErrorCode|ErrorName|ErrorType|Filename
    |Function|GUIButton|GUIIcon|GUILabel|GUIMenu|GUIMenuItem
    |GUISubmenu|Hardware|Interface|InterfaceDefinition|KeyCap
    |KeyCode|KeyCombo|KeySym|Literal|Markup|MediaLabel|MenuChoice
    |MouseButton|MsgText|Option|Optional|Parameter|Prompt|Property
    |Replaceable|ReturnValue|SGMLTag|StructField|StructName
    |Symbol|SystemItem|Token|Type|UserInput
    %local.tech.char.class;">
</screen>
<para>
When examining this list, it seems that you can delete all of the
inlines except, perhaps, <sgmltag>Application</sgmltag>,
<sgmltag>Command</sgmltag>, <sgmltag>Email</sgmltag>,
<sgmltag>Filename</sgmltag>, <sgmltag>Literal</sgmltag>,
<sgmltag>Replaceable</sgmltag>, <sgmltag> Symbol</sgmltag>, and
<sgmltag>SystemItem</sgmltag>. The following customization layer
removes them.
</para>
<example>
<title>Removing Computer Inlines</title>
<programlisting><![CDATA[
<!ENTITY % tech.char.class
        "Application|Command|Email|Filename|Literal
        |Replaceable|Symbol|SystemItem">
<!ENTITY % action.module "IGNORE">
<!ENTITY % classname.module "IGNORE">
<!ENTITY % computeroutput.module "IGNORE">
<!ENTITY % database.module "IGNORE">
<!ENTITY % envar.module "IGNORE">
<!ENTITY % errorcode.module "IGNORE">
<!ENTITY % errorname.module "IGNORE">
<!ENTITY % errortype.module "IGNORE">
<!--<!ENTITY % function.module "IGNORE">-->
<!ENTITY % guibutton.module "IGNORE">
<!ENTITY % guiicon.module "IGNORE">
<!ENTITY % guilabel.module "IGNORE">
<!ENTITY % guimenu.module "IGNORE">
<!ENTITY % guimenuitem.module "IGNORE">
<!ENTITY % guisubmenu.module "IGNORE">
<!ENTITY % hardware.module "IGNORE">
<!ENTITY % interface.module "IGNORE">
<!ENTITY % interfacedefinition.module "IGNORE">
<!--<!ENTITY % keycap.module "IGNORE">-->
<!ENTITY % keycode.module "IGNORE">
<!--<!ENTITY % keycombo.module "IGNORE">-->
<!--<!ENTITY % keysym.module "IGNORE">-->
<!ENTITY % markup.module "IGNORE">
<!ENTITY % medialabel.module "IGNORE">
<!ENTITY % menuchoice.module "IGNORE">
<!--<!ENTITY % mousebutton.module "IGNORE">-->
<!--<!ENTITY % msgtext.module "IGNORE">-->
<!--<!ENTITY % option.module "IGNORE">-->
<!--<!ENTITY % optional.module "IGNORE">-->
<!--<!ENTITY % parameter.module "IGNORE">-->
<!ENTITY % prompt.module "IGNORE">
<!ENTITY % property.module "IGNORE">
<!ENTITY % returnvalue.module "IGNORE">
<!ENTITY % sgmltag.module "IGNORE">
<!ENTITY % structfield.module "IGNORE">
<!ENTITY % structname.module "IGNORE">
<!ENTITY % token.module "IGNORE">
<!ENTITY % type.module "IGNORE">
<!ENTITY % userinput.module "IGNORE">
<!-- load DocBook --> 
<!ENTITY % DocBookDTD PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
%DocBookDTD;
]]></programlisting>
</example>
<para>
Initially we removed several more elements from <sgmltag class="paramentity">tech.char.class</sgmltag> (<sgmltag class="paramentity">function.module</sgmltag>, <sgmltag class="paramentity">keycap.module</sgmltag>), but using the testing procedure
described in <xref linkend="cust.test"/>, we discovered that
these elements are used in other content models.  Because they are
used in other content modules, they cannot simply be removed from the
&DTD; by deleting them from <sgmltag class="paramentity">
tech.char.class</sgmltag>.  Even though they can't be deleted
outright, we've taken them out of most inline contexts.
</para>
<para>
<indexterm><primary>synopses</primary>
  <secondary>synopsis elements, removing</secondary></indexterm>
<indexterm><primary>FuncSynopsis element</primary>
  <secondary>removing</secondary></indexterm>
<indexterm><primary>CmdSynopsis element</primary>
  <secondary>removing</secondary></indexterm>
It's likely that a customization layer that removed this many
technical inlines would also remove some larger technical structures
(<sgmltag>MsgSet</sgmltag>, <sgmltag>FuncSynopsis</sgmltag>), which
allows you to remove additional elements from the &DTD;.
</para>
</sect2>
<sect2>
<title>Removing Synopsis Elements</title>
<para>
Another possibility is removing the complex Synopsis elements. The
customization layer in <xref linkend="ex.remvcmdsyn"/> removes
<sgmltag>CmdSynopsis</sgmltag> and <sgmltag>FuncSynopsis</sgmltag>.
</para>
<example id="ex.remvcmdsyn">
<title>Removing CmdSynopsis and FuncSynopsis</title>
<programlisting><![CDATA[
<!ENTITY % synop.class "Synopsis">
<!-- Instead of "Synopsis|CmdSynopsis|FuncSynopsis %local.synop.class;" -->

<!ENTITY % funcsynopsis.content.module "IGNORE">
<!ENTITY % cmdsynsynopsis.content.module "IGNORE">

<!-- load DocBook --> 
<!ENTITY % DocBookDTD PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
%DocBookDTD;
]]></programlisting>
</example>
<para>
<indexterm><primary>parameter entities</primary>
  <secondary>empty</secondary></indexterm>

Completely removing all Synopsis elements would require a more
extensive customization. You can't make any of the <sgmltag class="paramentity">*.class</sgmltag> parameter entities completely empty
without changing all of the parameter entities that use them. See
<xref linkend="sect.remv.synop.class"/>.
</para>
</sect2>
<sect2>
<title>Removing Sectioning Elements</title>
<para>
<indexterm><primary>sections</primary>
  <secondary>elements, removing</secondary></indexterm>

Perhaps you want to restrict your authors to only three levels of
sectioning.  To do that, you must remove the <sgmltag>Sect4</sgmltag>
and <sgmltag>Sect5 </sgmltag> elements, as shown in <xref linkend="ex.remvsect4"/>.
</para>
<example id="ex.remvsect4">
<title>Removing <sgmltag>Sect4</sgmltag> and <sgmltag>Sect5</sgmltag> Elements
</title>
<programlisting><inlinegraphic fileref="examples/remv.sect4.dtd" format="linespecific"></inlinegraphic></programlisting>
</example>
<para>
In order to completely remove an element that isn't in the information
pool, it is usually necessary to redefine the elements that include
it. In this case, because we're removing the <sgmltag>Sect4</sgmltag>
element, we must redefine the <sgmltag>Sect3</sgmltag> element that
uses it.
</para>
</sect2>
<sect2 id="s2-remvadmon"><title>Removing Admonitions from Table Entries</title>
<para>
<indexterm><primary>modules</primary>
  <secondary>redeclarations</secondary></indexterm>
<indexterm><primary>redeclarations</primary>
  <secondary>modules</secondary></indexterm>

All of the customization layers that we've examined so far have been
fairly straightforward. This section describes a much more complex
customization layer. Back in <xref linkend="db-modules"/> we
mentioned that several additional modules existed for
<quote>redeclaration.</quote> The customization layer developed in this
section cannot be written without them.
</para>
<para>
<indexterm><primary>admonitions</primary>
  <secondary>removing from table entries</secondary></indexterm>
<indexterm><primary>table entries, removing admonitions</primary></indexterm>

The goal is to remove admonitions (<sgmltag>Warning</sgmltag>,
<sgmltag>Caution</sgmltag>, <sgmltag>Note</sgmltag>) from table
entries.
</para>
<para>
<xref linkend="ex.remvadmon.1"/> is a straightforward, and incorrect, attempt.
<example id="ex.remvadmon.1">
<title>Removing Admonitions (First Attempt: Incorrect)</title>
<programlisting role="ERROR"><![CDATA[
<!-- THIS CUSTOMIZATION LAYER CONTAINS ERRORS -->
<!ENTITY % tabentry.mix
        "%list.class;
        |%linespecific.class;
        |%para.class;        |Graphic
        %local.tabentry.mix;">
<!-- load DocBook -->
<!ENTITY % DocBookDTD PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
%DocBookDTD;
]]></programlisting>
</example>
Because the parameter entity <sgmltag class="paramentity">tabentry.mix</sgmltag> defines the mixture of elements
allowed in table entries, you should remove admonitions.
<indexterm><primary>parameter entities</primary>
  <secondary>tabentry.mix (removing admonitions)</secondary></indexterm>
<indexterm><primary>tabentry.mix element, editing</primary></indexterm>

</para>
<para>
If you attempt to parse this &DTD;, you'll find that the declaration
of <sgmltag class="paramentity">tabentry.mix</sgmltag> contains errors. While
you can redefine parameter entities, you cannot make reference to
entities that have not been defined yet, so the use of <sgmltag class="paramentity">list.class</sgmltag>, <sgmltag class="paramentity">linespecific.class</sgmltag>, and so on, aren't allowed.
</para>
<para>
Your second attempt might look like <xref linkend="ex.remvadmon.2"/>.
<example id="ex.remvadmon.2">
<title>Removing Admonitions (Second Attempt: Incorrect)</title>
<programlisting role="ERROR"><![CDATA[
<!-- THIS CUSTOMIZATION LAYER DOESN'T WORK -->
<!-- load DocBook -->
<!ENTITY % DocBookDTD PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
%DocBookDTD;
<!ENTITY % tabentry.mix
        "%list.class;
        |%linespecific.class;
        |%para.class;        |Graphic
        %local.tabentry.mix;">
]]></programlisting>
</example>
Declaring <sgmltag class="paramentity">tabentry.mix</sgmltag> after the &DTD;
has been loaded removes the errors.
</para>
<para>
This example contains no errors, but it also doesn't have any effect.
Remember, only the first entity declaration counts, so the declaration
of <sgmltag class="paramentity">tabentry.mix</sgmltag> in
<filename>dbpool.mod</filename> is the one used, not your
redeclaration.
</para>
<para>
<indexterm><primary>placeholders, redeclarations</primary></indexterm>
<indexterm><primary>redeclarations</primary>
  <secondary>placeholders</secondary></indexterm>

The only way to fix this problem is to make use of one of the redeclaration
placeholders in DocBook.
</para>
<para>
Redeclaration placeholders are spots in which you can insert
definitions into the middle of the &DTD;. There are four redeclaration
placeholders in DocBook:
<indexterm><primary>%rdbmods parameter entity</primary></indexterm>

<variablelist>
<varlistentry><term><sgmltag class="paramentity">rdbmods</sgmltag></term>
<listitem>
<para>Inserted in <filename>docbook.dtd</filename>, between
<filename>dbpool.mod</filename> and
<filename>dbhier.mod</filename>. This placeholder is controlled by the
<sgmltag class="paramentity">intermod.redecl.module</sgmltag> marked
section.</para>
</listitem>
</varlistentry>
<varlistentry><term><sgmltag class="paramentity">rdbpool</sgmltag></term>
<listitem>
<para>
<indexterm><primary>%rdbpool.mod parameter entity</primary></indexterm>

Inserted in the middle of <filename>dbpool.mod</filename>,
between the <sgmltag class="paramentity">*.class</sgmltag> and <sgmltag class="paramentity">*.mix</sgmltag> entity declarations. This placeholder is
controlled by the <sgmltag class="paramentity">dbpool.redecl.module</sgmltag>
marked section.</para>
</listitem>
</varlistentry>
<varlistentry><term><sgmltag class="paramentity">rdbhier</sgmltag></term>
<listitem>
<para>
<indexterm><primary>%rdbhier parameter entity</primary></indexterm>

Inserted in the middle of <filename>dbhier.mod</filename>,
between the <sgmltag class="paramentity">*.class</sgmltag> and <sgmltag class="paramentity">*.mix</sgmltag> entity declarations. This placeholder is
controlled by the <sgmltag class="paramentity">dbhier.redecl.module</sgmltag> marked
section.</para>
</listitem>
</varlistentry>
<varlistentry><term><sgmltag class="paramentity">rdbhier2</sgmltag></term>
<listitem>
<para>Also inserted into <filename>dbhier.mod</filename>, after the
<sgmltag class="paramentity">*.mix</sgmltag> entity declarations. This
placeholder is controlled by the <sgmltag class="paramentity">dbhier.redecl2.module</sgmltag> marked
section.</para>
</listitem>
</varlistentry>
</variablelist></para>
<para>Use the redeclaration placeholder that it occurs nearest to, but
before the entity that you want to redeclare. In our case, this is
<sgmltag class="paramentity">rdbpool</sgmltag>, as seen in <xref linkend="ex.remvadmon.3"/>.
<example id="ex.remvadmon.3">
<title>Removing Admonitions (Third Attempt: Correct, if confusing)</title>
<programlisting><![CDATA[
<!ENTITY % dbpool.redecl.module "INCLUDE">
<!ENTITY % rdbpool
'<!ENTITY % local.tabentry.mix "">
<!ENTITY % tabentry.mix
        "&#37;list.class;
        |&#37;linespecific.class;
        |&#37;para.class;        |Graphic
        &#37;local.tabentry.mix;">'>

<!-- load DocBook -->
<!ENTITY % DocBookDTD PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
%DocBookDTD;
]]></programlisting>
</example>
</para>
<para>
<indexterm><primary>escape sequences (parameter entities)</primary></indexterm>

<xref linkend="ex.remvadmon.3"/> uses numeric character entity
references to escape the <literal>%</literal> signs in the entity
declarations and nests an entity declaration in another parameter
entity. All of this is perfectly legal, but a bit confusing.  A
clearer solution, and the only practical solution if you're doing
anything more than a single redeclaration, is to place the new
declarations in another file and include them in your customization
layer by reference, like this:
</para>
<example id="ex.remvadmon.4">
<title>Removing Admonitions (Fourth Attempt: Correct)</title>
<para>In your customization layer:</para>
<programlisting><![CDATA[

<!ENTITY % dbpool.redecl.module "INCLUDE">
<!ENTITY % rdbpool SYSTEM "rdbpool.mod">

<!-- load DocBook -->
<!ENTITY % DocBookDTD PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
%DocBookDTD;

]]></programlisting>
<para>In <filename>rdbpool.mod</filename>:</para>
<programlisting><![CDATA[<!ENTITY % local.tabentry.mix "">
<!ENTITY % tabentry.mix
        "%list.class;
        |%linespecific.class;
        |%para.class;        |Graphic
        %local.tabentry.mix;">]]></programlisting>
</example>
</sect2>
<sect2 id="sect.remv.synop.class">
<title>Removing an Entire Class</title>
<para>
<indexterm><primary>classes</primary>
  <secondary>removing entire class</secondary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>removing</secondary></indexterm>
<indexterm><primary>parameter entities</primary>
  <secondary>empty classes, redefining for</secondary></indexterm>

Perhaps the modification that you want to make is to completely remove
an entire class of elements. (If you have no need for synopsis
elements of any sort, why not remove them?) In order to remove an
entire class of elements, you must not only redefine the class as
empty, but you must also redefine all of the parameter entities that
use that class. The customization layer below completely removes the
<sgmltag class="paramentity"> synop.class</sgmltag> from DocBook. It
requires a customization layer, shown in <xref linkend="ex.remvclass"/>, that includes both a redeclaration module in
<filename>dbpool.mod</filename> and a redeclaration module in
<filename>dbhier.mod</filename>.
<indexterm><primary>%synop.class, removing</primary></indexterm>
</para>
<example id="ex.remvclass">
<title>Removing <sgmltag class="paramentity">synop.class</sgmltag></title>
<para>In the customization layer:</para>
<programlisting><inlinegraphic fileref="examples/remv.synop.class.dtd" format="linespecific"></inlinegraphic></programlisting>
<para>In <filename>remv.synop.class.rdbpool.mod</filename>:</para>
<programlisting><inlinegraphic fileref="examples/remv.synop.class.rdbpool.mod" format="linespecific"></inlinegraphic></programlisting>
<para>In <filename>remv.synop.class.rdbhier.mod</filename>:</para>
<programlisting><inlinegraphic fileref="examples/remv.synop.class.rdbhier.mod" format="linespecific"></inlinegraphic></programlisting>
</example>
</sect2>
</sect1>
<sect1 id="ch05-remvattr">
<title>Removing Attributes</title>
<para>Just as there may be more elements than you need, there may be more
attributes.</para>
<sect2>
<title>Removing an Attribute</title>
<para>
<indexterm><primary>attributes</primary>
  <secondary>removing</secondary></indexterm>
<indexterm><primary>RenderAs attribute, removing</primary></indexterm>

Suppose you want to remove the <sgmltag class="attribute">RenderAs</sgmltag> attribute from the
<sgmltag>Sect1</sgmltag> element. <sgmltag class="attribute">RenderAs</sgmltag> allows the author to
<quote>cheat</quote> in the presentation of hierarchy by specifying
that the stylesheet should render a <sgmltag>Sect1</sgmltag> as
something else: a <sgmltag>Sect3</sgmltag>, perhaps. <xref linkend="ex.remvrendas"/> details the removal of <sgmltag class="attribute">RenderAs</sgmltag>.
</para>
<example id="ex.remvrendas">
<title>Removing RenderAs from Sect1</title>
<programlisting>
&lt;!ENTITY % sect1.module "IGNORE">                <co id="remvattr.1"/>

&lt;!-- load DocBook -->                            <co id="remvattr.2"/>
&lt;!ENTITY % DocBookDTD PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
%DocBookDTD;

&lt;!ENTITY % local.sect1.attrib "">                <co id="remvattr.3"/>
&lt;!ENTITY % sect1.role.attrib "%role.attrib;">    <co id="remvattr.4"/>
&lt;!ELEMENT Sect1 - O (Sect1Info?, (%sect.title.content;), (%nav.class;)*,  <co id="remvattr.5"/>
        (((%divcomponent.mix;)+, 
        ((%refentry.class;)* | Sect2* | SimpleSect*))
        | (%refentry.class;)+ | Sect2+ | SimpleSect+), (%nav.class;)*)
        +(%ubiq.mix;)>
&lt;!ATTLIST Sect1                                  <co id="remvattr.6"/>
        %label.attrib;
        %status.attrib;
        %common.attrib;
        %sect1.role.attrib;
        %local.sect1.attrib;
>
</programlisting>
</example>
<calloutlist>
<callout arearefs="remvattr.1"><para>Turn off the
<sgmltag>Sect1</sgmltag> module so that the element and attribute
declarations in the &DTD; will be ignored.
</para>
</callout>
<callout arearefs="remvattr.2"><para>Include the DocBook &DTD;.</para>
</callout>
<callout arearefs="remvattr.3"><para>By keeping the local attribute
declaration, we leave open the possibility of a simple customization
layer on top of our customization layer.</para>
</callout>
<callout arearefs="remvattr.4"><para>Similarly, we keep the
parameterized definition of the <sgmltag class="attribute">Role</sgmltag>
attribute.</para>
</callout>
<callout arearefs="remvattr.5"><para>We're changing the attribute
list, not the element, so we've simply copied the
<sgmltag>Sect1</sgmltag> element declaration from the DocBook
&DTD;.</para>
</callout>
<callout arearefs="remvattr.6"><para>Finally, we declare the attribute
list, leaving out the <sgmltag class="attribute">RenderAs</sgmltag>.</para>
</callout>
</calloutlist>
</sect2>
<sect2><title>Subsetting the Common Attributes</title>
<para>
<indexterm><primary>attributes</primary>
  <secondary>common</secondary>
    <tertiary>subsetting</tertiary></indexterm>
<indexterm><primary>subsetting common attributes</primary></indexterm>

DocBook defines eleven common attributes; these attributes appear on
<emphasis>every</emphasis> element. Depending on how you're
processing your documents, removing some of them can both simplify the
authoring task and improve processing speed.
</para>
<para>Some obvious candidates are:</para>
<variablelist>
<varlistentry><term>Effectivity attributes (<sgmltag class="attribute">Arch
</sgmltag>, <sgmltag class="attribute">OS</sgmltag>,...)</term>
<listitem>
<para>
<indexterm><primary>effectivity attributes, removing</primary></indexterm>

If you're not using all of the effectivity attributes in your
documents, you can get rid of up to seven attributes in one fell
swoop.</para>
</listitem>
</varlistentry>
<varlistentry><term><sgmltag class="attribute">Lang</sgmltag></term>
<listitem>
<para>
<indexterm><primary>Lang attribute</primary>
  <secondary>removing</secondary></indexterm>

If you're not producing multilingual documents, you can remove
<sgmltag class="attribute">Lang</sgmltag>.</para>
</listitem>
</varlistentry>
<varlistentry><term><sgmltag class="attribute">Remap</sgmltag></term>
<listitem>
<para>
<indexterm><primary>Remap attribute</primary>
  <secondary>removing</secondary></indexterm>
The <sgmltag class="attribute">Remap</sgmltag> attribute is
designed to hold the name of a semantically equivalent construct from
a previous markup scheme (for example, a Microsoft Word style template
name, if you're converting from Word).  If you're authoring from
scratch, or not preserving previous constructs with <sgmltag class="attribute">Remap</sgmltag>, you can get rid of it.</para>
</listitem>
</varlistentry>
<varlistentry><term><sgmltag class="attribute">XrefLabel</sgmltag></term>
<listitem>
<para>
<indexterm><primary>XrefLabel attribute</primary>
  <secondary>removing</secondary></indexterm>
If your processing system isn't using <sgmltag class="attribute">XrefLabel</sgmltag>, it's a candidate as
well.</para>
</listitem>
</varlistentry>
</variablelist>
<para>
The customization layer in <xref linkend="ex.remvcommon"/> reduces the
common attributes to just <sgmltag class="attribute">ID</sgmltag> and
<sgmltag class="attribute">Lang</sgmltag>.
</para>
<example id="ex.remvcommon">
<title>Removing Common Attributes</title>
<programlisting><![CDATA[<!ENTITY % common.attrib
"ID   ID    #IMPLIED
 Lang CDATA #IMPLIED"
>
<!ENTITY % idreq.common.attrib
"ID   ID    #REQUIRED
 Lang CDATA #IMPLIED"
>
<!-- load DocBook -->
<!ENTITY % DocBookDTD PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
%DocBookDTD;]]></programlisting>
</example>
<para>
<indexterm><primary>common.attrib parameter entity</primary></indexterm>
<indexterm><primary>idreq.common.attrib parameter entity</primary></indexterm>

By definition, whatever attributes you define in the <sgmltag class="paramentity">common.attrib</sgmltag> and <sgmltag class="paramentity">idreq.common.attrib</sgmltag> parameter entities
are the common attributes. In <filename>dbpool.mod </filename>, these
parameter entities are defined in terms of other parameter entities,
but there's no way to preserve that structure in your customization
layer.
</para>
</sect2>
</sect1>
<sect1 id="ch05-addelem"><title>Adding Elements: Adding a Sect6</title>
<para>
<indexterm><primary>elements</primary>
  <secondary>adding</secondary></indexterm>

Adding a structural (as opposed to information pool) element generally
requires adding its name to a class and then providing the appropriate
definitions. <xref linkend="ex.addsect6"/> extends DocBook by adding a
<sgmltag>Sect6</sgmltag> element.
</para>
<example id="ex.addsect6">
<title>Adding a Sect6 Element</title>
<programlisting><![CDATA[<!ENTITY % sect5.module "IGNORE">
<!ENTITY % DocBookDTD PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
%DocBookDTD;
<!-- Add Sect6 to content model of Sect5 -->
<!ENTITY % sect5.role.attrib "%role.attrib;">
<!ELEMENT Sect5 - O (Sect5Info?, (%sect.title.content;), (%nav.class;)*,
        (((%divcomponent.mix;)+, 
                ((%refentry.class;)* | Sect6* | SimpleSect*))
        | (%refentry.class;)+ | Sect6+ | SimpleSect+), (%nav.class;)*)>
<!ATTLIST Sect5
        %label.attrib;
        %status.attrib;
        %common.attrib;
        %sect5.role.attrib;
>
<!ENTITY % sect6.role.attrib "%role.attrib;">
<!ELEMENT Sect6 - O (Sect6Info?, (%sect.title.content;), (%nav.class;)*,
        (((%divcomponent.mix;)+, ((%refentry.class;)* | SimpleSect*))
        | (%refentry.class;)+ | SimpleSect+), (%nav.class;)*)>
<!ATTLIST Sect6
        %label.attrib;
        %status.attrib;
        %common.attrib;
        %sect6.role.attrib;
>]]></programlisting>
</example>
<para>
Here we've redefined <sgmltag>Sect5</sgmltag> to include
<sgmltag>Sect6</sgmltag> and provided a declaration for
<sgmltag>Sect6</sgmltag>. Note that we didn't bother to provide
<sgmltag class="attribute">RenderAs</sgmltag> attributes in our
redefinitions. To properly support <sgmltag>Sect6</sgmltag>, you might
want to redefine all of the sectioning elements so that <literal>
Sect6</literal> is a legal attribute value for <sgmltag class="attribute">RenderAs</sgmltag>.
</para>
</sect1>
<sect1 id="ch05-classrole"><title>Other Modifications: Classifying a Role</title>
<para>
<indexterm><primary>Role attribute</primary>
  <secondary>changing on Procedure (example)</secondary></indexterm>

The <sgmltag class="attribute">Role</sgmltag> attribute, found on almost
all of the elements in DocBook, is a <literal>CDATA</literal> attribute that
can be used to subclass an element. In some applications, it may be useful
to modify the definition of <sgmltag class="attribute">Role</sgmltag> so that
authors must choose one of a specific set of possible values.</para>
<para>In <xref linkend="ex.changerole"/>, <sgmltag class="attribute">Role</sgmltag> on the <sgmltag>Procedure</sgmltag> element
is constrained to the values <literal>Required</literal> or <literal>
Optional</literal>.</para>
<example id="ex.changerole">
<title>Changing Role on Procedure</title>
<programlisting><![CDATA[<!ENTITY % procedure.role.attrib "Role (Required|Optional) #IMPLIED">
<!-- load DocBook -->
<!ENTITY % DocBookDTD PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
%DocBookDTD;]]><indexterm startref="DocBookcustomch05" class="endofrange"/><indexterm startref="customDocBookch05" class="endofrange"/></programlisting>
</example>
</sect1>
</chapter>
<colophon condition="online" id="colophon">
<para><emphasis role='bold'>About this Book</emphasis></para>

<para>This is an <emphasis>alpha</emphasis> edition of this book.
This version may contain glaring inconsistencies, missing sections,
and other misfeatures indicative of a <quote>work in progress</quote>.
</para>

<para><emphasis role='bold'>About the Authors</emphasis></para>

<para>Norman Walsh is an <emphasis>XML Standards Engineer</emphasis>
with <ulink url="http://www.sun.com/">Sun Microsystems, Inc.</ulink>.
</para>

<para>Norm is an active participant in a number of standards efforts
worldwide, including the XML Core, XSL and XML Schema Working Groups
of the World Wide Web Consortium, the OASIS XSLT Conformance and
RELAX&#160;NG Committees, the OASIS Entity Resolution Committee for
which he is the editor, and the OASIS DocBook Technical Committee,
which he chairs.
</para>

<para>Leonard Muellner has been implementing and supporting the
production of O'Reilly books marked up in DocBook since 1994.
</para>

<para><emphasis role='bold'>Colophon</emphasis></para>

<para>Our look is the result of reader comments, our own
experimentation, and feedback from distribution channels.
Distinctive covers complement our distinctive approach to
technical topics, breathing personality and life into
potentially dry subjects.
</para>

<para>The bird on the cover of <citetitle>DocBook: The Definitive
Guide</citetitle> is a wood duck.  Often considered one of the most
beautiful ducks in North America, the male wood duck has a metallic
purple and green head with white streaks extending from its bill
around the eyes and down to its blue and green, gold-flecked
wings. It has a white neck, chestnut-colored chest, a white or red
bill, and yellow-orange legs and feet. Females have more brown, gray,
and subdued hues.
</para>

<para>Edie Freedman designed the cover of this book, using a
19th-century engraving from the Dover Pictorial Archive. The
cover layout was produced by Kathleen Wilson using QuarkXPress
3.32 and Adobe's ITC Garamond font. The inside layout was
designed by Alicia Cech, based on a series design by Nancy
Priest. The text was formatted from SGML into FrameMaker 5.5
with Jade, using a DSSSL conversion stylesheet written by
Chris Maden. The interior fonts are ITC Garamond Light,
Garamond Book, and ConstantWillison.
</para>

<para>Whenever possible, our books use RepKover(TM), a durable and
flexible lay-flat binding. If the page count exceeds RepKover's
limit, perfect binding is used.
</para>

<para>The illustrations that appear in this book were produced by
Robert Romano using Macromedia Freehand 8 and Adobe Photoshop
5. David Futato was the production editor; Madeleine Newell guided
the book through the early stages of production.
Mark Nigara was the copyeditor for DocBook: The Definitive Guide.
Claire LeBlanc was the production manager. Ellie Cutler was the
proofreader; quality assurance was provided by Jeff Holcomb and
Claire LeBlanc. This colophon was written by Nicole Arigo.
</para>
</colophon>
<glossary id="glossary">
<?dbhtml filename="dbgloss.html"??>
<glossaryinfo>
<pubdate>$Date: 2001-08-02 14:27:50 +0400 (Чт, 02 авг 2001) $</pubdate>
<releaseinfo>$Revision: 546 $</releaseinfo>
</glossaryinfo>
<title>Glossary</title>
<glossentry id="gloss-attribute"><glossterm>attribute</glossterm>
<glossdef>
<para>
<indexterm><primary>attributes</primary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>attributes</secondary></indexterm>

Attributes augment the element on which they appear; they also
provide additional information about the element.
</para>
<para>
<indexterm><primary>start tags</primary>
  <secondary>attribute ID, containing</secondary></indexterm>

Attributes appear as name-value pairs in the element's start-tag.
For example, to assign the value <literal>hostname</literal> to the
<sgmltag class="attribute">Role</sgmltag> attribute of <sgmltag>SystemItem</sgmltag>,
you would use the mark up:
<sgmltag class="starttag">systemitem role="hostname"</sgmltag>.
</para>
</glossdef>
</glossentry>
<glossentry id="gloss-callout"><glossterm>callout</glossterm>
<glossdef>
<para>
<indexterm><primary>callouts</primary></indexterm>
A pointer, verbal or graphical or both, to a 
<emphasis>component</emphasis> of an illustration 
or a text object.</para>
</glossdef>
</glossentry>
<glossentry id="gloss-cooked"><glossterm>cooked</glossterm>
<glossdef>
<para>
<indexterm><primary>cooked data</primary></indexterm>
<indexterm><primary>appearance</primary>
  <secondary>cooked data</secondary></indexterm>

<quote>Cooked</quote> data, as distinct from <quote>raw,</quote> is a collection
of elements and character data that's ready for presentation. The processor
is not expected to rearrange, select, or suppress any of the elements, but
simply present them as specified.
</para>
<glossseealso>Raw</glossseealso>
</glossdef>
</glossentry>
<glossentry id="gloss-dtd"><glossterm>document type declaration (&DTD;)</glossterm>
<glossdef>
<para>
<indexterm><primary>document type declaration</primary></indexterm>
<indexterm><primary>declarations</primary>
  <secondary>document type declaration</secondary></indexterm>

A set of declarations that defines the names of the elements 
and their attributes, and that specifies rules for their combination
or sequence.
</para>
</glossdef>
</glossentry>
<glossentry id="gloss-dsssl"><glossterm><acronym>DSSSL</acronym></glossterm>
<glossdef>
<para>
<indexterm><primary>DSSSL</primary></indexterm>
<indexterm><primary>stylesheets</primary>
  <secondary>languages</secondary>
    <tertiary>DSSSL</tertiary></indexterm>

Document Style Semantics and Specification Language
(<acronym>ISO</acronym>/<acronym>IEC</acronym> 10179:1996). An international standard stylesheet language
for &SGML;/&XML; documents.
</para>
</glossdef>
</glossentry>
<glossentry id="gloss-element"><glossterm>element</glossterm>
<glossdef>
<para>
<indexterm><primary>elements</primary></indexterm>
<indexterm><primary>hierarchical structure</primary>
  <secondary>elements, defining</secondary></indexterm>
<indexterm><primary>empty elements</primary></indexterm>
<indexterm><primary>start tags</primary>
  <secondary>empty element</secondary></indexterm>

Elements define the hierarchical structure of a document.
Most elements have start and end tags and contain some part of the
document content. Empty elements have only a start tag and have no content. 
</para>
</glossdef>
</glossentry>
<glossentry id="gloss-entity"><glossterm>entity</glossterm>
<glossdef>
<para>
<indexterm><primary>entities</primary></indexterm>
<indexterm><primary>data entities</primary></indexterm>

A name assigned (by means of a declaration) to some chunk of 
data so it can be referred to by that name; the data can be 
of various kinds (a special character or a chapter or a set of
declarations in a &DTD;, for instance), and the way in which it is referred 
to depends on the type of data and where it is being referenced: 
&SGML; has parameter, general, external, internal, and data entities.</para>
</glossdef>
</glossentry>
<glossentry id="gloss-excl"><glossterm>exclusion</glossterm>
<glossdef>
<para>
<indexterm><primary>exclusions</primary></indexterm>
<indexterm><primary>DTDs</primary>
  <secondary>exclusions</secondary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>exclusions</secondary></indexterm>

An exclusion is used in a &DTD; to indicate that, within the element on 
which the exclusion occurs, the excluded elements are not valid anywhere
within the content of the element.
</para>
<para>
<indexterm><primary>Footnote element</primary>
  <secondary>exclusions</secondary></indexterm>
<indexterm><primary>nesting</primary>
  <secondary>footnotes</secondary></indexterm>

For example, in DocBook, <sgmltag>Footnote</sgmltag> excludes <sgmltag>Footnote</sgmltag>.
This means that footnotes cannot nest, even though <sgmltag>Footnote</sgmltag>
contains <sgmltag>Para</sgmltag>, and <sgmltag>Footnote</sgmltag> occurs in the proper
content model of <sgmltag>Para</sgmltag>.
</para>
<para>
See <xref linkend="s-ms"/>.</para>
</glossdef>
</glossentry>
<glossentry id="gloss-extentity"><glossterm>external entity</glossterm>
<glossdef>
<para>
<indexterm><primary>external general entities</primary></indexterm>
<indexterm><primary>general entities</primary>
  <secondary>external</secondary></indexterm>
<indexterm><primary>references</primary>
  <secondary>external documents</secondary></indexterm>
<indexterm><primary>documents</primary>
  <secondary>external, references to</secondary></indexterm>

An external entity is a general entity that refers to another
document. External entities are often used to incorporate 
parsable text documents, like legal notices or chapters, into larger
units, like chapters or books.</para>
</glossdef>
</glossentry>
<glossentry id="gloss-extsub"><glossterm>external subset</glossterm>
<glossdef>
<para>
<indexterm><primary>external subset</primary></indexterm>
<indexterm><primary>document type declaration</primary>
  <secondary>external subset</secondary></indexterm>
<indexterm><primary>public identifiers</primary>
  <secondary>external subset</secondary></indexterm>
<indexterm><primary>system identifiers</primary>
  <secondary>external subset</secondary></indexterm>
<indexterm><primary>declarations</primary>
  <secondary>document type declaration</secondary></indexterm>


Element, attribute, and other declarations that compose
(part of) a document type definition that are stored in an
external entity, and referenced from a document's document type
declaration using a public or system identifier.</para>
</glossdef>
</glossentry>
<glossentry id="gloss-float"><glossterm>float</glossterm>
<glossdef>
<para>
<indexterm><primary>float</primary></indexterm>
<indexterm><primary>text</primary>
  <secondary>float</secondary></indexterm>

Text objects like sidebars, figures, tables, and graphics are said
to float when their actual place in the document is not fixed. For presentation
on a printed page, for instance, a graphic may float to the top of the next page if it
is too tall to fit on the page in which it actually falls, in the sequence of words and the sequence of
other like objects in a document.</para>
</glossdef>
</glossentry>
<glossentry id="gloss-fpi"><glossterm>formal public identifier</glossterm>
<glossdef>
<para>
<indexterm><primary>FPI</primary></indexterm>
<indexterm><primary>public identifiers</primary>
  <secondary>formal</secondary></indexterm>
A public identifier that conforms to the specification of formal
public identifers in <acronym>ISO</acronym> 8879.</para>
</glossdef>
</glossentry>
<glossentry id="gloss-fosi"><glossterm><acronym>FOSI</acronym></glossterm>
<glossdef>
<para>

<indexterm><primary>FOSI stylesheets</primary></indexterm>

Formatting Output Specification Instance, an &SGML; document that 
specifies the appearance or presentation of another &SGML; document in 
accordance 
with the Output Specification &DTD; defined by <acronym>MIL-STD-28001C</acronym>.</para>
</glossdef>
</glossentry>
<glossentry id="gloss-gentity"><glossterm>general entity</glossterm>
<glossdef>
<para>
<indexterm><primary>general entities</primary></indexterm>
<indexterm><primary>entities</primary>
  <secondary>general</secondary></indexterm>
<indexterm><primary>special characters, encoding as entities</primary></indexterm>
<indexterm><primary>internal general entities</primary></indexterm>

An entity referenced by a name that starts with an 
ampersand (&amp;) and ends with a semicolon. Most of the
time general entities are used in &SGML; documents, not in the &DTD;. 
There are two types, external and internal entities, and they 
refer either to special characters or to text objects 
like commonly repeated phrases or names or chapters.</para>
</glossdef>
</glossentry>
<glossentry id="gloss-gi"><glossterm><acronym>GI</acronym></glossterm>
<glossdef>
<para>
<indexterm><primary>generic identifiers (GI)</primary></indexterm>
<indexterm><primary>GI (generic identifiers)</primary></indexterm>
<indexterm><primary>identifiers, generic</primary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>generic identifiers</secondary></indexterm>
<indexterm><primary>names</primary>
  <secondary>elements (generic identifiers)</secondary></indexterm>

Generic identifier, proper term for the actual name of an element;
<literal>Para</literal> is the generic identifier of the <sgmltag
class="element">para</sgmltag> element.</para>
</glossdef>
</glossentry>
<glossentry id="gloss-incl"><glossterm>inclusion</glossterm>
<glossdef>
<para>
<indexterm><primary>inclusions</primary></indexterm>
<indexterm><primary>DTDs</primary>
  <secondary>inclusions</secondary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>inclusions</secondary></indexterm>
<indexterm><primary>nesting</primary>
  <secondary>elements</secondary></indexterm>

An inclusion is used in a &DTD; to indicate that, within the element on 
which the inclusion occurs, the included elements are valid anywhere
within the content of the element.
</para>
<para>
For example, in DocBook, <sgmltag>Chapter</sgmltag> includes <sgmltag>IndexTerm</sgmltag>.
This means that <sgmltag>IndexTerm</sgmltag>s can occur anywhere inside chapters,
even inside elements that do not have <sgmltag>IndexTerm</sgmltag>s in their
proper content models.
</para>
<para>
See <xref linkend="s-ms"/>.
</para>
</glossdef>
</glossentry>
<glossentry id="gloss-intentity"><glossterm>internal entity</glossterm>
<glossdef>
<para>
<indexterm><primary>internal general entities</primary></indexterm>
<indexterm><primary>general entities</primary>
  <secondary>internal</secondary></indexterm>
<indexterm><primary>entities</primary>
  <secondary>general</secondary></indexterm>

A general entity that references a piece of text (including
its markup and even other internal entities), usually as a
keyboard shortcut.</para>
</glossdef>
</glossentry>
<glossentry id="gloss-intsub"><glossterm>internal subset</glossterm>
<glossdef>
<para>
<indexterm><primary>internal subset</primary></indexterm>
<indexterm><primary>document type declaration</primary>
  <secondary>internal subset</secondary></indexterm>
<indexterm><primary>declarations</primary>
  <secondary>document type declaration</secondary></indexterm>

Element, attribute, and other declarations that compose
(part of) a document type definition that are stored in a document,
within the document type declaration.
</para>
</glossdef>
</glossentry>
<glossentry id="gloss-metainfo"><glossterm>meta-information</glossterm>
<glossdef>
<para>
<indexterm><primary>meta-information</primary></indexterm>
<indexterm><primary>documents</primary>
  <secondary>meta-information</secondary></indexterm>

Meta-information is information about a document, such as the 
specification of its author or its date of composition, as opposed 
to the content of a document itself.</para>
</glossdef>
</glossentry>
<glossentry id="gloss-pentity"><glossterm>parameter entity</glossterm>
<glossdef>
<para>
<indexterm><primary>parameter entities</primary></indexterm>
<indexterm><primary>DocBook DTD</primary>
  <secondary>customizing</secondary>
    <tertiary>parameter entities</tertiary></indexterm>
<indexterm><primary>customization (DocBook DTD)</primary>
  <secondary>parameter entities, using</secondary></indexterm>
<indexterm><primary>marked sections</primary>
  <secondary>parameter entities, controlling</secondary></indexterm>

An entity usually referenced in the &DTD; by a name that 
starts with a percent sign (%) and ends with a semicolon. 
In DocBook, parameter entities are mainly used to facilitate 
customization of the &DTD;, but they can also be used to control
marked sections of a document.</para>
</glossdef>
</glossentry>
<glossentry id="gloss-pi"><glossterm>processing instruction</glossterm>
<glossdef>
<para>
<indexterm><primary>processing instructions</primary></indexterm>

An essentially arbitrary string preceded by a question mark and
delimited by angle brackets that is intended to convey
information to an application that processes an &SGML; instance.
For example, the processing instruction <literal>&lt;?linebreak&gt;</literal>
might cause the formatter to introduce a line break at the position where
the processing instruction occurs.
</para>
<para>
<indexterm><primary>XML</primary>
  <secondary>processing instructions</secondary></indexterm>
<indexterm><primary>PI</primary><see>processing instructions</see></indexterm>

In &XML; documents, processing instructions should have the form:
<screen>
&lt;?<replaceable>pitarget</replaceable> param1="value1" param2="value2"?&gt;
</screen>
</para>
<para>
The <replaceable>pitarget</replaceable> should be a name that the processing application
will recognize. Additional information in the <acronym>PI</acronym> should be added using
<quote>attribute syntax.</quote>
</para>
</glossdef>
</glossentry>
<glossentry id="gloss-pubid"><glossterm>public identifier</glossterm>
<glossdef>
<para>
<indexterm><primary>public identifiers</primary></indexterm>
<indexterm><primary>external general entities</primary>
  <secondary>public identifiers</secondary></indexterm>
<indexterm><primary>SGML</primary>
  <secondary>public identifiers</secondary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>public identifiers</secondary></indexterm>
<indexterm><primary>DTDs</primary>
  <secondary>public identifiers</secondary></indexterm>

An abstract identifier for an &SGML; or &XML; document, &DTD;, or 
external entity.</para>
</glossdef>
</glossentry>
<glossentry id="gloss-raw"><glossterm>raw</glossterm>
<glossdef>
<para>
<indexterm><primary>raw data</primary></indexterm>
<indexterm><primary>appearance</primary>
  <secondary>raw data</secondary></indexterm>
<indexterm><primary>raw data</primary><seealso>cooked data</seealso></indexterm>
<indexterm><primary>cooked data</primary><seealso>raw data</seealso></indexterm>

<quote>Raw</quote> data is just a collection of elements, with no additional
punctation or information about presentation. To continue the cooking
metaphor, raw data is just a set of ingredients. It's up to the processor
to select appropriate elements, arrange them for display, and add
required presentational information.
</para>
<glossseealso>Cooked</glossseealso>
</glossdef>
</glossentry>
<glossentry id="gloss-sgml"><glossterm>&SGML;</glossterm>
<glossdef>
<para>
<indexterm><primary>SGML</primary></indexterm>
<indexterm><primary>ISO standards</primary>
  <secondary>SGML</secondary></indexterm>

Standard Generalized Markup Language, an international standard (<acronym>ISO</acronym> 8879) that specifies 
the rules for the creation of platform-independent markup languages for electronic texts.
</para>
</glossdef>
</glossentry>
<glossentry id="gloss-stylesheet"><glossterm>stylesheet</glossterm>
<glossdef>
<para>
<indexterm><primary>stylesheets</primary></indexterm>
<indexterm><primary>appearance</primary>
  <secondary>stylesheets</secondary></indexterm>

A file that specifies the presentation or appearance of a document;
there are several standards for such stylesheets, including
<acronym>CSS</acronym>, <acronym>FOSI</acronym>s, <acronym>DSSSL</acronym>, and, most recently, <acronym>XSL</acronym>. Vendors often have proprietary
stylesheet formats as well.
</para>
</glossdef>
</glossentry>
<glossentry id="gloss-sysid"><glossterm>system identifier</glossterm>
<glossdef>
<para>
<indexterm><primary>system identifiers</primary>
  <secondary>SGML</secondary></indexterm>
<indexterm><primary>SGML</primary>
  <secondary>system identifiers</secondary></indexterm>

In &SGML;, a local, system-dependent identifier for a document,
&DTD;, or external entity. Usually a filename on the local system.</para>
<para>
<indexterm><primary>system identifiers</primary>
  <secondary>XML</secondary></indexterm>
<indexterm><primary>URI</primary>
  <secondary>XML system identifiers</secondary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>system identifiers</secondary></indexterm>

In &XML;, a system identifer is required to be a <acronym>URI</acronym>.
</para>
</glossdef>
</glossentry>
<glossentry id="gloss-tag"><glossterm>tag</glossterm>
<glossdef>
<para>
<indexterm><primary>tags</primary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>tags</secondary></indexterm>
<indexterm><primary>angle brackets</primary>
  <secondary>SGML tags</secondary></indexterm>
<indexterm><primary>SGML</primary>
  <secondary>tags</secondary></indexterm>

An &SGML; element name enclosed in angle brackets
(&lt;&gt;), used to mark up the semantics or structure of a
document. <sgmltag class="starttag">Para</sgmltag> is a tag in DocBook
used to mark the beginning of a paragraph.</para>
</glossdef>
</glossentry>
<glossentry id="gloss-uri"><glossterm><acronym>URI</acronym></glossterm>
<glossdef>
<para>
<indexterm><primary>URI</primary></indexterm>
<indexterm><primary>Internet names and addresses</primary></indexterm>
<indexterm><primary>addresses, Internet syntax</primary></indexterm>
<indexterm><primary>names</primary>
  <secondary>Internet, syntax</secondary></indexterm>

Uniform Resource Identifier, the <acronym>W3C</acronym>'s codification of the name and 
address syntax of present and future objects on the Internet. In its most basic 
form, a <acronym>URI</acronym> consists of a scheme name (such as file, http, ftp, news, mailto, 
gopher) followed by a colon, followed by a path whose nature is determined 
by the scheme that precedes it (see <acronym>RFC</acronym> 1630). 
</para>
<para>
<indexterm><primary>URN</primary></indexterm>
<indexterm><primary>URL</primary></indexterm>

<acronym>URI</acronym> is the umbrella term for <acronym>URN</acronym>s, <acronym>URL</acronym>s, and all other Uniform Resource
Identifiers.
</para>
</glossdef>
</glossentry>
<glossentry id="gloss-url"><glossterm><acronym>URL</acronym></glossterm>
<glossdef>
<para>Uniform Resource Locator, a name and address for an existing object
accessible over the Internet. <literal>http://www.docbook.org</literal>
is an example of a <acronym>URL</acronym> (see <acronym>RFC</acronym> 1738).</para>
</glossdef>
</glossentry>
<glossentry id="gloss-urn"><glossterm><acronym>URN</acronym></glossterm>
<glossdef>
<para>Uniform Resource Name, the result of an evolving attempt to
define a name and address syntax for <emphasis>persistent</emphasis>
objects accessible over the Internet; <literal>urn:foo:a123,456</literal>
is a legal <acronym>URN</acronym> consisting of three colon-separated fields: 
<literal>urn</literal> 
followed by a namespace identifier, followed by a namespace specifier
(see <acronym>RFC</acronym> 1737 and <acronym>RFC</acronym> 2141 for details).</para>
</glossdef>
</glossentry>
<glossentry id="gloss-w3c"><glossterm><acronym>W3C</acronym></glossterm>
<glossdef>
<para>
<indexterm><primary>W3C (World Wide Web Consortium)</primary></indexterm>
<indexterm><primary>World Wide Web Consortium (W3C)</primary></indexterm>

The World Wide Web Consortium (<ulink url="http://www.w3.org/">http://www.w3.org/</ulink>).</para>
</glossdef>
</glossentry>
<glossentry id="gloss-wrapper"><glossterm>wrapper</glossterm>
<glossdef>
<para>
<indexterm><primary>wrappers</primary></indexterm>
<indexterm><primary>meta-information</primary>
  <secondary>wrappers</secondary></indexterm>
<indexterm><primary>elements</primary>
  <secondary>wrappers</secondary></indexterm>

Some elements, such as <sgmltag>Chapter</sgmltag>, have important semantic
significance.  Other elements serve no obvious purpose except to contain
a number of other elements. For example, <sgmltag>BookInfo</sgmltag> has no
important semantics; it merely serves as a container for the meta-information
about a book.  Elements that are just containers are sometimes called
<quote>wrappers.</quote> 
</para>
</glossdef>
</glossentry>
<glossentry id="gloss-xml"><glossterm>&XML;</glossterm>
<glossdef>
<para>
<indexterm><primary>XML</primary></indexterm>
<indexterm><primary>SGML</primary>
  <secondary>XML and</secondary></indexterm>
<indexterm><primary>Extensible Markup Language</primary><see>XML</see></indexterm>

The <ulink url="http://www.w3.org/TR/REC-xml">Extensible Markup Language</ulink>, a subset of &SGML; 
designed specifically for use over the Web.</para>
</glossdef>
</glossentry>
<glossentry id="gloss-xsl"><glossterm><acronym>XSL</acronym></glossterm>
<glossdef>
<para>
<indexterm><primary>XSL</primary></indexterm>
<indexterm><primary>XML</primary>
  <secondary>XSL stylesheets</secondary></indexterm>
&XML; Style Language, an evolving language for stylesheets 
to be attached to &XML; documents. The stylesheet is itself an &XML;
document.</para>
</glossdef>
</glossentry>
</glossary>


<index id="index"/>


<?xml version='1.0' encoding='utf-8'?> <!-- -*- nxml -*- -->

<!-- This file should be changed EVERY TIME a new draft is published! -->

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:fm="http://freshmeat.net/projects/freshmeat-submit/"
		xmlns:sf="http://sourceforge.net/"
		exclude-result-prefixes="fm sf"
                version='1.0'>

<xsl:output method="xml" encoding="utf-8"/>

<xsl:param name="freshmeat" select="0"/>

<xsl:param name="VERSION" select="string(document('')//fm:Version[1])"/>
<xsl:strip-space elements="fm:*"/>

<fm:project>
  <fm:Project>DocBook</fm:Project>
  <fm:Branch>The Definitive Guide</fm:Branch>
  <fm:Version>2.0.17</fm:Version>
  <fm:Release-Focus>
  <!-- Initial freshmeat announcement -->
  Documentation
  <!-- Code cleanup -->
  <!-- Minor feature enhancements -->
  <!-- Major feature enhancements -->
  <!-- Minor bugfixes -->
  <!-- Major bugfixes -->
  <!-- Minor security fixes -->
  <!-- Major security fixes -->
  </fm:Release-Focus>
  <fm:Home-Page-URL>http://docbook.org/tdg/en/</fm:Home-Page-URL>
  <fm:Zipped-Tar-URL>http://docbook.org/tdg/en/tdg-en-html-{VERSION}.zip</fm:Zipped-Tar-URL>
  <fm:Changelog-URL>http://docbook.org/tdg/en/html/appi.html</fm:Changelog-URL>
  <fm:CVS-URL>http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/docbook/defguide/</fm:CVS-URL>
  <fm:Mailing-List-URL>http://lists.oasis-open.org/archives/docbook/</fm:Mailing-List-URL>
  <fm:Changes>Updated license terms.</fm:Changes>
</fm:project>

<xsl:template name="bookinfo">
  <bookinfo>
    <mediaobject role="online">
      <imageobject>
	<imagedata fileref="figures/cover.png" align="left"/>
      </imageobject>
    </mediaobject>
    <title>DocBook</title>
    <subtitle>The Definitive Guide</subtitle>
    <authorgroup>
      <author><firstname>Norman</firstname><surname>Walsh</surname></author>
      <author><firstname>Leonard</firstname><surname>Muellner</surname></author>
      <othercredit><firstname>Bob</firstname><surname>Stayton</surname></othercredit>
    </authorgroup>
    <editor><firstname>Frank</firstname><surname>Willison</surname></editor>
    <editor role="production"><firstname>David</firstname><surname>Futato</surname></editor>
    <publisher>
      <publishername>O'Reilly Media, Inc.</publishername>
      <address><city>Beijing</city></address>
      <address><city>Cambridge</city></address>
      <address><city>Farnham</city></address>
      <address><city>Köln</city></address>
      <address><city>Paris</city></address>
      <address><city>Sebastopol</city></address>
      <address><city>Taipei</city></address>
      <address><city>Tokyo</city></address>
    </publisher>
    <printhistory>
      <para>October 1999: First Edition.</para>
    </printhistory>
    <isbn>156592-580-7</isbn>
    <releaseinfo>
      <xsl:value-of select="$VERSION"/>
    </releaseinfo>
    <pubdate>$Date: 2007-02-06 00:30:05 +0300 (Вт, 06 фев 2007) $</pubdate>

    <legalnotice>
      <para condition="online">
	<citetitle>DocBook: The Definitive Guide</citetitle> Copyright
© 2004-2006 Norman Walsh. Portions Copyright © 1999-2003
O'Reilly Media, Inc.</para>

<para>Permission is granted to copy, distribute and/or modify this
document under the terms of the GNU Free Documentation License,
Version 1.1 or any later version published by the Free Software
Foundation.
A copy of the license is included in <xref linkend="gfdl"/>.</para>

<para>Nutshell Handbook, the Nutshell Handbook logo, and the O'Reilly
logo are registered trademarks of O'Reilly Media, Inc. The
association between the image of a duck and the topic of DocBook is a
trademark of O'Reilly Media, Inc. Java and all Java-based
trademarks and logos are trademarks or registered trademarks of Sun
Microsystems, Inc., in the United States and other countries. O'Reilly
Media, Inc. is independent of Sun Microsystems.
</para>

<para>Many of the designations used by manufacturers and sellers to
distinguish their products are claimed as trademarks. Where those
designations appear in this book, and O'Reilly Media, Inc.
was aware of a trademark claim, the designations have been printed in
caps or initial caps. While every precaution has been taken in the
preparation of this book, the publisher assumes no responsibility for
errors or omissions, or for damages resulting from the use of the
information contained herein.
</para>
</legalnotice>

<copyright>
<year>1999</year>
<year>2000</year>
<year>2001</year>
<year>2002</year>
<year>2003</year>
<holder>O'Reilly Media, Inc. All rights reserved.</holder>
</copyright>
<copyright>
<year>2004</year>
<year>2005</year>
<year>2006</year>
<holder>Norman Walsh.</holder>
</copyright>
</bookinfo>
</xsl:template>

<xsl:template match="/">
  <xsl:choose>
    <xsl:when test="$freshmeat != 0">
      <xsl:apply-templates select="//fm:project"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:call-template name="bookinfo"/>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template match="fm:project">
  <xsl:text>&#10;</xsl:text>
  <xsl:apply-templates/>
  <xsl:text>&#10;</xsl:text>
  <xsl:apply-templates select="fm:Changes" mode="text"/>
  <xsl:text>&#10;</xsl:text>
</xsl:template>

<xsl:template match="fm:Changes"/>

<xsl:template match="fm:*">
  <xsl:value-of select="local-name(.)"/>
  <xsl:text>: </xsl:text>

  <xsl:call-template name="value">
    <xsl:with-param name="text" select="normalize-space(.)"/>
  </xsl:call-template>
  <xsl:text>&#10;</xsl:text>
</xsl:template>

<xsl:template name="value">
  <xsl:param name="text"/>

  <xsl:call-template name="string.subst">
    <xsl:with-param name="string" select="$text"/>
    <xsl:with-param name="target" select="'{VERSION}'"/>
    <xsl:with-param name="replacement" select="$VERSION"/>
  </xsl:call-template>
</xsl:template>

<xsl:template name="string.subst">
  <xsl:param name="string"/>
  <xsl:param name="target"/>
  <xsl:param name="replacement"/>

  <xsl:choose>
    <xsl:when test="contains($string, $target)">
      <xsl:variable name="rest">
        <xsl:call-template name="string.subst">
          <xsl:with-param name="string" select="substring-after($string, $target)"/>
          <xsl:with-param name="target" select="$target"/>
          <xsl:with-param name="replacement" select="$replacement"/>
        </xsl:call-template>
      </xsl:variable>
      <xsl:value-of select="concat(substring-before($string, $target),
                                   $replacement,
                                   $rest)"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:value-of select="$string"/>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

</xsl:stylesheet>

</d:InfElement></d:DocumentationCore>